Index: api/.eslintrc.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>module.exports = {\r\n  parser: '@typescript-eslint/parser',\r\n  parserOptions: {\r\n    project: 'tsconfig.json',\r\n    tsconfigRootDir: __dirname,\r\n    sourceType: 'module',\r\n  },\r\n  plugins: ['@typescript-eslint/eslint-plugin'],\r\n  extends: [\r\n    'plugin:@typescript-eslint/recommended',\r\n    'plugin:prettier/recommended',\r\n  ],\r\n  root: true,\r\n  env: {\r\n    node: true,\r\n    jest: true,\r\n  },\r\n  ignorePatterns: ['.eslintrc.js'],\r\n  rules: {\r\n    '@typescript-eslint/interface-name-prefix': 'off',\r\n    '@typescript-eslint/explicit-function-return-type': 'off',\r\n    '@typescript-eslint/explicit-module-boundary-types': 'off',\r\n    '@typescript-eslint/no-explicit-any': 'off',\r\n  },\r\n};\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/.eslintrc.js b/api/.eslintrc.js
--- a/api/.eslintrc.js	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/.eslintrc.js	(date 1736262218738)
@@ -22,4 +22,8 @@
     '@typescript-eslint/explicit-module-boundary-types': 'off',
     '@typescript-eslint/no-explicit-any': 'off',
   },
+  "semi": false,
+  "singleQuote": true,
+  "printWidth": 80,
+  "tabWidth": 2
 };
Index: my-app/src/app/services/auth/auth.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { Observable, throwError, BehaviorSubject, of } from 'rxjs';\r\nimport {tap, catchError, map, switchMap} from 'rxjs/operators';\r\n\r\nexport interface Credential {\r\n  credential_id: string;\r\n  mail: string;\r\n  isAdmin: boolean;\r\n  username?: string;\r\n}\r\n\r\n// ici faut rajouter export 'Claudio\"\r\nexport interface LoginResponse {\r\n  token_id: string;\r\n  token: string;\r\n  refreshToken: string;\r\n  credential: Credential;\r\n  clientId?: number; // Ajout du clientId dans la réponse\r\n}\r\n\r\ninterface SignupResponse {\r\n  message: string;\r\n  credential: Credential;\r\n}\r\n\r\nexport interface LoginCredentials {\r\n  mail: string;\r\n  password: string;\r\n}\r\n\r\nexport interface SignupCredentials {\r\n  username: string;\r\n  mail: string;\r\n  password: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private readonly API_URL = 'http://localhost:2024/api';\r\n  private readonly EMAIL_REGEX = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\r\n  private currentUserSubject = new BehaviorSubject<Credential | null>(null);\r\n  private loginAttempts: { [key: string]: { count: number; lastAttempt: number } } = {};\r\n  private readonly MAX_ATTEMPTS = 5;\r\n  private readonly LOCK_TIME = 15 * 60 * 1000; // 15 minutes\r\n\r\n  currentUser$ = this.currentUserSubject.asObservable();\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private router: Router\r\n  ) {\r\n    this.loadStoredUser();\r\n  }\r\n\r\n  private loadStoredUser(): void {\r\n    try {\r\n      const storedUser = localStorage.getItem('user');\r\n      if (storedUser) {\r\n        this.currentUserSubject.next(JSON.parse(storedUser));\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors du chargement de l\\'utilisateur:', error);\r\n      this.logout();\r\n    }\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    return !!this.currentUserSubject.value && !!localStorage.getItem('token');\r\n  }\r\n\r\n  isAdmin(): boolean {\r\n    const user = this.currentUserSubject.value;\r\n    return user ? user.isAdmin : false;\r\n  }\r\n\r\n  validateEmail(email: string): boolean {\r\n    return this.EMAIL_REGEX.test(email);\r\n  }\r\n\r\n  login(credentials: LoginCredentials): Observable<LoginResponse> {\r\n    console.log('Tentative de connexion pour:', credentials.mail);\r\n\r\n    if (!this.validateEmail(credentials.mail)) {\r\n      return throwError(() => new Error('Format d\\'email invalide'));//\r\n    }\r\n\r\n    return this.http.post<LoginResponse>(`${this.API_URL}/account/signin`, {\r\n      mail: credentials.mail,\r\n      password: credentials.password\r\n    }).pipe(\r\n      tap(response => {\r\n        console.log('Réponse de connexion reçue:', response);\r\n        this.saveAuthData(response);\r\n      }),\r\n      catchError(error => {\r\n        console.error('Erreur de connexion:', error);\r\n        return this.handleError(error);\r\n      })\r\n    );\r\n  }\r\n\r\n  adminLogin(credentials: LoginCredentials): Observable<LoginResponse> {\r\n    console.log('Tentative de connexion admin pour:', credentials.mail);\r\n\r\n    if (!this.validateEmail(credentials.mail)) {\r\n      return throwError(() => new Error('Format d\\'email invalide'));\r\n    }\r\n\r\n    return this.http.post<LoginResponse>(`${this.API_URL}/account/admin-signin`, {\r\n      mail: credentials.mail,\r\n      password: credentials.password\r\n    }).pipe(\r\n      tap(response => {\r\n        console.log('Réponse de connexion admin reçue:', response);\r\n        if (!response.credential.isAdmin) {\r\n          throw new Error('Accès non autorisé');\r\n        }\r\n        this.saveAuthData(response);\r\n      }),\r\n      catchError(error => {\r\n        console.error('Erreur de connexion admin:', error);\r\n        return this.handleError(error);\r\n      })\r\n    );\r\n  }\r\n\r\n  signup(credentials: SignupCredentials): Observable<SignupResponse> {\r\n    // On garde toutes les validations existantes\r\n    if (!credentials.username || !credentials.mail || !credentials.password) {\r\n      return throwError(() => new Error('Tous les champs sont obligatoires'));\r\n    }\r\n\r\n    if (!this.validateEmail(credentials.mail)) {\r\n      return throwError(() => new Error('Format d\\'email invalide'));\r\n    }\r\n\r\n    if (credentials.password.length < 8) {\r\n      return throwError(() => new Error('Le mot de passe doit contenir au moins 8 caractères'));\r\n    }\r\n\r\n    // On ajoute juste la vérification d'email existant AVANT l'inscription\r\n    return this.checkUserExists(credentials.mail).pipe(\r\n      switchMap(exists => {\r\n        if (exists) {\r\n          return throwError(() => ({\r\n            status: 409,\r\n            message: 'Cet email est déjà utilisé'\r\n          }));\r\n        }\r\n\r\n        // Le reste du code reste exactement le même\r\n        return this.http.post<SignupResponse>(`${this.API_URL}/account/signup`, credentials).pipe(\r\n          tap(response => console.log('Inscription réussie:', response)),\r\n          catchError(this.handleError)\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  checkUserExists(email: string): Observable<boolean> {\r\n    if (!this.validateEmail(email)) {\r\n      return throwError(() => new Error('Format d\\'email invalide'));\r\n    }\r\n\r\n    return this.http.get<{ exists: boolean }>(`${this.API_URL}/account/check-email/${email}`).pipe(\r\n      map(response => response.exists),\r\n      catchError(error => {\r\n        console.error('Erreur vérification email:', error);\r\n        // En cas d'erreur, on continue avec le login\r\n        return of(true);\r\n      })\r\n    );\r\n  }\r\n\r\n  verifyToken(): Observable<boolean> {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      return throwError(() => new Error('Non authentifié'));\r\n    }\r\n\r\n    return this.http.get<{ valid: boolean }>(`${this.API_URL}/account/verify-token`).pipe(\r\n      map(() => true),\r\n      catchError(() => {\r\n        this.logout();\r\n        return throwError(() => new Error('Token invalide'));\r\n      })\r\n    );\r\n  }\r\n\r\n  refreshToken(): Observable<{ token: string; refreshToken: string }> {\r\n    const refreshToken = localStorage.getItem('refreshToken');\r\n    if (!refreshToken) {\r\n      this.logout();\r\n      return throwError(() => new Error('Refresh token non trouvé'));\r\n    }\r\n\r\n    return this.http.post<{ token: string; refreshToken: string }>(\r\n      `${this.API_URL}/account/refresh-token`,\r\n      { refreshToken }\r\n    ).pipe(\r\n      tap(response => {\r\n        localStorage.setItem('token', response.token);\r\n        localStorage.setItem('refreshToken', response.refreshToken);\r\n      }),\r\n      catchError(error => {\r\n        this.logout();\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  private checkLoginAttempts(email: string): boolean {\r\n    const now = Date.now();\r\n    const attempts = this.loginAttempts[email];\r\n\r\n    if (attempts) {\r\n      if (attempts.count >= this.MAX_ATTEMPTS) {\r\n        const timeElapsed = now - attempts.lastAttempt;\r\n        if (timeElapsed < this.LOCK_TIME) {\r\n          const remainingTime = Math.ceil((this.LOCK_TIME - timeElapsed) / 1000 / 60);\r\n          throw new Error(`Compte temporairement bloqué. Réessayez dans ${remainingTime} minutes`);\r\n        } else {\r\n          delete this.loginAttempts[email];\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  private incrementLoginAttempts(email: string): void {\r\n    if (!this.loginAttempts[email]) {\r\n      this.loginAttempts[email] = { count: 0, lastAttempt: Date.now() };\r\n    }\r\n    this.loginAttempts[email].count++;\r\n    this.loginAttempts[email].lastAttempt = Date.now();\r\n  }\r\n\r\n  private saveAuthData(response: LoginResponse): void {\r\n    console.log('Début saveAuthData:', response);\r\n\r\n    try {\r\n      // Sauvegarder le token et le refresh token\r\n      localStorage.setItem('token', response.token);\r\n      localStorage.setItem('refreshToken', response.refreshToken);\r\n\r\n      // Sauvegarder les informations de l'utilisateur\r\n      localStorage.setItem('user', JSON.stringify(response.credential));\r\n\r\n      // Rechercher et sauvegarder le clientId\r\n      this.findAndSaveClientId(response.credential.credential_id);\r\n\r\n      this.currentUserSubject.next(response.credential);\r\n    } catch (error) {\r\n      console.error('Erreur dans saveAuthData:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  private async findAndSaveClientId(credentialId: string): Promise<void> {\r\n    try {\r\n      const client = await this.http.get<any>(`${this.API_URL}/clients/credential/${credentialId}`)\r\n        .toPromise();\r\n\r\n      if (client && client.clientId) {\r\n        localStorage.setItem('clientId', client.clientId.toString());\r\n        console.log('ClientId sauvegardé:', client.clientId);\r\n      } else {\r\n        console.error('ClientId non trouvé dans la réponse');\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération du clientId:', error);\r\n    }\r\n  }\r\n\r\n  private clearAuthData(): void {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('refreshToken');\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('clientId'); // Suppression de l'ID client\r\n    this.currentUserSubject.next(null);\r\n    this.router.navigate(['/login']);\r\n  }\r\n\r\n  logout(): void {\r\n    this.clearAuthData();\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    let errorMessage = 'Une erreur est survenue';\r\n\r\n    if (error.error instanceof ErrorEvent) {\r\n      errorMessage = error.error.message;\r\n    } else {\r\n      switch (error.status) {\r\n        case 400:\r\n          errorMessage = error.error.message || 'Données invalides';\r\n          break;\r\n        case 401:\r\n          errorMessage = 'Email ou mot de passe incorrect';\r\n          break;\r\n        case 403:\r\n          errorMessage = 'Accès non autorisé';\r\n          break;\r\n        case 404:\r\n          errorMessage = 'Utilisateur non trouvé';\r\n          break;\r\n        case 429:\r\n          errorMessage = 'Trop de tentatives. Veuillez réessayer plus tard';\r\n          break;\r\n        default:\r\n          errorMessage = 'Erreur lors de la connexion';\r\n      }\r\n    }\r\n\r\n    console.error('Erreur:', error);\r\n    return throwError(() => new Error(errorMessage));\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return !!localStorage.getItem('token');\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/my-app/src/app/services/auth/auth.service.ts b/my-app/src/app/services/auth/auth.service.ts
--- a/my-app/src/app/services/auth/auth.service.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/my-app/src/app/services/auth/auth.service.ts	(date 1736265727854)
@@ -112,12 +112,12 @@
 
     return this.http.post<LoginResponse>(`${this.API_URL}/account/admin-signin`, {
       mail: credentials.mail,
-      password: credentials.password
+      password: credentials.password,
     }).pipe(
       tap(response => {
         console.log('Réponse de connexion admin reçue:', response);
         if (!response.credential.isAdmin) {
-          throw new Error('Accès non autorisé');
+          throw new Error('Accès non autorisé : cet utilisateur n\'est pas un administrateur');
         }
         this.saveAuthData(response);
       }),
@@ -128,6 +128,7 @@
     );
   }
 
+
   signup(credentials: SignupCredentials): Observable<SignupResponse> {
     // On garde toutes les validations existantes
     if (!credentials.username || !credentials.mail || !credentials.password) {
Index: api/package-lock.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"name\": \"api\",\r\n  \"version\": \"0.0.1\",\r\n  \"lockfileVersion\": 3,\r\n  \"requires\": true,\r\n  \"packages\": {\r\n    \"\": {\r\n      \"name\": \"api\",\r\n      \"version\": \"0.0.1\",\r\n      \"license\": \"UNLICENSED\",\r\n      \"dependencies\": {\r\n        \"@nestjs/axios\": \"^3.1.3\",\r\n        \"@nestjs/common\": \"^10.3.9\",\r\n        \"@nestjs/config\": \"^3.3.0\",\r\n        \"@nestjs/core\": \"^10.3.9\",\r\n        \"@nestjs/jwt\": \"^10.2.0\",\r\n        \"@nestjs/passport\": \"^10.0.3\",\r\n        \"@nestjs/platform-express\": \"^10.3.9\",\r\n        \"@nestjs/swagger\": \"^7.3.1\",\r\n        \"@nestjs/typeorm\": \"^10.0.2\",\r\n        \"@prisma/client\": \"^6.0.1\",\r\n        \"@types/passport-jwt\": \"^4.0.1\",\r\n        \"@types/paypal-rest-sdk\": \"^1.7.9\",\r\n        \"axios\": \"^1.7.9\",\r\n        \"bcrypt\": \"^5.1.1\",\r\n        \"builder-pattern\": \"^2.2.0\",\r\n        \"class-transformer\": \"^0.5.1\",\r\n        \"class-validator\": \"^0.14.1\",\r\n        \"mysql2\": \"^3.10.1\",\r\n        \"passport\": \"^0.7.0\",\r\n        \"passport-jwt\": \"^4.0.1\",\r\n        \"pg\": \"^8.13.1\",\r\n        \"reflect-metadata\": \"^0.2.0\",\r\n        \"swagger-ui-express\": \"^5.0.1\",\r\n        \"typeorm\": \"^0.3.20\",\r\n        \"ulid\": \"^2.3.0\"\r\n      },\r\n      \"devDependencies\": {\r\n        \"@nestjs/cli\": \"^10.0.0\",\r\n        \"@nestjs/schematics\": \"^10.0.0\",\r\n        \"@nestjs/testing\": \"^10.0.0\",\r\n        \"@types/bcrypt\": \"^5.0.2\",\r\n        \"@types/express\": \"^4.17.17\",\r\n        \"@types/jest\": \"^29.5.2\",\r\n        \"@types/node\": \"^20.3.1\",\r\n        \"@types/supertest\": \"^6.0.0\",\r\n        \"@types/swagger-ui-express\": \"^4.1.6\",\r\n        \"@typescript-eslint/eslint-plugin\": \"^6.0.0\",\r\n        \"@typescript-eslint/parser\": \"^6.0.0\",\r\n        \"eslint\": \"^8.42.0\",\r\n        \"eslint-config-prettier\": \"^9.0.0\",\r\n        \"eslint-plugin-prettier\": \"^5.0.0\",\r\n        \"jest\": \"^29.5.0\",\r\n        \"nodemon\": \"^3.1.3\",\r\n        \"prettier\": \"^3.0.0\",\r\n        \"prisma\": \"^6.0.1\",\r\n        \"source-map-support\": \"^0.5.21\",\r\n        \"supertest\": \"^6.3.3\",\r\n        \"ts-jest\": \"^29.1.0\",\r\n        \"ts-loader\": \"^9.4.3\",\r\n        \"ts-node\": \"^10.9.1\",\r\n        \"tsconfig-paths\": \"^4.2.0\",\r\n        \"typescript\": \"^5.1.3\"\r\n      }\r\n    },\r\n    \"node_modules/@ampproject/remapping\": {\r\n      \"version\": \"2.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz\",\r\n      \"integrity\": \"sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@jridgewell/gen-mapping\": \"^0.3.5\",\r\n        \"@jridgewell/trace-mapping\": \"^0.3.24\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=6.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/@angular-devkit/core\": {\r\n      \"version\": \"17.3.8\",\r\n      \"resolved\": \"https://registry.npmjs.org/@angular-devkit/core/-/core-17.3.8.tgz\",\r\n      \"integrity\": \"sha512-Q8q0voCGudbdCgJ7lXdnyaxKHbNQBARH68zPQV72WT8NWy+Gw/tys870i6L58NWbBaCJEUcIj/kb6KoakSRu+Q==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"ajv\": \"8.12.0\",\r\n        \"ajv-formats\": \"2.1.1\",\r\n        \"jsonc-parser\": \"3.2.1\",\r\n        \"picomatch\": \"4.0.1\",\r\n        \"rxjs\": \"7.8.1\",\r\n        \"source-map\": \"0.7.4\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^18.13.0 || >=20.9.0\",\r\n        \"npm\": \"^6.11.0 || ^7.5.6 || >=8.0.0\",\r\n        \"yarn\": \">= 1.13.0\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"chokidar\": \"^3.5.2\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"chokidar\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"node_modules/@angular-devkit/schematics\": {\r\n      \"version\": \"17.3.8\",\r\n      \"resolved\": \"https://registry.npmjs.org/@angular-devkit/schematics/-/schematics-17.3.8.tgz\",\r\n      \"integrity\": \"sha512-QRVEYpIfgkprNHc916JlPuNbLzOgrm9DZalHasnLUz4P6g7pR21olb8YCyM2OTJjombNhya9ZpckcADU5Qyvlg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@angular-devkit/core\": \"17.3.8\",\r\n        \"jsonc-parser\": \"3.2.1\",\r\n        \"magic-string\": \"0.30.8\",\r\n        \"ora\": \"5.4.1\",\r\n        \"rxjs\": \"7.8.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^18.13.0 || >=20.9.0\",\r\n        \"npm\": \"^6.11.0 || ^7.5.6 || >=8.0.0\",\r\n        \"yarn\": \">= 1.13.0\"\r\n      }\r\n    },\r\n    \"node_modules/@angular-devkit/schematics-cli\": {\r\n      \"version\": \"17.3.8\",\r\n      \"resolved\": \"https://registry.npmjs.org/@angular-devkit/schematics-cli/-/schematics-cli-17.3.8.tgz\",\r\n      \"integrity\": \"sha512-TjmiwWJarX7oqvNiRAroQ5/LeKUatxBOCNEuKXO/PV8e7pn/Hr/BqfFm+UcYrQoFdZplmtNAfqmbqgVziKvCpA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@angular-devkit/core\": \"17.3.8\",\r\n        \"@angular-devkit/schematics\": \"17.3.8\",\r\n        \"ansi-colors\": \"4.1.3\",\r\n        \"inquirer\": \"9.2.15\",\r\n        \"symbol-observable\": \"4.0.0\",\r\n        \"yargs-parser\": \"21.1.1\"\r\n      },\r\n      \"bin\": {\r\n        \"schematics\": \"bin/schematics.js\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^18.13.0 || >=20.9.0\",\r\n        \"npm\": \"^6.11.0 || ^7.5.6 || >=8.0.0\",\r\n        \"yarn\": \">= 1.13.0\"\r\n      }\r\n    },\r\n    \"node_modules/@angular-devkit/schematics-cli/node_modules/chalk\": {\r\n      \"version\": \"5.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-5.3.0.tgz\",\r\n      \"integrity\": \"sha512-dLitG79d+GV1Nb/VYcCDFivJeK1hiukt9QjRNVOsUtTy1rR1YJsmpGGTZ3qJos+uw7WmWF4wUwBd9jxjocFC2w==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \"^12.17.0 || ^14.13 || >=16.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/chalk/chalk?sponsor=1\"\r\n      }\r\n    },\r\n    \"node_modules/@angular-devkit/schematics-cli/node_modules/cli-width\": {\r\n      \"version\": \"4.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/cli-width/-/cli-width-4.1.0.tgz\",\r\n      \"integrity\": \"sha512-ouuZd4/dm2Sw5Gmqy6bGyNNNe1qt9RpmxveLSO7KcgsTnU7RXfsw+/bukWGo1abgBiMAic068rclZsO4IWmmxQ==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">= 12\"\r\n      }\r\n    },\r\n    \"node_modules/@angular-devkit/schematics-cli/node_modules/inquirer\": {\r\n      \"version\": \"9.2.15\",\r\n      \"resolved\": \"https://registry.npmjs.org/inquirer/-/inquirer-9.2.15.tgz\",\r\n      \"integrity\": \"sha512-vI2w4zl/mDluHt9YEQ/543VTCwPKWiHzKtm9dM2V0NdFcqEexDAjUHzO1oA60HRNaVifGXXM1tRRNluLVHa0Kg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@ljharb/through\": \"^2.3.12\",\r\n        \"ansi-escapes\": \"^4.3.2\",\r\n        \"chalk\": \"^5.3.0\",\r\n        \"cli-cursor\": \"^3.1.0\",\r\n        \"cli-width\": \"^4.1.0\",\r\n        \"external-editor\": \"^3.1.0\",\r\n        \"figures\": \"^3.2.0\",\r\n        \"lodash\": \"^4.17.21\",\r\n        \"mute-stream\": \"1.0.0\",\r\n        \"ora\": \"^5.4.1\",\r\n        \"run-async\": \"^3.0.0\",\r\n        \"rxjs\": \"^7.8.1\",\r\n        \"string-width\": \"^4.2.3\",\r\n        \"strip-ansi\": \"^6.0.1\",\r\n        \"wrap-ansi\": \"^6.2.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=18\"\r\n      }\r\n    },\r\n    \"node_modules/@angular-devkit/schematics-cli/node_modules/mute-stream\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/mute-stream/-/mute-stream-1.0.0.tgz\",\r\n      \"integrity\": \"sha512-avsJQhyd+680gKXyG/sQc0nXaC6rBkPOfyHYcFb9+hdkqQkR9bdnkJ0AMZhke0oesPqIO+mFFJ+IdBc7mst4IA==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \"^14.17.0 || ^16.13.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/@angular-devkit/schematics-cli/node_modules/run-async\": {\r\n      \"version\": \"3.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/run-async/-/run-async-3.0.0.tgz\",\r\n      \"integrity\": \"sha512-540WwVDOMxA6dN6We19EcT9sc3hkXPw5mzRNGM3FkdN/vtE9NFvj5lFAPNwUDmJjXidm3v7TC1cTE7t17Ulm1Q==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=0.12.0\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/code-frame\": {\r\n      \"version\": \"7.26.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.26.2.tgz\",\r\n      \"integrity\": \"sha512-RJlIHRueQgwWitWgF8OdFYGZX328Ax5BCemNGlqHfplnRT9ESi8JkFlvaVYbS+UubVY6dpv87Fs2u5M29iNFVQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/helper-validator-identifier\": \"^7.25.9\",\r\n        \"js-tokens\": \"^4.0.0\",\r\n        \"picocolors\": \"^1.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=6.9.0\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/compat-data\": {\r\n      \"version\": \"7.26.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.26.2.tgz\",\r\n      \"integrity\": \"sha512-Z0WgzSEa+aUcdiJuCIqgujCshpMWgUpgOxXotrYPSA53hA3qopNaqcJpyr0hVb1FeWdnqFA35/fUtXgBK8srQg==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=6.9.0\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/core\": {\r\n      \"version\": \"7.26.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@babel/core/-/core-7.26.0.tgz\",\r\n      \"integrity\": \"sha512-i1SLeK+DzNnQ3LL/CswPCa/E5u4lh1k6IAEphON8F+cXt0t9euTshDru0q7/IqMa1PMPz5RnHuHscF8/ZJsStg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@ampproject/remapping\": \"^2.2.0\",\r\n        \"@babel/code-frame\": \"^7.26.0\",\r\n        \"@babel/generator\": \"^7.26.0\",\r\n        \"@babel/helper-compilation-targets\": \"^7.25.9\",\r\n        \"@babel/helper-module-transforms\": \"^7.26.0\",\r\n        \"@babel/helpers\": \"^7.26.0\",\r\n        \"@babel/parser\": \"^7.26.0\",\r\n        \"@babel/template\": \"^7.25.9\",\r\n        \"@babel/traverse\": \"^7.25.9\",\r\n        \"@babel/types\": \"^7.26.0\",\r\n        \"convert-source-map\": \"^2.0.0\",\r\n        \"debug\": \"^4.1.0\",\r\n        \"gensync\": \"^1.0.0-beta.2\",\r\n        \"json5\": \"^2.2.3\",\r\n        \"semver\": \"^6.3.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=6.9.0\"\r\n      },\r\n      \"funding\": {\r\n        \"type\": \"opencollective\",\r\n        \"url\": \"https://opencollective.com/babel\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/core/node_modules/semver\": {\r\n      \"version\": \"6.3.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/semver/-/semver-6.3.1.tgz\",\r\n      \"integrity\": \"sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==\",\r\n      \"dev\": true,\r\n      \"bin\": {\r\n        \"semver\": \"bin/semver.js\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/generator\": {\r\n      \"version\": \"7.26.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/@babel/generator/-/generator-7.26.2.tgz\",\r\n      \"integrity\": \"sha512-zevQbhbau95nkoxSq3f/DC/SC+EEOUZd3DYqfSkMhY2/wfSeaHV1Ew4vk8e+x8lja31IbyuUa2uQ3JONqKbysw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/parser\": \"^7.26.2\",\r\n        \"@babel/types\": \"^7.26.0\",\r\n        \"@jridgewell/gen-mapping\": \"^0.3.5\",\r\n        \"@jridgewell/trace-mapping\": \"^0.3.25\",\r\n        \"jsesc\": \"^3.0.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=6.9.0\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/helper-compilation-targets\": {\r\n      \"version\": \"7.25.9\",\r\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.25.9.tgz\",\r\n      \"integrity\": \"sha512-j9Db8Suy6yV/VHa4qzrj9yZfZxhLWQdVnRlXxmKLYlhWUVB1sB2G5sxuWYXk/whHD9iW76PmNzxZ4UCnTQTVEQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/compat-data\": \"^7.25.9\",\r\n        \"@babel/helper-validator-option\": \"^7.25.9\",\r\n        \"browserslist\": \"^4.24.0\",\r\n        \"lru-cache\": \"^5.1.1\",\r\n        \"semver\": \"^6.3.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=6.9.0\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/helper-compilation-targets/node_modules/semver\": {\r\n      \"version\": \"6.3.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/semver/-/semver-6.3.1.tgz\",\r\n      \"integrity\": \"sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==\",\r\n      \"dev\": true,\r\n      \"bin\": {\r\n        \"semver\": \"bin/semver.js\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/helper-module-imports\": {\r\n      \"version\": \"7.25.9\",\r\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.25.9.tgz\",\r\n      \"integrity\": \"sha512-tnUA4RsrmflIM6W6RFTLFSXITtl0wKjgpnLgXyowocVPrbYrLUXSBXDgTs8BlbmIzIdlBySRQjINYs2BAkiLtw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/traverse\": \"^7.25.9\",\r\n        \"@babel/types\": \"^7.25.9\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=6.9.0\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/helper-module-transforms\": {\r\n      \"version\": \"7.26.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.26.0.tgz\",\r\n      \"integrity\": \"sha512-xO+xu6B5K2czEnQye6BHA7DolFFmS3LB7stHZFaOLb1pAwO1HWLS8fXA+eh0A2yIvltPVmx3eNNDBJA2SLHXFw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/helper-module-imports\": \"^7.25.9\",\r\n        \"@babel/helper-validator-identifier\": \"^7.25.9\",\r\n        \"@babel/traverse\": \"^7.25.9\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=6.9.0\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@babel/core\": \"^7.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/helper-plugin-utils\": {\r\n      \"version\": \"7.25.9\",\r\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.25.9.tgz\",\r\n      \"integrity\": \"sha512-kSMlyUVdWe25rEsRGviIgOWnoT/nfABVWlqt9N19/dIPWViAOW2s9wznP5tURbs/IDuNk4gPy3YdYRgH3uxhBw==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=6.9.0\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/helper-string-parser\": {\r\n      \"version\": \"7.25.9\",\r\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.25.9.tgz\",\r\n      \"integrity\": \"sha512-4A/SCr/2KLd5jrtOMFzaKjVtAei3+2r/NChoBNoZ3EyP/+GlhoaEGoWOZUmFmoITP7zOJyHIMm+DYRd8o3PvHA==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=6.9.0\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/helper-validator-identifier\": {\r\n      \"version\": \"7.25.9\",\r\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.25.9.tgz\",\r\n      \"integrity\": \"sha512-Ed61U6XJc3CVRfkERJWDz4dJwKe7iLmmJsbOGu9wSloNSFttHV0I8g6UAgb7qnK5ly5bGLPd4oXZlxCdANBOWQ==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=6.9.0\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/helper-validator-option\": {\r\n      \"version\": \"7.25.9\",\r\n      \"resolved\": \"https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.25.9.tgz\",\r\n      \"integrity\": \"sha512-e/zv1co8pp55dNdEcCynfj9X7nyUKUXoUEwfXqaZt0omVOmDe9oOTdKStH4GmAw6zxMFs50ZayuMfHDKlO7Tfw==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=6.9.0\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/helpers\": {\r\n      \"version\": \"7.26.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@babel/helpers/-/helpers-7.26.0.tgz\",\r\n      \"integrity\": \"sha512-tbhNuIxNcVb21pInl3ZSjksLCvgdZy9KwJ8brv993QtIVKJBBkYXz4q4ZbAv31GdnC+R90np23L5FbEBlthAEw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/template\": \"^7.25.9\",\r\n        \"@babel/types\": \"^7.26.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=6.9.0\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/parser\": {\r\n      \"version\": \"7.26.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/@babel/parser/-/parser-7.26.2.tgz\",\r\n      \"integrity\": \"sha512-DWMCZH9WA4Maitz2q21SRKHo9QXZxkDsbNZoVD62gusNtNBBqDg9i7uOhASfTfIGNzW+O+r7+jAlM8dwphcJKQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/types\": \"^7.26.0\"\r\n      },\r\n      \"bin\": {\r\n        \"parser\": \"bin/babel-parser.js\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=6.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/plugin-syntax-async-generators\": {\r\n      \"version\": \"7.8.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-syntax-async-generators/-/plugin-syntax-async-generators-7.8.4.tgz\",\r\n      \"integrity\": \"sha512-tycmZxkGfZaxhMRbXlPXuVFpdWlXpir2W4AMhSJgRKzk/eDlIXOhb2LHWoLpDF7TEHylV5zNhykX6KAgHJmTNw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/helper-plugin-utils\": \"^7.8.0\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@babel/core\": \"^7.0.0-0\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/plugin-syntax-bigint\": {\r\n      \"version\": \"7.8.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-syntax-bigint/-/plugin-syntax-bigint-7.8.3.tgz\",\r\n      \"integrity\": \"sha512-wnTnFlG+YxQm3vDxpGE57Pj0srRU4sHE/mDkt1qv2YJJSeUAec2ma4WLUnUPeKjyrfntVwe/N6dCXpU+zL3Npg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/helper-plugin-utils\": \"^7.8.0\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@babel/core\": \"^7.0.0-0\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/plugin-syntax-class-properties\": {\r\n      \"version\": \"7.12.13\",\r\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-syntax-class-properties/-/plugin-syntax-class-properties-7.12.13.tgz\",\r\n      \"integrity\": \"sha512-fm4idjKla0YahUNgFNLCB0qySdsoPiZP3iQE3rky0mBUtMZ23yDJ9SJdg6dXTSDnulOVqiF3Hgr9nbXvXTQZYA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/helper-plugin-utils\": \"^7.12.13\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@babel/core\": \"^7.0.0-0\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/plugin-syntax-class-static-block\": {\r\n      \"version\": \"7.14.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-syntax-class-static-block/-/plugin-syntax-class-static-block-7.14.5.tgz\",\r\n      \"integrity\": \"sha512-b+YyPmr6ldyNnM6sqYeMWE+bgJcJpO6yS4QD7ymxgH34GBPNDM/THBh8iunyvKIZztiwLH4CJZ0RxTk9emgpjw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/helper-plugin-utils\": \"^7.14.5\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=6.9.0\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@babel/core\": \"^7.0.0-0\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/plugin-syntax-import-attributes\": {\r\n      \"version\": \"7.26.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-syntax-import-attributes/-/plugin-syntax-import-attributes-7.26.0.tgz\",\r\n      \"integrity\": \"sha512-e2dttdsJ1ZTpi3B9UYGLw41hifAubg19AtCu/2I/F1QNVclOBr1dYpTdmdyZ84Xiz43BS/tCUkMAZNLv12Pi+A==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=6.9.0\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@babel/core\": \"^7.0.0-0\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/plugin-syntax-import-meta\": {\r\n      \"version\": \"7.10.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-syntax-import-meta/-/plugin-syntax-import-meta-7.10.4.tgz\",\r\n      \"integrity\": \"sha512-Yqfm+XDx0+Prh3VSeEQCPU81yC+JWZ2pDPFSS4ZdpfZhp4MkFMaDC1UqseovEKwSUpnIL7+vK+Clp7bfh0iD7g==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/helper-plugin-utils\": \"^7.10.4\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@babel/core\": \"^7.0.0-0\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/plugin-syntax-json-strings\": {\r\n      \"version\": \"7.8.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-syntax-json-strings/-/plugin-syntax-json-strings-7.8.3.tgz\",\r\n      \"integrity\": \"sha512-lY6kdGpWHvjoe2vk4WrAapEuBR69EMxZl+RoGRhrFGNYVK8mOPAW8VfbT/ZgrFbXlDNiiaxQnAtgVCZ6jv30EA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/helper-plugin-utils\": \"^7.8.0\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@babel/core\": \"^7.0.0-0\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/plugin-syntax-jsx\": {\r\n      \"version\": \"7.25.9\",\r\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.25.9.tgz\",\r\n      \"integrity\": \"sha512-ld6oezHQMZsZfp6pWtbjaNDF2tiiCYYDqQszHt5VV437lewP9aSi2Of99CK0D0XB21k7FLgnLcmQKyKzynfeAA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=6.9.0\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@babel/core\": \"^7.0.0-0\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/plugin-syntax-logical-assignment-operators\": {\r\n      \"version\": \"7.10.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-syntax-logical-assignment-operators/-/plugin-syntax-logical-assignment-operators-7.10.4.tgz\",\r\n      \"integrity\": \"sha512-d8waShlpFDinQ5MtvGU9xDAOzKH47+FFoney2baFIoMr952hKOLp1HR7VszoZvOsV/4+RRszNY7D17ba0te0ig==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/helper-plugin-utils\": \"^7.10.4\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@babel/core\": \"^7.0.0-0\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/plugin-syntax-nullish-coalescing-operator\": {\r\n      \"version\": \"7.8.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-syntax-nullish-coalescing-operator/-/plugin-syntax-nullish-coalescing-operator-7.8.3.tgz\",\r\n      \"integrity\": \"sha512-aSff4zPII1u2QD7y+F8oDsz19ew4IGEJg9SVW+bqwpwtfFleiQDMdzA/R+UlWDzfnHFCxxleFT0PMIrR36XLNQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/helper-plugin-utils\": \"^7.8.0\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@babel/core\": \"^7.0.0-0\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/plugin-syntax-numeric-separator\": {\r\n      \"version\": \"7.10.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-syntax-numeric-separator/-/plugin-syntax-numeric-separator-7.10.4.tgz\",\r\n      \"integrity\": \"sha512-9H6YdfkcK/uOnY/K7/aA2xpzaAgkQn37yzWUMRK7OaPOqOpGS1+n0H5hxT9AUw9EsSjPW8SVyMJwYRtWs3X3ug==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/helper-plugin-utils\": \"^7.10.4\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@babel/core\": \"^7.0.0-0\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/plugin-syntax-object-rest-spread\": {\r\n      \"version\": \"7.8.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-syntax-object-rest-spread/-/plugin-syntax-object-rest-spread-7.8.3.tgz\",\r\n      \"integrity\": \"sha512-XoqMijGZb9y3y2XskN+P1wUGiVwWZ5JmoDRwx5+3GmEplNyVM2s2Dg8ILFQm8rWM48orGy5YpI5Bl8U1y7ydlA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/helper-plugin-utils\": \"^7.8.0\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@babel/core\": \"^7.0.0-0\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/plugin-syntax-optional-catch-binding\": {\r\n      \"version\": \"7.8.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-syntax-optional-catch-binding/-/plugin-syntax-optional-catch-binding-7.8.3.tgz\",\r\n      \"integrity\": \"sha512-6VPD0Pc1lpTqw0aKoeRTMiB+kWhAoT24PA+ksWSBrFtl5SIRVpZlwN3NNPQjehA2E/91FV3RjLWoVTglWcSV3Q==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/helper-plugin-utils\": \"^7.8.0\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@babel/core\": \"^7.0.0-0\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/plugin-syntax-optional-chaining\": {\r\n      \"version\": \"7.8.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-syntax-optional-chaining/-/plugin-syntax-optional-chaining-7.8.3.tgz\",\r\n      \"integrity\": \"sha512-KoK9ErH1MBlCPxV0VANkXW2/dw4vlbGDrFgz8bmUsBGYkFRcbRwMh6cIJubdPrkxRwuGdtCk0v/wPTKbQgBjkg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/helper-plugin-utils\": \"^7.8.0\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@babel/core\": \"^7.0.0-0\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/plugin-syntax-private-property-in-object\": {\r\n      \"version\": \"7.14.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-syntax-private-property-in-object/-/plugin-syntax-private-property-in-object-7.14.5.tgz\",\r\n      \"integrity\": \"sha512-0wVnp9dxJ72ZUJDV27ZfbSj6iHLoytYZmh3rFcxNnvsJF3ktkzLDZPy/mA17HGsaQT3/DQsWYX1f1QGWkCoVUg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/helper-plugin-utils\": \"^7.14.5\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=6.9.0\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@babel/core\": \"^7.0.0-0\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/plugin-syntax-top-level-await\": {\r\n      \"version\": \"7.14.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-syntax-top-level-await/-/plugin-syntax-top-level-await-7.14.5.tgz\",\r\n      \"integrity\": \"sha512-hx++upLv5U1rgYfwe1xBQUhRmU41NEvpUvrp8jkrSCdvGSnM5/qdRMtylJ6PG5OFkBaHkbTAKTnd3/YyESRHFw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/helper-plugin-utils\": \"^7.14.5\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=6.9.0\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@babel/core\": \"^7.0.0-0\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/plugin-syntax-typescript\": {\r\n      \"version\": \"7.25.9\",\r\n      \"resolved\": \"https://registry.npmjs.org/@babel/plugin-syntax-typescript/-/plugin-syntax-typescript-7.25.9.tgz\",\r\n      \"integrity\": \"sha512-hjMgRy5hb8uJJjUcdWunWVcoi9bGpJp8p5Ol1229PoN6aytsLwNMgmdftO23wnCLMfVmTwZDWMPNq/D1SY60JQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/helper-plugin-utils\": \"^7.25.9\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=6.9.0\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@babel/core\": \"^7.0.0-0\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/template\": {\r\n      \"version\": \"7.25.9\",\r\n      \"resolved\": \"https://registry.npmjs.org/@babel/template/-/template-7.25.9.tgz\",\r\n      \"integrity\": \"sha512-9DGttpmPvIxBb/2uwpVo3dqJ+O6RooAFOS+lB+xDqoE2PVCE8nfoHMdZLpfCQRLwvohzXISPZcgxt80xLfsuwg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/code-frame\": \"^7.25.9\",\r\n        \"@babel/parser\": \"^7.25.9\",\r\n        \"@babel/types\": \"^7.25.9\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=6.9.0\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/traverse\": {\r\n      \"version\": \"7.25.9\",\r\n      \"resolved\": \"https://registry.npmjs.org/@babel/traverse/-/traverse-7.25.9.tgz\",\r\n      \"integrity\": \"sha512-ZCuvfwOwlz/bawvAuvcj8rrithP2/N55Tzz342AkTvq4qaWbGfmCk/tKhNaV2cthijKrPAA8SRJV5WWe7IBMJw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/code-frame\": \"^7.25.9\",\r\n        \"@babel/generator\": \"^7.25.9\",\r\n        \"@babel/parser\": \"^7.25.9\",\r\n        \"@babel/template\": \"^7.25.9\",\r\n        \"@babel/types\": \"^7.25.9\",\r\n        \"debug\": \"^4.3.1\",\r\n        \"globals\": \"^11.1.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=6.9.0\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/traverse/node_modules/globals\": {\r\n      \"version\": \"11.12.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/globals/-/globals-11.12.0.tgz\",\r\n      \"integrity\": \"sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=4\"\r\n      }\r\n    },\r\n    \"node_modules/@babel/types\": {\r\n      \"version\": \"7.26.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@babel/types/-/types-7.26.0.tgz\",\r\n      \"integrity\": \"sha512-Z/yiTPj+lDVnF7lWeKCIJzaIkI0vYO87dMpZ4bg4TDrFe4XXLFWL1TbXU27gBP3QccxV9mZICCrnjnYlJjXHOA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/helper-string-parser\": \"^7.25.9\",\r\n        \"@babel/helper-validator-identifier\": \"^7.25.9\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=6.9.0\"\r\n      }\r\n    },\r\n    \"node_modules/@bcoe/v8-coverage\": {\r\n      \"version\": \"0.2.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@bcoe/v8-coverage/-/v8-coverage-0.2.3.tgz\",\r\n      \"integrity\": \"sha512-0hYQ8SB4Db5zvZB4axdMHGwEaQjkZzFjQiN9LVYvIFB2nSUHW9tYpxWriPrWDASIxiaXax83REcLxuSdnGPZtw==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/@colors/colors\": {\r\n      \"version\": \"1.5.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@colors/colors/-/colors-1.5.0.tgz\",\r\n      \"integrity\": \"sha512-ooWCrlZP11i8GImSjTHYHLkvFDP48nS4+204nGb1RiX/WXYHmJA2III9/e2DWVabCESdW7hBAEzHRqUn9OUVvQ==\",\r\n      \"dev\": true,\r\n      \"optional\": true,\r\n      \"engines\": {\r\n        \"node\": \">=0.1.90\"\r\n      }\r\n    },\r\n    \"node_modules/@cspotcode/source-map-support\": {\r\n      \"version\": \"0.8.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/@cspotcode/source-map-support/-/source-map-support-0.8.1.tgz\",\r\n      \"integrity\": \"sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==\",\r\n      \"devOptional\": true,\r\n      \"dependencies\": {\r\n        \"@jridgewell/trace-mapping\": \"0.3.9\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=12\"\r\n      }\r\n    },\r\n    \"node_modules/@cspotcode/source-map-support/node_modules/@jridgewell/trace-mapping\": {\r\n      \"version\": \"0.3.9\",\r\n      \"resolved\": \"https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.9.tgz\",\r\n      \"integrity\": \"sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==\",\r\n      \"devOptional\": true,\r\n      \"dependencies\": {\r\n        \"@jridgewell/resolve-uri\": \"^3.0.3\",\r\n        \"@jridgewell/sourcemap-codec\": \"^1.4.10\"\r\n      }\r\n    },\r\n    \"node_modules/@eslint-community/eslint-utils\": {\r\n      \"version\": \"4.4.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.4.1.tgz\",\r\n      \"integrity\": \"sha512-s3O3waFUrMV8P/XaF/+ZTp1X9XBZW1a4B97ZnjQF2KYWaFD2A8KyFBsrsfSjEmjn3RGWAIuvlneuZm3CUK3jbA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"eslint-visitor-keys\": \"^3.4.3\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^12.22.0 || ^14.17.0 || >=16.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/eslint\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"eslint\": \"^6.0.0 || ^7.0.0 || >=8.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/@eslint-community/regexpp\": {\r\n      \"version\": \"4.12.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz\",\r\n      \"integrity\": \"sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \"^12.0.0 || ^14.0.0 || >=16.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/@eslint/eslintrc\": {\r\n      \"version\": \"2.1.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-2.1.4.tgz\",\r\n      \"integrity\": \"sha512-269Z39MS6wVJtsoUl10L60WdkhJVdPG24Q4eZTH3nnF6lpvSShEK3wQjDX9JRWAUPvPh7COouPpU9IrqaZFvtQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"ajv\": \"^6.12.4\",\r\n        \"debug\": \"^4.3.2\",\r\n        \"espree\": \"^9.6.0\",\r\n        \"globals\": \"^13.19.0\",\r\n        \"ignore\": \"^5.2.0\",\r\n        \"import-fresh\": \"^3.2.1\",\r\n        \"js-yaml\": \"^4.1.0\",\r\n        \"minimatch\": \"^3.1.2\",\r\n        \"strip-json-comments\": \"^3.1.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^12.22.0 || ^14.17.0 || >=16.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/eslint\"\r\n      }\r\n    },\r\n    \"node_modules/@eslint/eslintrc/node_modules/ajv\": {\r\n      \"version\": \"6.12.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz\",\r\n      \"integrity\": \"sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"fast-deep-equal\": \"^3.1.1\",\r\n        \"fast-json-stable-stringify\": \"^2.0.0\",\r\n        \"json-schema-traverse\": \"^0.4.1\",\r\n        \"uri-js\": \"^4.2.2\"\r\n      },\r\n      \"funding\": {\r\n        \"type\": \"github\",\r\n        \"url\": \"https://github.com/sponsors/epoberezkin\"\r\n      }\r\n    },\r\n    \"node_modules/@eslint/eslintrc/node_modules/brace-expansion\": {\r\n      \"version\": \"1.1.11\",\r\n      \"resolved\": \"https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz\",\r\n      \"integrity\": \"sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"balanced-match\": \"^1.0.0\",\r\n        \"concat-map\": \"0.0.1\"\r\n      }\r\n    },\r\n    \"node_modules/@eslint/eslintrc/node_modules/json-schema-traverse\": {\r\n      \"version\": \"0.4.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz\",\r\n      \"integrity\": \"sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/@eslint/eslintrc/node_modules/minimatch\": {\r\n      \"version\": \"3.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz\",\r\n      \"integrity\": \"sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"brace-expansion\": \"^1.1.7\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"*\"\r\n      }\r\n    },\r\n    \"node_modules/@eslint/js\": {\r\n      \"version\": \"8.57.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/@eslint/js/-/js-8.57.1.tgz\",\r\n      \"integrity\": \"sha512-d9zaMRSTIKDLhctzH12MtXvJKSSUhaHcjV+2Z+GK+EEY7XKpP5yR4x+N3TAcHTcu963nIr+TMcCb4DBCYX1z6Q==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \"^12.22.0 || ^14.17.0 || >=16.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/@humanwhocodes/config-array\": {\r\n      \"version\": \"0.13.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@humanwhocodes/config-array/-/config-array-0.13.0.tgz\",\r\n      \"integrity\": \"sha512-DZLEEqFWQFiyK6h5YIeynKx7JlvCYWL0cImfSRXZ9l4Sg2efkFGTuFf6vzXjK1cq6IYkU+Eg/JizXw+TD2vRNw==\",\r\n      \"deprecated\": \"Use @eslint/config-array instead\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@humanwhocodes/object-schema\": \"^2.0.3\",\r\n        \"debug\": \"^4.3.1\",\r\n        \"minimatch\": \"^3.0.5\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/@humanwhocodes/config-array/node_modules/brace-expansion\": {\r\n      \"version\": \"1.1.11\",\r\n      \"resolved\": \"https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz\",\r\n      \"integrity\": \"sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"balanced-match\": \"^1.0.0\",\r\n        \"concat-map\": \"0.0.1\"\r\n      }\r\n    },\r\n    \"node_modules/@humanwhocodes/config-array/node_modules/minimatch\": {\r\n      \"version\": \"3.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz\",\r\n      \"integrity\": \"sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"brace-expansion\": \"^1.1.7\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"*\"\r\n      }\r\n    },\r\n    \"node_modules/@humanwhocodes/module-importer\": {\r\n      \"version\": \"1.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz\",\r\n      \"integrity\": \"sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=12.22\"\r\n      },\r\n      \"funding\": {\r\n        \"type\": \"github\",\r\n        \"url\": \"https://github.com/sponsors/nzakas\"\r\n      }\r\n    },\r\n    \"node_modules/@humanwhocodes/object-schema\": {\r\n      \"version\": \"2.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@humanwhocodes/object-schema/-/object-schema-2.0.3.tgz\",\r\n      \"integrity\": \"sha512-93zYdMES/c1D69yZiKDBj0V24vqNzB/koF26KPaagAfd3P/4gUlh3Dys5ogAK+Exi9QyzlD8x/08Zt7wIKcDcA==\",\r\n      \"deprecated\": \"Use @eslint/object-schema instead\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/@isaacs/cliui\": {\r\n      \"version\": \"8.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/@isaacs/cliui/-/cliui-8.0.2.tgz\",\r\n      \"integrity\": \"sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==\",\r\n      \"dependencies\": {\r\n        \"string-width\": \"^5.1.2\",\r\n        \"string-width-cjs\": \"npm:string-width@^4.2.0\",\r\n        \"strip-ansi\": \"^7.0.1\",\r\n        \"strip-ansi-cjs\": \"npm:strip-ansi@^6.0.1\",\r\n        \"wrap-ansi\": \"^8.1.0\",\r\n        \"wrap-ansi-cjs\": \"npm:wrap-ansi@^7.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=12\"\r\n      }\r\n    },\r\n    \"node_modules/@isaacs/cliui/node_modules/ansi-regex\": {\r\n      \"version\": \"6.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.1.0.tgz\",\r\n      \"integrity\": \"sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==\",\r\n      \"engines\": {\r\n        \"node\": \">=12\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/chalk/ansi-regex?sponsor=1\"\r\n      }\r\n    },\r\n    \"node_modules/@isaacs/cliui/node_modules/ansi-styles\": {\r\n      \"version\": \"6.2.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz\",\r\n      \"integrity\": \"sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==\",\r\n      \"engines\": {\r\n        \"node\": \">=12\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/chalk/ansi-styles?sponsor=1\"\r\n      }\r\n    },\r\n    \"node_modules/@isaacs/cliui/node_modules/emoji-regex\": {\r\n      \"version\": \"9.2.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz\",\r\n      \"integrity\": \"sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==\"\r\n    },\r\n    \"node_modules/@isaacs/cliui/node_modules/string-width\": {\r\n      \"version\": \"5.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz\",\r\n      \"integrity\": \"sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==\",\r\n      \"dependencies\": {\r\n        \"eastasianwidth\": \"^0.2.0\",\r\n        \"emoji-regex\": \"^9.2.2\",\r\n        \"strip-ansi\": \"^7.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=12\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/@isaacs/cliui/node_modules/strip-ansi\": {\r\n      \"version\": \"7.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz\",\r\n      \"integrity\": \"sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==\",\r\n      \"dependencies\": {\r\n        \"ansi-regex\": \"^6.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=12\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/chalk/strip-ansi?sponsor=1\"\r\n      }\r\n    },\r\n    \"node_modules/@isaacs/cliui/node_modules/wrap-ansi\": {\r\n      \"version\": \"8.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-8.1.0.tgz\",\r\n      \"integrity\": \"sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==\",\r\n      \"dependencies\": {\r\n        \"ansi-styles\": \"^6.1.0\",\r\n        \"string-width\": \"^5.0.1\",\r\n        \"strip-ansi\": \"^7.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=12\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/chalk/wrap-ansi?sponsor=1\"\r\n      }\r\n    },\r\n    \"node_modules/@istanbuljs/load-nyc-config\": {\r\n      \"version\": \"1.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@istanbuljs/load-nyc-config/-/load-nyc-config-1.1.0.tgz\",\r\n      \"integrity\": \"sha512-VjeHSlIzpv/NyD3N0YuHfXOPDIixcA1q2ZV98wsMqcYlPmv2n3Yb2lYP9XMElnaFVXg5A7YLTeLu6V84uQDjmQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"camelcase\": \"^5.3.1\",\r\n        \"find-up\": \"^4.1.0\",\r\n        \"get-package-type\": \"^0.1.0\",\r\n        \"js-yaml\": \"^3.13.1\",\r\n        \"resolve-from\": \"^5.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/@istanbuljs/load-nyc-config/node_modules/argparse\": {\r\n      \"version\": \"1.0.10\",\r\n      \"resolved\": \"https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz\",\r\n      \"integrity\": \"sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"sprintf-js\": \"~1.0.2\"\r\n      }\r\n    },\r\n    \"node_modules/@istanbuljs/load-nyc-config/node_modules/find-up\": {\r\n      \"version\": \"4.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz\",\r\n      \"integrity\": \"sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"locate-path\": \"^5.0.0\",\r\n        \"path-exists\": \"^4.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/@istanbuljs/load-nyc-config/node_modules/js-yaml\": {\r\n      \"version\": \"3.14.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz\",\r\n      \"integrity\": \"sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"argparse\": \"^1.0.7\",\r\n        \"esprima\": \"^4.0.0\"\r\n      },\r\n      \"bin\": {\r\n        \"js-yaml\": \"bin/js-yaml.js\"\r\n      }\r\n    },\r\n    \"node_modules/@istanbuljs/load-nyc-config/node_modules/locate-path\": {\r\n      \"version\": \"5.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz\",\r\n      \"integrity\": \"sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"p-locate\": \"^4.1.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/@istanbuljs/load-nyc-config/node_modules/p-limit\": {\r\n      \"version\": \"2.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz\",\r\n      \"integrity\": \"sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"p-try\": \"^2.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=6\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/@istanbuljs/load-nyc-config/node_modules/p-locate\": {\r\n      \"version\": \"4.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz\",\r\n      \"integrity\": \"sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"p-limit\": \"^2.2.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/@istanbuljs/load-nyc-config/node_modules/resolve-from\": {\r\n      \"version\": \"5.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz\",\r\n      \"integrity\": \"sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/@istanbuljs/schema\": {\r\n      \"version\": \"0.1.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@istanbuljs/schema/-/schema-0.1.3.tgz\",\r\n      \"integrity\": \"sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/@jest/console\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@jest/console/-/console-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-5Ni4CU7XHQi32IJ398EEP4RrB8eV09sXP2ROqD4bksHrnTree52PsxvX8tpL8LvTZ3pFzXyPbNQReSN41CAhOg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@jest/types\": \"^29.6.3\",\r\n        \"@types/node\": \"*\",\r\n        \"chalk\": \"^4.0.0\",\r\n        \"jest-message-util\": \"^29.7.0\",\r\n        \"jest-util\": \"^29.7.0\",\r\n        \"slash\": \"^3.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/@jest/core\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@jest/core/-/core-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-n7aeXWKMnGtDA48y8TLWJPJmLmmZ642Ceo78cYWEpiD7FzDgmNDV/GCVRorPABdXLJZ/9wzzgZAlHjXjxDHGsg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@jest/console\": \"^29.7.0\",\r\n        \"@jest/reporters\": \"^29.7.0\",\r\n        \"@jest/test-result\": \"^29.7.0\",\r\n        \"@jest/transform\": \"^29.7.0\",\r\n        \"@jest/types\": \"^29.6.3\",\r\n        \"@types/node\": \"*\",\r\n        \"ansi-escapes\": \"^4.2.1\",\r\n        \"chalk\": \"^4.0.0\",\r\n        \"ci-info\": \"^3.2.0\",\r\n        \"exit\": \"^0.1.2\",\r\n        \"graceful-fs\": \"^4.2.9\",\r\n        \"jest-changed-files\": \"^29.7.0\",\r\n        \"jest-config\": \"^29.7.0\",\r\n        \"jest-haste-map\": \"^29.7.0\",\r\n        \"jest-message-util\": \"^29.7.0\",\r\n        \"jest-regex-util\": \"^29.6.3\",\r\n        \"jest-resolve\": \"^29.7.0\",\r\n        \"jest-resolve-dependencies\": \"^29.7.0\",\r\n        \"jest-runner\": \"^29.7.0\",\r\n        \"jest-runtime\": \"^29.7.0\",\r\n        \"jest-snapshot\": \"^29.7.0\",\r\n        \"jest-util\": \"^29.7.0\",\r\n        \"jest-validate\": \"^29.7.0\",\r\n        \"jest-watcher\": \"^29.7.0\",\r\n        \"micromatch\": \"^4.0.4\",\r\n        \"pretty-format\": \"^29.7.0\",\r\n        \"slash\": \"^3.0.0\",\r\n        \"strip-ansi\": \"^6.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"node-notifier\": \"^8.0.1 || ^9.0.0 || ^10.0.0\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"node-notifier\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"node_modules/@jest/environment\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@jest/environment/-/environment-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-aQIfHDq33ExsN4jP1NWGXhxgQ/wixs60gDiKO+XVMd8Mn0NWPWgc34ZQDTb2jKaUWQ7MuwoitXAsN2XVXNMpAw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@jest/fake-timers\": \"^29.7.0\",\r\n        \"@jest/types\": \"^29.6.3\",\r\n        \"@types/node\": \"*\",\r\n        \"jest-mock\": \"^29.7.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/@jest/expect\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@jest/expect/-/expect-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-8uMeAMycttpva3P1lBHB8VciS9V0XAr3GymPpipdyQXbBcuhkLQOSe8E/p92RyAdToS6ZD1tFkX+CkhoECE0dQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"expect\": \"^29.7.0\",\r\n        \"jest-snapshot\": \"^29.7.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/@jest/expect-utils\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@jest/expect-utils/-/expect-utils-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-GlsNBWiFQFCVi9QVSx7f5AgMeLxe9YCCs5PuP2O2LdjDAA8Jh9eX7lA1Jq/xdXw3Wb3hyvlFNfZIfcRetSzYcA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"jest-get-type\": \"^29.6.3\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/@jest/fake-timers\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@jest/fake-timers/-/fake-timers-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-q4DH1Ha4TTFPdxLsqDXK1d3+ioSL7yL5oCMJZgDYm6i+6CygW5E5xVr/D1HdsGxjt1ZWSfUAs9OxSB/BNelWrQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@jest/types\": \"^29.6.3\",\r\n        \"@sinonjs/fake-timers\": \"^10.0.2\",\r\n        \"@types/node\": \"*\",\r\n        \"jest-message-util\": \"^29.7.0\",\r\n        \"jest-mock\": \"^29.7.0\",\r\n        \"jest-util\": \"^29.7.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/@jest/globals\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@jest/globals/-/globals-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-mpiz3dutLbkW2MNFubUGUEVLkTGiqW6yLVTA+JbP6fI6J5iL9Y0Nlg8k95pcF8ctKwCS7WVxteBs29hhfAotzQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@jest/environment\": \"^29.7.0\",\r\n        \"@jest/expect\": \"^29.7.0\",\r\n        \"@jest/types\": \"^29.6.3\",\r\n        \"jest-mock\": \"^29.7.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/@jest/reporters\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@jest/reporters/-/reporters-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-DApq0KJbJOEzAFYjHADNNxAE3KbhxQB1y5Kplb5Waqw6zVbuWatSnMjE5gs8FUgEPmNsnZA3NCWl9NG0ia04Pg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@bcoe/v8-coverage\": \"^0.2.3\",\r\n        \"@jest/console\": \"^29.7.0\",\r\n        \"@jest/test-result\": \"^29.7.0\",\r\n        \"@jest/transform\": \"^29.7.0\",\r\n        \"@jest/types\": \"^29.6.3\",\r\n        \"@jridgewell/trace-mapping\": \"^0.3.18\",\r\n        \"@types/node\": \"*\",\r\n        \"chalk\": \"^4.0.0\",\r\n        \"collect-v8-coverage\": \"^1.0.0\",\r\n        \"exit\": \"^0.1.2\",\r\n        \"glob\": \"^7.1.3\",\r\n        \"graceful-fs\": \"^4.2.9\",\r\n        \"istanbul-lib-coverage\": \"^3.0.0\",\r\n        \"istanbul-lib-instrument\": \"^6.0.0\",\r\n        \"istanbul-lib-report\": \"^3.0.0\",\r\n        \"istanbul-lib-source-maps\": \"^4.0.0\",\r\n        \"istanbul-reports\": \"^3.1.3\",\r\n        \"jest-message-util\": \"^29.7.0\",\r\n        \"jest-util\": \"^29.7.0\",\r\n        \"jest-worker\": \"^29.7.0\",\r\n        \"slash\": \"^3.0.0\",\r\n        \"string-length\": \"^4.0.1\",\r\n        \"strip-ansi\": \"^6.0.0\",\r\n        \"v8-to-istanbul\": \"^9.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"node-notifier\": \"^8.0.1 || ^9.0.0 || ^10.0.0\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"node-notifier\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"node_modules/@jest/reporters/node_modules/brace-expansion\": {\r\n      \"version\": \"1.1.11\",\r\n      \"resolved\": \"https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz\",\r\n      \"integrity\": \"sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"balanced-match\": \"^1.0.0\",\r\n        \"concat-map\": \"0.0.1\"\r\n      }\r\n    },\r\n    \"node_modules/@jest/reporters/node_modules/glob\": {\r\n      \"version\": \"7.2.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/glob/-/glob-7.2.3.tgz\",\r\n      \"integrity\": \"sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==\",\r\n      \"deprecated\": \"Glob versions prior to v9 are no longer supported\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"fs.realpath\": \"^1.0.0\",\r\n        \"inflight\": \"^1.0.4\",\r\n        \"inherits\": \"2\",\r\n        \"minimatch\": \"^3.1.1\",\r\n        \"once\": \"^1.3.0\",\r\n        \"path-is-absolute\": \"^1.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"*\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/isaacs\"\r\n      }\r\n    },\r\n    \"node_modules/@jest/reporters/node_modules/minimatch\": {\r\n      \"version\": \"3.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz\",\r\n      \"integrity\": \"sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"brace-expansion\": \"^1.1.7\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"*\"\r\n      }\r\n    },\r\n    \"node_modules/@jest/schemas\": {\r\n      \"version\": \"29.6.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@jest/schemas/-/schemas-29.6.3.tgz\",\r\n      \"integrity\": \"sha512-mo5j5X+jIZmJQveBKeS/clAueipV7KgiX1vMgCxam1RNYiqE1w62n0/tJJnHtjW8ZHcQco5gY85jA3mi0L+nSA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@sinclair/typebox\": \"^0.27.8\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/@jest/source-map\": {\r\n      \"version\": \"29.6.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@jest/source-map/-/source-map-29.6.3.tgz\",\r\n      \"integrity\": \"sha512-MHjT95QuipcPrpLM+8JMSzFx6eHp5Bm+4XeFDJlwsvVBjmKNiIAvasGK2fxz2WbGRlnvqehFbh07MMa7n3YJnw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@jridgewell/trace-mapping\": \"^0.3.18\",\r\n        \"callsites\": \"^3.0.0\",\r\n        \"graceful-fs\": \"^4.2.9\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/@jest/test-result\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@jest/test-result/-/test-result-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-Fdx+tv6x1zlkJPcWXmMDAG2HBnaR9XPSd5aDWQVsfrZmLVT3lU1cwyxLgRmXR9yrq4NBoEm9BMsfgFzTQAbJYA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@jest/console\": \"^29.7.0\",\r\n        \"@jest/types\": \"^29.6.3\",\r\n        \"@types/istanbul-lib-coverage\": \"^2.0.0\",\r\n        \"collect-v8-coverage\": \"^1.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/@jest/test-sequencer\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@jest/test-sequencer/-/test-sequencer-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-GQwJ5WZVrKnOJuiYiAF52UNUJXgTZx1NHjFSEB0qEMmSZKAkdMoIzw/Cj6x6NF4AvV23AUqDpFzQkN/eYCYTxw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@jest/test-result\": \"^29.7.0\",\r\n        \"graceful-fs\": \"^4.2.9\",\r\n        \"jest-haste-map\": \"^29.7.0\",\r\n        \"slash\": \"^3.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/@jest/transform\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@jest/transform/-/transform-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-ok/BTPFzFKVMwO5eOHRrvnBVHdRy9IrsrW1GpMaQ9MCnilNLXQKmAX8s1YXDFaai9xJpac2ySzV0YeRRECr2Vw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/core\": \"^7.11.6\",\r\n        \"@jest/types\": \"^29.6.3\",\r\n        \"@jridgewell/trace-mapping\": \"^0.3.18\",\r\n        \"babel-plugin-istanbul\": \"^6.1.1\",\r\n        \"chalk\": \"^4.0.0\",\r\n        \"convert-source-map\": \"^2.0.0\",\r\n        \"fast-json-stable-stringify\": \"^2.1.0\",\r\n        \"graceful-fs\": \"^4.2.9\",\r\n        \"jest-haste-map\": \"^29.7.0\",\r\n        \"jest-regex-util\": \"^29.6.3\",\r\n        \"jest-util\": \"^29.7.0\",\r\n        \"micromatch\": \"^4.0.4\",\r\n        \"pirates\": \"^4.0.4\",\r\n        \"slash\": \"^3.0.0\",\r\n        \"write-file-atomic\": \"^4.0.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/@jest/types\": {\r\n      \"version\": \"29.6.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@jest/types/-/types-29.6.3.tgz\",\r\n      \"integrity\": \"sha512-u3UPsIilWKOM3F9CXtrG8LEJmNxwoCQC/XVj4IKYXvvpx7QIi/Kg1LI5uDmDpKlac62NUtX7eLjRh+jVZcLOzw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@jest/schemas\": \"^29.6.3\",\r\n        \"@types/istanbul-lib-coverage\": \"^2.0.0\",\r\n        \"@types/istanbul-reports\": \"^3.0.0\",\r\n        \"@types/node\": \"*\",\r\n        \"@types/yargs\": \"^17.0.8\",\r\n        \"chalk\": \"^4.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/@jridgewell/gen-mapping\": {\r\n      \"version\": \"0.3.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.5.tgz\",\r\n      \"integrity\": \"sha512-IzL8ZoEDIBRWEzlCcRhOaCupYyN5gdIK+Q6fbFdPDg6HqX6jpkItn7DFIpW9LQzXG6Df9sA7+OKnq0qlz/GaQg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@jridgewell/set-array\": \"^1.2.1\",\r\n        \"@jridgewell/sourcemap-codec\": \"^1.4.10\",\r\n        \"@jridgewell/trace-mapping\": \"^0.3.24\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=6.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/@jridgewell/resolve-uri\": {\r\n      \"version\": \"3.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz\",\r\n      \"integrity\": \"sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==\",\r\n      \"devOptional\": true,\r\n      \"engines\": {\r\n        \"node\": \">=6.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/@jridgewell/set-array\": {\r\n      \"version\": \"1.2.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.2.1.tgz\",\r\n      \"integrity\": \"sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=6.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/@jridgewell/source-map\": {\r\n      \"version\": \"0.3.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/@jridgewell/source-map/-/source-map-0.3.6.tgz\",\r\n      \"integrity\": \"sha512-1ZJTZebgqllO79ue2bm3rIGud/bOe0pP5BjSRCRxxYkEZS8STV7zN84UBbiYu7jy+eCKSnVIUgoWWE/tt+shMQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@jridgewell/gen-mapping\": \"^0.3.5\",\r\n        \"@jridgewell/trace-mapping\": \"^0.3.25\"\r\n      }\r\n    },\r\n    \"node_modules/@jridgewell/sourcemap-codec\": {\r\n      \"version\": \"1.5.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz\",\r\n      \"integrity\": \"sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==\",\r\n      \"devOptional\": true\r\n    },\r\n    \"node_modules/@jridgewell/trace-mapping\": {\r\n      \"version\": \"0.3.25\",\r\n      \"resolved\": \"https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz\",\r\n      \"integrity\": \"sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@jridgewell/resolve-uri\": \"^3.1.0\",\r\n        \"@jridgewell/sourcemap-codec\": \"^1.4.14\"\r\n      }\r\n    },\r\n    \"node_modules/@ljharb/through\": {\r\n      \"version\": \"2.3.13\",\r\n      \"resolved\": \"https://registry.npmjs.org/@ljharb/through/-/through-2.3.13.tgz\",\r\n      \"integrity\": \"sha512-/gKJun8NNiWGZJkGzI/Ragc53cOdcLNdzjLaIa+GEjguQs0ulsurx8WN0jijdK9yPqDvziX995sMRLyLt1uZMQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"call-bind\": \"^1.0.7\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.4\"\r\n      }\r\n    },\r\n    \"node_modules/@lukeed/csprng\": {\r\n      \"version\": \"1.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@lukeed/csprng/-/csprng-1.1.0.tgz\",\r\n      \"integrity\": \"sha512-Z7C/xXCiGWsg0KuKsHTKJxbWhpI3Vs5GwLfOean7MGyVFGqdRgBbAjOCh6u4bbjPc/8MJ2pZmK/0DLdCbivLDA==\",\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/@mapbox/node-pre-gyp\": {\r\n      \"version\": \"1.0.11\",\r\n      \"resolved\": \"https://registry.npmjs.org/@mapbox/node-pre-gyp/-/node-pre-gyp-1.0.11.tgz\",\r\n      \"integrity\": \"sha512-Yhlar6v9WQgUp/He7BdgzOz8lqMQ8sU+jkCq7Wx8Myc5YFJLbEe7lgui/V7G1qB1DJykHSGwreceSaD60Y0PUQ==\",\r\n      \"dependencies\": {\r\n        \"detect-libc\": \"^2.0.0\",\r\n        \"https-proxy-agent\": \"^5.0.0\",\r\n        \"make-dir\": \"^3.1.0\",\r\n        \"node-fetch\": \"^2.6.7\",\r\n        \"nopt\": \"^5.0.0\",\r\n        \"npmlog\": \"^5.0.1\",\r\n        \"rimraf\": \"^3.0.2\",\r\n        \"semver\": \"^7.3.5\",\r\n        \"tar\": \"^6.1.11\"\r\n      },\r\n      \"bin\": {\r\n        \"node-pre-gyp\": \"bin/node-pre-gyp\"\r\n      }\r\n    },\r\n    \"node_modules/@microsoft/tsdoc\": {\r\n      \"version\": \"0.15.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@microsoft/tsdoc/-/tsdoc-0.15.0.tgz\",\r\n      \"integrity\": \"sha512-HZpPoABogPvjeJOdzCOSJsXeL/SMCBgBZMVC3X3d7YYp2gf31MfxhUoYUNwf1ERPJOnQc0wkFn9trqI6ZEdZuA==\"\r\n    },\r\n    \"node_modules/@nestjs/axios\": {\r\n      \"version\": \"3.1.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@nestjs/axios/-/axios-3.1.3.tgz\",\r\n      \"integrity\": \"sha512-RZ/63c1tMxGLqyG3iOCVt7A72oy4x1eM6QEhd4KzCYpaVWW0igq0WSREeRoEZhIxRcZfDfIIkvsOMiM7yfVGZQ==\",\r\n      \"peerDependencies\": {\r\n        \"@nestjs/common\": \"^7.0.0 || ^8.0.0 || ^9.0.0 || ^10.0.0\",\r\n        \"axios\": \"^1.3.1\",\r\n        \"rxjs\": \"^6.0.0 || ^7.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/@nestjs/cli\": {\r\n      \"version\": \"10.4.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/@nestjs/cli/-/cli-10.4.5.tgz\",\r\n      \"integrity\": \"sha512-FP7Rh13u8aJbHe+zZ7hM0CC4785g9Pw4lz4r2TTgRtf0zTxSWMkJaPEwyjX8SK9oWK2GsYxl+fKpwVZNbmnj9A==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@angular-devkit/core\": \"17.3.8\",\r\n        \"@angular-devkit/schematics\": \"17.3.8\",\r\n        \"@angular-devkit/schematics-cli\": \"17.3.8\",\r\n        \"@nestjs/schematics\": \"^10.0.1\",\r\n        \"chalk\": \"4.1.2\",\r\n        \"chokidar\": \"3.6.0\",\r\n        \"cli-table3\": \"0.6.5\",\r\n        \"commander\": \"4.1.1\",\r\n        \"fork-ts-checker-webpack-plugin\": \"9.0.2\",\r\n        \"glob\": \"10.4.2\",\r\n        \"inquirer\": \"8.2.6\",\r\n        \"node-emoji\": \"1.11.0\",\r\n        \"ora\": \"5.4.1\",\r\n        \"tree-kill\": \"1.2.2\",\r\n        \"tsconfig-paths\": \"4.2.0\",\r\n        \"tsconfig-paths-webpack-plugin\": \"4.1.0\",\r\n        \"typescript\": \"5.3.3\",\r\n        \"webpack\": \"5.94.0\",\r\n        \"webpack-node-externals\": \"3.0.0\"\r\n      },\r\n      \"bin\": {\r\n        \"nest\": \"bin/nest.js\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 16.14\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@swc/cli\": \"^0.1.62 || ^0.3.0 || ^0.4.0\",\r\n        \"@swc/core\": \"^1.3.62\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"@swc/cli\": {\r\n          \"optional\": true\r\n        },\r\n        \"@swc/core\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"node_modules/@nestjs/cli/node_modules/eslint-scope\": {\r\n      \"version\": \"5.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/eslint-scope/-/eslint-scope-5.1.1.tgz\",\r\n      \"integrity\": \"sha512-2NxwbF/hZ0KpepYN0cNbo+FN6XoK7GaHlQhgx/hIZl6Va0bF45RQOOwhLIy8lQDbuCiadSLCBnH2CFYquit5bw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"esrecurse\": \"^4.3.0\",\r\n        \"estraverse\": \"^4.1.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/@nestjs/cli/node_modules/estraverse\": {\r\n      \"version\": \"4.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/estraverse/-/estraverse-4.3.0.tgz\",\r\n      \"integrity\": \"sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=4.0\"\r\n      }\r\n    },\r\n    \"node_modules/@nestjs/cli/node_modules/typescript\": {\r\n      \"version\": \"5.3.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/typescript/-/typescript-5.3.3.tgz\",\r\n      \"integrity\": \"sha512-pXWcraxM0uxAS+tN0AG/BF2TyqmHO014Z070UsJ+pFvYuRSq8KH8DmWpnbXe0pEPDHXZV3FcAbJkijJ5oNEnWw==\",\r\n      \"dev\": true,\r\n      \"bin\": {\r\n        \"tsc\": \"bin/tsc\",\r\n        \"tsserver\": \"bin/tsserver\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=14.17\"\r\n      }\r\n    },\r\n    \"node_modules/@nestjs/cli/node_modules/webpack\": {\r\n      \"version\": \"5.94.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/webpack/-/webpack-5.94.0.tgz\",\r\n      \"integrity\": \"sha512-KcsGn50VT+06JH/iunZJedYGUJS5FGjow8wb9c0v5n1Om8O1g4L6LjtfxwlXIATopoQu+vOXXa7gYisWxCoPyg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@types/estree\": \"^1.0.5\",\r\n        \"@webassemblyjs/ast\": \"^1.12.1\",\r\n        \"@webassemblyjs/wasm-edit\": \"^1.12.1\",\r\n        \"@webassemblyjs/wasm-parser\": \"^1.12.1\",\r\n        \"acorn\": \"^8.7.1\",\r\n        \"acorn-import-attributes\": \"^1.9.5\",\r\n        \"browserslist\": \"^4.21.10\",\r\n        \"chrome-trace-event\": \"^1.0.2\",\r\n        \"enhanced-resolve\": \"^5.17.1\",\r\n        \"es-module-lexer\": \"^1.2.1\",\r\n        \"eslint-scope\": \"5.1.1\",\r\n        \"events\": \"^3.2.0\",\r\n        \"glob-to-regexp\": \"^0.4.1\",\r\n        \"graceful-fs\": \"^4.2.11\",\r\n        \"json-parse-even-better-errors\": \"^2.3.1\",\r\n        \"loader-runner\": \"^4.2.0\",\r\n        \"mime-types\": \"^2.1.27\",\r\n        \"neo-async\": \"^2.6.2\",\r\n        \"schema-utils\": \"^3.2.0\",\r\n        \"tapable\": \"^2.1.1\",\r\n        \"terser-webpack-plugin\": \"^5.3.10\",\r\n        \"watchpack\": \"^2.4.1\",\r\n        \"webpack-sources\": \"^3.2.3\"\r\n      },\r\n      \"bin\": {\r\n        \"webpack\": \"bin/webpack.js\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10.13.0\"\r\n      },\r\n      \"funding\": {\r\n        \"type\": \"opencollective\",\r\n        \"url\": \"https://opencollective.com/webpack\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"webpack-cli\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"node_modules/@nestjs/common\": {\r\n      \"version\": \"10.4.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/@nestjs/common/-/common-10.4.6.tgz\",\r\n      \"integrity\": \"sha512-KkezkZvU9poWaNq4L+lNvx+386hpOxPJkfXBBeSMrcqBOx8kVr36TGN2uYkF4Ta4zNu1KbCjmZbc0rhHSg296g==\",\r\n      \"dependencies\": {\r\n        \"iterare\": \"1.2.1\",\r\n        \"tslib\": \"2.7.0\",\r\n        \"uid\": \"2.0.2\"\r\n      },\r\n      \"funding\": {\r\n        \"type\": \"opencollective\",\r\n        \"url\": \"https://opencollective.com/nest\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"class-transformer\": \"*\",\r\n        \"class-validator\": \"*\",\r\n        \"reflect-metadata\": \"^0.1.12 || ^0.2.0\",\r\n        \"rxjs\": \"^7.1.0\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"class-transformer\": {\r\n          \"optional\": true\r\n        },\r\n        \"class-validator\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"node_modules/@nestjs/config\": {\r\n      \"version\": \"3.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@nestjs/config/-/config-3.3.0.tgz\",\r\n      \"integrity\": \"sha512-pdGTp8m9d0ZCrjTpjkUbZx6gyf2IKf+7zlkrPNMsJzYZ4bFRRTpXrnj+556/5uiI6AfL5mMrJc2u7dB6bvM+VA==\",\r\n      \"dependencies\": {\r\n        \"dotenv\": \"16.4.5\",\r\n        \"dotenv-expand\": \"10.0.0\",\r\n        \"lodash\": \"4.17.21\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@nestjs/common\": \"^8.0.0 || ^9.0.0 || ^10.0.0\",\r\n        \"rxjs\": \"^7.1.0\"\r\n      }\r\n    },\r\n    \"node_modules/@nestjs/core\": {\r\n      \"version\": \"10.4.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/@nestjs/core/-/core-10.4.6.tgz\",\r\n      \"integrity\": \"sha512-zXVPxCNRfO6gAy0yvEDjUxE/8gfZICJFpsl2lZAUH31bPb6m+tXuhUq2mVCTEltyMYQ+DYtRe+fEYM2v152N1g==\",\r\n      \"hasInstallScript\": true,\r\n      \"dependencies\": {\r\n        \"@nuxtjs/opencollective\": \"0.3.2\",\r\n        \"fast-safe-stringify\": \"2.1.1\",\r\n        \"iterare\": \"1.2.1\",\r\n        \"path-to-regexp\": \"3.3.0\",\r\n        \"tslib\": \"2.7.0\",\r\n        \"uid\": \"2.0.2\"\r\n      },\r\n      \"funding\": {\r\n        \"type\": \"opencollective\",\r\n        \"url\": \"https://opencollective.com/nest\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@nestjs/common\": \"^10.0.0\",\r\n        \"@nestjs/microservices\": \"^10.0.0\",\r\n        \"@nestjs/platform-express\": \"^10.0.0\",\r\n        \"@nestjs/websockets\": \"^10.0.0\",\r\n        \"reflect-metadata\": \"^0.1.12 || ^0.2.0\",\r\n        \"rxjs\": \"^7.1.0\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"@nestjs/microservices\": {\r\n          \"optional\": true\r\n        },\r\n        \"@nestjs/platform-express\": {\r\n          \"optional\": true\r\n        },\r\n        \"@nestjs/websockets\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"node_modules/@nestjs/jwt\": {\r\n      \"version\": \"10.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@nestjs/jwt/-/jwt-10.2.0.tgz\",\r\n      \"integrity\": \"sha512-x8cG90SURkEiLOehNaN2aRlotxT0KZESUliOPKKnjWiyJOcWurkF3w345WOX0P4MgFzUjGoZ1Sy0aZnxeihT0g==\",\r\n      \"dependencies\": {\r\n        \"@types/jsonwebtoken\": \"9.0.5\",\r\n        \"jsonwebtoken\": \"9.0.2\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@nestjs/common\": \"^8.0.0 || ^9.0.0 || ^10.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/@nestjs/mapped-types\": {\r\n      \"version\": \"2.0.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/@nestjs/mapped-types/-/mapped-types-2.0.5.tgz\",\r\n      \"integrity\": \"sha512-bSJv4pd6EY99NX9CjBIyn4TVDoSit82DUZlL4I3bqNfy5Gt+gXTa86i3I/i0iIV9P4hntcGM5GyO+FhZAhxtyg==\",\r\n      \"peerDependencies\": {\r\n        \"@nestjs/common\": \"^8.0.0 || ^9.0.0 || ^10.0.0\",\r\n        \"class-transformer\": \"^0.4.0 || ^0.5.0\",\r\n        \"class-validator\": \"^0.13.0 || ^0.14.0\",\r\n        \"reflect-metadata\": \"^0.1.12 || ^0.2.0\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"class-transformer\": {\r\n          \"optional\": true\r\n        },\r\n        \"class-validator\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"node_modules/@nestjs/passport\": {\r\n      \"version\": \"10.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@nestjs/passport/-/passport-10.0.3.tgz\",\r\n      \"integrity\": \"sha512-znJ9Y4S8ZDVY+j4doWAJ8EuuVO7SkQN3yOBmzxbGaXbvcSwFDAdGJ+OMCg52NdzIO4tQoN4pYKx8W6M0ArfFRQ==\",\r\n      \"peerDependencies\": {\r\n        \"@nestjs/common\": \"^8.0.0 || ^9.0.0 || ^10.0.0\",\r\n        \"passport\": \"^0.4.0 || ^0.5.0 || ^0.6.0 || ^0.7.0\"\r\n      }\r\n    },\r\n    \"node_modules/@nestjs/platform-express\": {\r\n      \"version\": \"10.4.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/@nestjs/platform-express/-/platform-express-10.4.6.tgz\",\r\n      \"integrity\": \"sha512-HcyCpAKccAasrLSGRTGWv5BKRs0rwTIFOSsk6laNyqfqvgvYcJQAedarnm4jmaemtmSJ0PFI9PmtEZADd2ahCg==\",\r\n      \"dependencies\": {\r\n        \"body-parser\": \"1.20.3\",\r\n        \"cors\": \"2.8.5\",\r\n        \"express\": \"4.21.1\",\r\n        \"multer\": \"1.4.4-lts.1\",\r\n        \"tslib\": \"2.7.0\"\r\n      },\r\n      \"funding\": {\r\n        \"type\": \"opencollective\",\r\n        \"url\": \"https://opencollective.com/nest\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@nestjs/common\": \"^10.0.0\",\r\n        \"@nestjs/core\": \"^10.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/@nestjs/schematics\": {\r\n      \"version\": \"10.2.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@nestjs/schematics/-/schematics-10.2.3.tgz\",\r\n      \"integrity\": \"sha512-4e8gxaCk7DhBxVUly2PjYL4xC2ifDFexCqq1/u4TtivLGXotVk0wHdYuPYe1tHTHuR1lsOkRbfOCpkdTnigLVg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@angular-devkit/core\": \"17.3.11\",\r\n        \"@angular-devkit/schematics\": \"17.3.11\",\r\n        \"comment-json\": \"4.2.5\",\r\n        \"jsonc-parser\": \"3.3.1\",\r\n        \"pluralize\": \"8.0.0\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"typescript\": \">=4.8.2\"\r\n      }\r\n    },\r\n    \"node_modules/@nestjs/schematics/node_modules/@angular-devkit/core\": {\r\n      \"version\": \"17.3.11\",\r\n      \"resolved\": \"https://registry.npmjs.org/@angular-devkit/core/-/core-17.3.11.tgz\",\r\n      \"integrity\": \"sha512-vTNDYNsLIWpYk2I969LMQFH29GTsLzxNk/0cLw5q56ARF0v5sIWfHYwGTS88jdDqIpuuettcSczbxeA7EuAmqQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"ajv\": \"8.12.0\",\r\n        \"ajv-formats\": \"2.1.1\",\r\n        \"jsonc-parser\": \"3.2.1\",\r\n        \"picomatch\": \"4.0.1\",\r\n        \"rxjs\": \"7.8.1\",\r\n        \"source-map\": \"0.7.4\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^18.13.0 || >=20.9.0\",\r\n        \"npm\": \"^6.11.0 || ^7.5.6 || >=8.0.0\",\r\n        \"yarn\": \">= 1.13.0\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"chokidar\": \"^3.5.2\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"chokidar\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"node_modules/@nestjs/schematics/node_modules/@angular-devkit/core/node_modules/jsonc-parser\": {\r\n      \"version\": \"3.2.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/jsonc-parser/-/jsonc-parser-3.2.1.tgz\",\r\n      \"integrity\": \"sha512-AilxAyFOAcK5wA1+LeaySVBrHsGQvUFCDWXKpZjzaL0PqW+xfBOttn8GNtWKFWqneyMZj41MWF9Kl6iPWLwgOA==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/@nestjs/schematics/node_modules/@angular-devkit/schematics\": {\r\n      \"version\": \"17.3.11\",\r\n      \"resolved\": \"https://registry.npmjs.org/@angular-devkit/schematics/-/schematics-17.3.11.tgz\",\r\n      \"integrity\": \"sha512-I5wviiIqiFwar9Pdk30Lujk8FczEEc18i22A5c6Z9lbmhPQdTroDnEQdsfXjy404wPe8H62s0I15o4pmMGfTYQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@angular-devkit/core\": \"17.3.11\",\r\n        \"jsonc-parser\": \"3.2.1\",\r\n        \"magic-string\": \"0.30.8\",\r\n        \"ora\": \"5.4.1\",\r\n        \"rxjs\": \"7.8.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^18.13.0 || >=20.9.0\",\r\n        \"npm\": \"^6.11.0 || ^7.5.6 || >=8.0.0\",\r\n        \"yarn\": \">= 1.13.0\"\r\n      }\r\n    },\r\n    \"node_modules/@nestjs/schematics/node_modules/@angular-devkit/schematics/node_modules/jsonc-parser\": {\r\n      \"version\": \"3.2.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/jsonc-parser/-/jsonc-parser-3.2.1.tgz\",\r\n      \"integrity\": \"sha512-AilxAyFOAcK5wA1+LeaySVBrHsGQvUFCDWXKpZjzaL0PqW+xfBOttn8GNtWKFWqneyMZj41MWF9Kl6iPWLwgOA==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/@nestjs/schematics/node_modules/jsonc-parser\": {\r\n      \"version\": \"3.3.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/jsonc-parser/-/jsonc-parser-3.3.1.tgz\",\r\n      \"integrity\": \"sha512-HUgH65KyejrUFPvHFPbqOY0rsFip3Bo5wb4ngvdi1EpCYWUQDC5V+Y7mZws+DLkr4M//zQJoanu1SP+87Dv1oQ==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/@nestjs/swagger\": {\r\n      \"version\": \"7.4.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/@nestjs/swagger/-/swagger-7.4.2.tgz\",\r\n      \"integrity\": \"sha512-Mu6TEn1M/owIvAx2B4DUQObQXqo2028R2s9rSZ/hJEgBK95+doTwS0DjmVA2wTeZTyVtXOoN7CsoM5pONBzvKQ==\",\r\n      \"dependencies\": {\r\n        \"@microsoft/tsdoc\": \"^0.15.0\",\r\n        \"@nestjs/mapped-types\": \"2.0.5\",\r\n        \"js-yaml\": \"4.1.0\",\r\n        \"lodash\": \"4.17.21\",\r\n        \"path-to-regexp\": \"3.3.0\",\r\n        \"swagger-ui-dist\": \"5.17.14\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@fastify/static\": \"^6.0.0 || ^7.0.0\",\r\n        \"@nestjs/common\": \"^9.0.0 || ^10.0.0\",\r\n        \"@nestjs/core\": \"^9.0.0 || ^10.0.0\",\r\n        \"class-transformer\": \"*\",\r\n        \"class-validator\": \"*\",\r\n        \"reflect-metadata\": \"^0.1.12 || ^0.2.0\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"@fastify/static\": {\r\n          \"optional\": true\r\n        },\r\n        \"class-transformer\": {\r\n          \"optional\": true\r\n        },\r\n        \"class-validator\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"node_modules/@nestjs/testing\": {\r\n      \"version\": \"10.4.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/@nestjs/testing/-/testing-10.4.6.tgz\",\r\n      \"integrity\": \"sha512-aiDicKhlGibVGNYuew399H5qZZXaseOBT/BS+ERJxxCmco7ZdAqaujsNjSaSbTK9ojDPf27crLT0C4opjqJe3A==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"tslib\": \"2.7.0\"\r\n      },\r\n      \"funding\": {\r\n        \"type\": \"opencollective\",\r\n        \"url\": \"https://opencollective.com/nest\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@nestjs/common\": \"^10.0.0\",\r\n        \"@nestjs/core\": \"^10.0.0\",\r\n        \"@nestjs/microservices\": \"^10.0.0\",\r\n        \"@nestjs/platform-express\": \"^10.0.0\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"@nestjs/microservices\": {\r\n          \"optional\": true\r\n        },\r\n        \"@nestjs/platform-express\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"node_modules/@nestjs/typeorm\": {\r\n      \"version\": \"10.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/@nestjs/typeorm/-/typeorm-10.0.2.tgz\",\r\n      \"integrity\": \"sha512-H738bJyydK4SQkRCTeh1aFBxoO1E9xdL/HaLGThwrqN95os5mEyAtK7BLADOS+vldP4jDZ2VQPLj4epWwRqCeQ==\",\r\n      \"dependencies\": {\r\n        \"uuid\": \"9.0.1\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@nestjs/common\": \"^8.0.0 || ^9.0.0 || ^10.0.0\",\r\n        \"@nestjs/core\": \"^8.0.0 || ^9.0.0 || ^10.0.0\",\r\n        \"reflect-metadata\": \"^0.1.13 || ^0.2.0\",\r\n        \"rxjs\": \"^7.2.0\",\r\n        \"typeorm\": \"^0.3.0\"\r\n      }\r\n    },\r\n    \"node_modules/@nodelib/fs.scandir\": {\r\n      \"version\": \"2.1.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz\",\r\n      \"integrity\": \"sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@nodelib/fs.stat\": \"2.0.5\",\r\n        \"run-parallel\": \"^1.1.9\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 8\"\r\n      }\r\n    },\r\n    \"node_modules/@nodelib/fs.stat\": {\r\n      \"version\": \"2.0.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz\",\r\n      \"integrity\": \"sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">= 8\"\r\n      }\r\n    },\r\n    \"node_modules/@nodelib/fs.walk\": {\r\n      \"version\": \"1.2.8\",\r\n      \"resolved\": \"https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz\",\r\n      \"integrity\": \"sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@nodelib/fs.scandir\": \"2.1.5\",\r\n        \"fastq\": \"^1.6.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 8\"\r\n      }\r\n    },\r\n    \"node_modules/@nuxtjs/opencollective\": {\r\n      \"version\": \"0.3.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/@nuxtjs/opencollective/-/opencollective-0.3.2.tgz\",\r\n      \"integrity\": \"sha512-um0xL3fO7Mf4fDxcqx9KryrB7zgRM5JSlvGN5AGkP6JLM5XEKyjeAiPbNxdXVXQ16isuAhYpvP88NgL2BGd6aA==\",\r\n      \"dependencies\": {\r\n        \"chalk\": \"^4.1.0\",\r\n        \"consola\": \"^2.15.0\",\r\n        \"node-fetch\": \"^2.6.1\"\r\n      },\r\n      \"bin\": {\r\n        \"opencollective\": \"bin/opencollective.js\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8.0.0\",\r\n        \"npm\": \">=5.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/@pkgjs/parseargs\": {\r\n      \"version\": \"0.11.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz\",\r\n      \"integrity\": \"sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==\",\r\n      \"optional\": true,\r\n      \"engines\": {\r\n        \"node\": \">=14\"\r\n      }\r\n    },\r\n    \"node_modules/@pkgr/core\": {\r\n      \"version\": \"0.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/@pkgr/core/-/core-0.1.1.tgz\",\r\n      \"integrity\": \"sha512-cq8o4cWH0ibXh9VGi5P20Tu9XF/0fFXl9EUinr9QfTM7a7p0oTA4iJRCQWppXR1Pg8dSM0UCItCkPwsk9qWWYA==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \"^12.20.0 || ^14.18.0 || >=16.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/unts\"\r\n      }\r\n    },\r\n    \"node_modules/@prisma/client\": {\r\n      \"version\": \"6.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/@prisma/client/-/client-6.0.1.tgz\",\r\n      \"integrity\": \"sha512-60w7kL6bUxz7M6Gs/V+OWMhwy94FshpngVmOY05TmGD0Lhk+Ac0ZgtjlL6Wll9TD4G03t4Sq1wZekNVy+Xdlbg==\",\r\n      \"hasInstallScript\": true,\r\n      \"engines\": {\r\n        \"node\": \">=18.18\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"prisma\": \"*\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"prisma\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"node_modules/@prisma/debug\": {\r\n      \"version\": \"6.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/@prisma/debug/-/debug-6.0.1.tgz\",\r\n      \"integrity\": \"sha512-jQylgSOf7ibTVxqBacnAlVGvek6fQxJIYCQOeX2KexsfypNzXjJQSS2o5s+Mjj2Np93iSOQUaw6TvPj8syhG4w==\",\r\n      \"devOptional\": true\r\n    },\r\n    \"node_modules/@prisma/engines\": {\r\n      \"version\": \"6.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/@prisma/engines/-/engines-6.0.1.tgz\",\r\n      \"integrity\": \"sha512-4hxzI+YQIR2uuDyVsDooFZGu5AtixbvM2psp+iayDZ4hRrAHo/YwgA17N23UWq7G6gRu18NvuNMb48qjP3DPQw==\",\r\n      \"devOptional\": true,\r\n      \"hasInstallScript\": true,\r\n      \"dependencies\": {\r\n        \"@prisma/debug\": \"6.0.1\",\r\n        \"@prisma/engines-version\": \"5.23.0-27.5dbef10bdbfb579e07d35cc85fb1518d357cb99e\",\r\n        \"@prisma/fetch-engine\": \"6.0.1\",\r\n        \"@prisma/get-platform\": \"6.0.1\"\r\n      }\r\n    },\r\n    \"node_modules/@prisma/engines-version\": {\r\n      \"version\": \"5.23.0-27.5dbef10bdbfb579e07d35cc85fb1518d357cb99e\",\r\n      \"resolved\": \"https://registry.npmjs.org/@prisma/engines-version/-/engines-version-5.23.0-27.5dbef10bdbfb579e07d35cc85fb1518d357cb99e.tgz\",\r\n      \"integrity\": \"sha512-JmIds0Q2/vsOmnuTJYxY4LE+sajqjYKhLtdOT6y4imojqv5d/aeVEfbBGC74t8Be1uSp0OP8lxIj2OqoKbLsfQ==\",\r\n      \"devOptional\": true\r\n    },\r\n    \"node_modules/@prisma/fetch-engine\": {\r\n      \"version\": \"6.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/@prisma/fetch-engine/-/fetch-engine-6.0.1.tgz\",\r\n      \"integrity\": \"sha512-T36bWFVGeGYYSyYOj9d+O9G3sBC+pAyMC+jc45iSL63/Haq1GrYjQPgPMxrEj9m739taXrupoysRedQ+VyvM/Q==\",\r\n      \"devOptional\": true,\r\n      \"dependencies\": {\r\n        \"@prisma/debug\": \"6.0.1\",\r\n        \"@prisma/engines-version\": \"5.23.0-27.5dbef10bdbfb579e07d35cc85fb1518d357cb99e\",\r\n        \"@prisma/get-platform\": \"6.0.1\"\r\n      }\r\n    },\r\n    \"node_modules/@prisma/get-platform\": {\r\n      \"version\": \"6.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/@prisma/get-platform/-/get-platform-6.0.1.tgz\",\r\n      \"integrity\": \"sha512-zspC9vlxAqx4E6epMPMLLBMED2VD8axDe8sPnquZ8GOsn6tiacWK0oxrGK4UAHYzYUVuMVUApJbdXB2dFpLhvg==\",\r\n      \"devOptional\": true,\r\n      \"dependencies\": {\r\n        \"@prisma/debug\": \"6.0.1\"\r\n      }\r\n    },\r\n    \"node_modules/@sinclair/typebox\": {\r\n      \"version\": \"0.27.8\",\r\n      \"resolved\": \"https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.27.8.tgz\",\r\n      \"integrity\": \"sha512-+Fj43pSMwJs4KRrH/938Uf+uAELIgVBmQzg/q1YG10djyfA3TnrU8N8XzqCh/okZdszqBQTZf96idMfE5lnwTA==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/@sinonjs/commons\": {\r\n      \"version\": \"3.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/@sinonjs/commons/-/commons-3.0.1.tgz\",\r\n      \"integrity\": \"sha512-K3mCHKQ9sVh8o1C9cxkwxaOmXoAMlDxC1mYyHrjqOWEcBjYr76t96zL2zlj5dUGZ3HSw240X1qgH3Mjf1yJWpQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"type-detect\": \"4.0.8\"\r\n      }\r\n    },\r\n    \"node_modules/@sinonjs/fake-timers\": {\r\n      \"version\": \"10.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@sinonjs/fake-timers/-/fake-timers-10.3.0.tgz\",\r\n      \"integrity\": \"sha512-V4BG07kuYSUkTCSBHG8G8TNhM+F19jXFWnQtzj+we8DrkpSBCee9Z3Ms8yiGer/dlmhe35/Xdgyo3/0rQKg7YA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@sinonjs/commons\": \"^3.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/@sqltools/formatter\": {\r\n      \"version\": \"1.2.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/@sqltools/formatter/-/formatter-1.2.5.tgz\",\r\n      \"integrity\": \"sha512-Uy0+khmZqUrUGm5dmMqVlnvufZRSK0FbYzVgp0UMstm+F5+W2/jnEEQyc9vo1ZR/E5ZI/B1WjjoTqBqwJL6Krw==\"\r\n    },\r\n    \"node_modules/@tsconfig/node10\": {\r\n      \"version\": \"1.0.11\",\r\n      \"resolved\": \"https://registry.npmjs.org/@tsconfig/node10/-/node10-1.0.11.tgz\",\r\n      \"integrity\": \"sha512-DcRjDCujK/kCk/cUe8Xz8ZSpm8mS3mNNpta+jGCA6USEDfktlNvm1+IuZ9eTcDbNk41BHwpHHeW+N1lKCz4zOw==\",\r\n      \"devOptional\": true\r\n    },\r\n    \"node_modules/@tsconfig/node12\": {\r\n      \"version\": \"1.0.11\",\r\n      \"resolved\": \"https://registry.npmjs.org/@tsconfig/node12/-/node12-1.0.11.tgz\",\r\n      \"integrity\": \"sha512-cqefuRsh12pWyGsIoBKJA9luFu3mRxCA+ORZvA4ktLSzIuCUtWVxGIuXigEwO5/ywWFMZ2QEGKWvkZG1zDMTag==\",\r\n      \"devOptional\": true\r\n    },\r\n    \"node_modules/@tsconfig/node14\": {\r\n      \"version\": \"1.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@tsconfig/node14/-/node14-1.0.3.tgz\",\r\n      \"integrity\": \"sha512-ysT8mhdixWK6Hw3i1V2AeRqZ5WfXg1G43mqoYlM2nc6388Fq5jcXyr5mRsqViLx/GJYdoL0bfXD8nmF+Zn/Iow==\",\r\n      \"devOptional\": true\r\n    },\r\n    \"node_modules/@tsconfig/node16\": {\r\n      \"version\": \"1.0.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/@tsconfig/node16/-/node16-1.0.4.tgz\",\r\n      \"integrity\": \"sha512-vxhUy4J8lyeyinH7Azl1pdd43GJhZH/tP2weN8TntQblOY+A0XbT8DJk1/oCPuOOyg/Ja757rG0CgHcWC8OfMA==\",\r\n      \"devOptional\": true\r\n    },\r\n    \"node_modules/@types/babel__core\": {\r\n      \"version\": \"7.20.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz\",\r\n      \"integrity\": \"sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/parser\": \"^7.20.7\",\r\n        \"@babel/types\": \"^7.20.7\",\r\n        \"@types/babel__generator\": \"*\",\r\n        \"@types/babel__template\": \"*\",\r\n        \"@types/babel__traverse\": \"*\"\r\n      }\r\n    },\r\n    \"node_modules/@types/babel__generator\": {\r\n      \"version\": \"7.6.8\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.6.8.tgz\",\r\n      \"integrity\": \"sha512-ASsj+tpEDsEiFr1arWrlN6V3mdfjRMZt6LtK/Vp/kreFLnr5QH5+DhvD5nINYZXzwJvXeGq+05iUXcAzVrqWtw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/types\": \"^7.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/@types/babel__template\": {\r\n      \"version\": \"7.4.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz\",\r\n      \"integrity\": \"sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/parser\": \"^7.1.0\",\r\n        \"@babel/types\": \"^7.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/@types/babel__traverse\": {\r\n      \"version\": \"7.20.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.6.tgz\",\r\n      \"integrity\": \"sha512-r1bzfrm0tomOI8g1SzvCaQHo6Lcv6zu0EA+W2kHrt8dyrHQxGzBBL4kdkzIS+jBMV+EYcMAEAqXqYaLJq5rOZg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/types\": \"^7.20.7\"\r\n      }\r\n    },\r\n    \"node_modules/@types/bcrypt\": {\r\n      \"version\": \"5.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/bcrypt/-/bcrypt-5.0.2.tgz\",\r\n      \"integrity\": \"sha512-6atioO8Y75fNcbmj0G7UjI9lXN2pQ/IGJ2FWT4a/btd0Lk9lQalHLKhkgKVZ3r+spnmWUKfbMi1GEe9wyHQfNQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@types/node\": \"*\"\r\n      }\r\n    },\r\n    \"node_modules/@types/body-parser\": {\r\n      \"version\": \"1.19.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/body-parser/-/body-parser-1.19.5.tgz\",\r\n      \"integrity\": \"sha512-fB3Zu92ucau0iQ0JMCFQE7b/dv8Ot07NI3KaZIkIUNXq82k4eBAqUaneXfleGY9JWskeS9y+u0nXMyspcuQrCg==\",\r\n      \"dependencies\": {\r\n        \"@types/connect\": \"*\",\r\n        \"@types/node\": \"*\"\r\n      }\r\n    },\r\n    \"node_modules/@types/connect\": {\r\n      \"version\": \"3.4.38\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/connect/-/connect-3.4.38.tgz\",\r\n      \"integrity\": \"sha512-K6uROf1LD88uDQqJCktA4yzL1YYAK6NgfsI0v/mTgyPKWsX1CnJ0XPSDhViejru1GcRkLWb8RlzFYJRqGUbaug==\",\r\n      \"dependencies\": {\r\n        \"@types/node\": \"*\"\r\n      }\r\n    },\r\n    \"node_modules/@types/cookiejar\": {\r\n      \"version\": \"2.1.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/cookiejar/-/cookiejar-2.1.5.tgz\",\r\n      \"integrity\": \"sha512-he+DHOWReW0nghN24E1WUqM0efK4kI9oTqDm6XmK8ZPe2djZ90BSNdGnIyCLzCPw7/pogPlGbzI2wHGGmi4O/Q==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/@types/eslint\": {\r\n      \"version\": \"9.6.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/eslint/-/eslint-9.6.1.tgz\",\r\n      \"integrity\": \"sha512-FXx2pKgId/WyYo2jXw63kk7/+TY7u7AziEJxJAnSFzHlqTAS3Ync6SvgYAN/k4/PQpnnVuzoMuVnByKK2qp0ag==\",\r\n      \"dev\": true,\r\n      \"peer\": true,\r\n      \"dependencies\": {\r\n        \"@types/estree\": \"*\",\r\n        \"@types/json-schema\": \"*\"\r\n      }\r\n    },\r\n    \"node_modules/@types/eslint-scope\": {\r\n      \"version\": \"3.7.7\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/eslint-scope/-/eslint-scope-3.7.7.tgz\",\r\n      \"integrity\": \"sha512-MzMFlSLBqNF2gcHWO0G1vP/YQyfvrxZ0bF+u7mzUdZ1/xK4A4sru+nraZz5i3iEIk1l1uyicaDVTB4QbbEkAYg==\",\r\n      \"dev\": true,\r\n      \"peer\": true,\r\n      \"dependencies\": {\r\n        \"@types/eslint\": \"*\",\r\n        \"@types/estree\": \"*\"\r\n      }\r\n    },\r\n    \"node_modules/@types/estree\": {\r\n      \"version\": \"1.0.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/estree/-/estree-1.0.6.tgz\",\r\n      \"integrity\": \"sha512-AYnb1nQyY49te+VRAVgmzfcgjYS91mY5P0TKUDCLEM+gNnA+3T6rWITXRLYCpahpqSQbN5cE+gHpnPyXjHWxcw==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/@types/express\": {\r\n      \"version\": \"4.17.21\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/express/-/express-4.17.21.tgz\",\r\n      \"integrity\": \"sha512-ejlPM315qwLpaQlQDTjPdsUFSc6ZsP4AN6AlWnogPjQ7CVi7PYF3YVz+CY3jE2pwYf7E/7HlDAN0rV2GxTG0HQ==\",\r\n      \"dependencies\": {\r\n        \"@types/body-parser\": \"*\",\r\n        \"@types/express-serve-static-core\": \"^4.17.33\",\r\n        \"@types/qs\": \"*\",\r\n        \"@types/serve-static\": \"*\"\r\n      }\r\n    },\r\n    \"node_modules/@types/express-serve-static-core\": {\r\n      \"version\": \"4.19.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-4.19.6.tgz\",\r\n      \"integrity\": \"sha512-N4LZ2xG7DatVqhCZzOGb1Yi5lMbXSZcmdLDe9EzSndPV2HpWYWzRbaerl2n27irrm94EPpprqa8KpskPT085+A==\",\r\n      \"dependencies\": {\r\n        \"@types/node\": \"*\",\r\n        \"@types/qs\": \"*\",\r\n        \"@types/range-parser\": \"*\",\r\n        \"@types/send\": \"*\"\r\n      }\r\n    },\r\n    \"node_modules/@types/graceful-fs\": {\r\n      \"version\": \"4.1.9\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/graceful-fs/-/graceful-fs-4.1.9.tgz\",\r\n      \"integrity\": \"sha512-olP3sd1qOEe5dXTSaFvQG+02VdRXcdytWLAZsAq1PecU8uqQAhkrnbli7DagjtXKW/Bl7YJbUsa8MPcuc8LHEQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@types/node\": \"*\"\r\n      }\r\n    },\r\n    \"node_modules/@types/http-errors\": {\r\n      \"version\": \"2.0.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/http-errors/-/http-errors-2.0.4.tgz\",\r\n      \"integrity\": \"sha512-D0CFMMtydbJAegzOyHjtiKPLlvnm3iTZyZRSZoLq2mRhDdmLfIWOCYPfQJ4cu2erKghU++QvjcUjp/5h7hESpA==\"\r\n    },\r\n    \"node_modules/@types/istanbul-lib-coverage\": {\r\n      \"version\": \"2.0.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/istanbul-lib-coverage/-/istanbul-lib-coverage-2.0.6.tgz\",\r\n      \"integrity\": \"sha512-2QF/t/auWm0lsy8XtKVPG19v3sSOQlJe/YHZgfjb/KBBHOGSV+J2q/S671rcq9uTBrLAXmZpqJiaQbMT+zNU1w==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/@types/istanbul-lib-report\": {\r\n      \"version\": \"3.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/istanbul-lib-report/-/istanbul-lib-report-3.0.3.tgz\",\r\n      \"integrity\": \"sha512-NQn7AHQnk/RSLOxrBbGyJM/aVQ+pjj5HCgasFxc0K/KhoATfQ/47AyUl15I2yBUpihjmas+a+VJBOqecrFH+uA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@types/istanbul-lib-coverage\": \"*\"\r\n      }\r\n    },\r\n    \"node_modules/@types/istanbul-reports\": {\r\n      \"version\": \"3.0.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/istanbul-reports/-/istanbul-reports-3.0.4.tgz\",\r\n      \"integrity\": \"sha512-pk2B1NWalF9toCRu6gjBzR69syFjP4Od8WRAX+0mmf9lAjCRicLOWc+ZrxZHx/0XRjotgkF9t6iaMJ+aXcOdZQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@types/istanbul-lib-report\": \"*\"\r\n      }\r\n    },\r\n    \"node_modules/@types/jest\": {\r\n      \"version\": \"29.5.14\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/jest/-/jest-29.5.14.tgz\",\r\n      \"integrity\": \"sha512-ZN+4sdnLUbo8EVvVc2ao0GFW6oVrQRPn4K2lglySj7APvSrgzxHiNNK99us4WDMi57xxA2yggblIAMNhXOotLQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"expect\": \"^29.0.0\",\r\n        \"pretty-format\": \"^29.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/@types/json-schema\": {\r\n      \"version\": \"7.0.15\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz\",\r\n      \"integrity\": \"sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/@types/jsonwebtoken\": {\r\n      \"version\": \"9.0.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/jsonwebtoken/-/jsonwebtoken-9.0.5.tgz\",\r\n      \"integrity\": \"sha512-VRLSGzik+Unrup6BsouBeHsf4d1hOEgYWTm/7Nmw1sXoN1+tRly/Gy/po3yeahnP4jfnQWWAhQAqcNfH7ngOkA==\",\r\n      \"dependencies\": {\r\n        \"@types/node\": \"*\"\r\n      }\r\n    },\r\n    \"node_modules/@types/methods\": {\r\n      \"version\": \"1.1.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/methods/-/methods-1.1.4.tgz\",\r\n      \"integrity\": \"sha512-ymXWVrDiCxTBE3+RIrrP533E70eA+9qu7zdWoHuOmGujkYtzf4HQF96b8nwHLqhuf4ykX61IGRIB38CC6/sImQ==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/@types/mime\": {\r\n      \"version\": \"1.3.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/mime/-/mime-1.3.5.tgz\",\r\n      \"integrity\": \"sha512-/pyBZWSLD2n0dcHE3hq8s8ZvcETHtEuF+3E7XVt0Ig2nvsVQXdghHVcEkIWjy9A0wKfTn97a/PSDYohKIlnP/w==\"\r\n    },\r\n    \"node_modules/@types/node\": {\r\n      \"version\": \"20.17.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/node/-/node-20.17.5.tgz\",\r\n      \"integrity\": \"sha512-n8FYY/pRxu496441gIcAQFZPKXbhsd6VZygcq+PTSZ75eMh/Ke0hCAROdUa21qiFqKNsPPYic46yXDO1JGiPBQ==\",\r\n      \"dependencies\": {\r\n        \"undici-types\": \"~6.19.2\"\r\n      }\r\n    },\r\n    \"node_modules/@types/passport\": {\r\n      \"version\": \"1.0.17\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/passport/-/passport-1.0.17.tgz\",\r\n      \"integrity\": \"sha512-aciLyx+wDwT2t2/kJGJR2AEeBz0nJU4WuRX04Wu9Dqc5lSUtwu0WERPHYsLhF9PtseiAMPBGNUOtFjxZ56prsg==\",\r\n      \"dependencies\": {\r\n        \"@types/express\": \"*\"\r\n      }\r\n    },\r\n    \"node_modules/@types/passport-jwt\": {\r\n      \"version\": \"4.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/passport-jwt/-/passport-jwt-4.0.1.tgz\",\r\n      \"integrity\": \"sha512-Y0Ykz6nWP4jpxgEUYq8NoVZeCQPo1ZndJLfapI249g1jHChvRfZRO/LS3tqu26YgAS/laI1qx98sYGz0IalRXQ==\",\r\n      \"dependencies\": {\r\n        \"@types/jsonwebtoken\": \"*\",\r\n        \"@types/passport-strategy\": \"*\"\r\n      }\r\n    },\r\n    \"node_modules/@types/passport-strategy\": {\r\n      \"version\": \"0.2.38\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/passport-strategy/-/passport-strategy-0.2.38.tgz\",\r\n      \"integrity\": \"sha512-GC6eMqqojOooq993Tmnmp7AUTbbQSgilyvpCYQjT+H6JfG/g6RGc7nXEniZlp0zyKJ0WUdOiZWLBZft9Yug1uA==\",\r\n      \"dependencies\": {\r\n        \"@types/express\": \"*\",\r\n        \"@types/passport\": \"*\"\r\n      }\r\n    },\r\n    \"node_modules/@types/paypal-rest-sdk\": {\r\n      \"version\": \"1.7.9\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/paypal-rest-sdk/-/paypal-rest-sdk-1.7.9.tgz\",\r\n      \"integrity\": \"sha512-Wu/F8HaC0UbAPGn983o6KLMsF5zxAzsLOj9dzOU9xRyqbsDuNBp1No1bM/9T3vdFiV5HdfwhXrhfhD1gRTycTg==\",\r\n      \"dependencies\": {\r\n        \"@types/node\": \"*\"\r\n      }\r\n    },\r\n    \"node_modules/@types/qs\": {\r\n      \"version\": \"6.9.16\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/qs/-/qs-6.9.16.tgz\",\r\n      \"integrity\": \"sha512-7i+zxXdPD0T4cKDuxCUXJ4wHcsJLwENa6Z3dCu8cfCK743OGy5Nu1RmAGqDPsoTDINVEcdXKRvR/zre+P2Ku1A==\"\r\n    },\r\n    \"node_modules/@types/range-parser\": {\r\n      \"version\": \"1.2.7\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/range-parser/-/range-parser-1.2.7.tgz\",\r\n      \"integrity\": \"sha512-hKormJbkJqzQGhziax5PItDUTMAM9uE2XXQmM37dyd4hVM+5aVl7oVxMVUiVQn2oCQFN/LKCZdvSM0pFRqbSmQ==\"\r\n    },\r\n    \"node_modules/@types/semver\": {\r\n      \"version\": \"7.5.8\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/semver/-/semver-7.5.8.tgz\",\r\n      \"integrity\": \"sha512-I8EUhyrgfLrcTkzV3TSsGyl1tSuPrEDzr0yd5m90UgNxQkyDXULk3b6MlQqTCpZpNtWe1K0hzclnZkTcLBe2UQ==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/@types/send\": {\r\n      \"version\": \"0.17.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/send/-/send-0.17.4.tgz\",\r\n      \"integrity\": \"sha512-x2EM6TJOybec7c52BX0ZspPodMsQUd5L6PRwOunVyVUhXiBSKf3AezDL8Dgvgt5o0UfKNfuA0eMLr2wLT4AiBA==\",\r\n      \"dependencies\": {\r\n        \"@types/mime\": \"^1\",\r\n        \"@types/node\": \"*\"\r\n      }\r\n    },\r\n    \"node_modules/@types/serve-static\": {\r\n      \"version\": \"1.15.7\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/serve-static/-/serve-static-1.15.7.tgz\",\r\n      \"integrity\": \"sha512-W8Ym+h8nhuRwaKPaDw34QUkwsGi6Rc4yYqvKFo5rm2FUEhCFbzVWrxXUxuKK8TASjWsysJY0nsmNCGhCOIsrOw==\",\r\n      \"dependencies\": {\r\n        \"@types/http-errors\": \"*\",\r\n        \"@types/node\": \"*\",\r\n        \"@types/send\": \"*\"\r\n      }\r\n    },\r\n    \"node_modules/@types/stack-utils\": {\r\n      \"version\": \"2.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/stack-utils/-/stack-utils-2.0.3.tgz\",\r\n      \"integrity\": \"sha512-9aEbYZ3TbYMznPdcdr3SmIrLXwC/AKZXQeCf9Pgao5CKb8CyHuEX5jzWPTkvregvhRJHcpRO6BFoGW9ycaOkYw==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/@types/superagent\": {\r\n      \"version\": \"8.1.9\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/superagent/-/superagent-8.1.9.tgz\",\r\n      \"integrity\": \"sha512-pTVjI73witn+9ILmoJdajHGW2jkSaOzhiFYF1Rd3EQ94kymLqB9PjD9ISg7WaALC7+dCHT0FGe9T2LktLq/3GQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@types/cookiejar\": \"^2.1.5\",\r\n        \"@types/methods\": \"^1.1.4\",\r\n        \"@types/node\": \"*\",\r\n        \"form-data\": \"^4.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/@types/supertest\": {\r\n      \"version\": \"6.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/supertest/-/supertest-6.0.2.tgz\",\r\n      \"integrity\": \"sha512-137ypx2lk/wTQbW6An6safu9hXmajAifU/s7szAHLN/FeIm5w7yR0Wkl9fdJMRSHwOn4HLAI0DaB2TOORuhPDg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@types/methods\": \"^1.1.4\",\r\n        \"@types/superagent\": \"^8.1.0\"\r\n      }\r\n    },\r\n    \"node_modules/@types/swagger-ui-express\": {\r\n      \"version\": \"4.1.7\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/swagger-ui-express/-/swagger-ui-express-4.1.7.tgz\",\r\n      \"integrity\": \"sha512-ovLM9dNincXkzH4YwyYpll75vhzPBlWx6La89wwvYH7mHjVpf0X0K/vR/aUM7SRxmr5tt9z7E5XJcjQ46q+S3g==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@types/express\": \"*\",\r\n        \"@types/serve-static\": \"*\"\r\n      }\r\n    },\r\n    \"node_modules/@types/validator\": {\r\n      \"version\": \"13.12.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/validator/-/validator-13.12.2.tgz\",\r\n      \"integrity\": \"sha512-6SlHBzUW8Jhf3liqrGGXyTJSIFe4nqlJ5A5KaMZ2l/vbM3Wh3KSybots/wfWVzNLK4D1NZluDlSQIbIEPx6oyA==\"\r\n    },\r\n    \"node_modules/@types/yargs\": {\r\n      \"version\": \"17.0.33\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/yargs/-/yargs-17.0.33.tgz\",\r\n      \"integrity\": \"sha512-WpxBCKWPLr4xSsHgz511rFJAM+wS28w2zEO1QDNY5zM/S8ok70NNfztH0xwhqKyaK0OHCbN98LDAZuy1ctxDkA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@types/yargs-parser\": \"*\"\r\n      }\r\n    },\r\n    \"node_modules/@types/yargs-parser\": {\r\n      \"version\": \"21.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/yargs-parser/-/yargs-parser-21.0.3.tgz\",\r\n      \"integrity\": \"sha512-I4q9QU9MQv4oEOz4tAHJtNz1cwuLxn2F3xcc2iV5WdqLPpUnj30aUuxt1mAxYTG+oe8CZMV/+6rU4S4gRDzqtQ==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/@typescript-eslint/eslint-plugin\": {\r\n      \"version\": \"6.21.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-6.21.0.tgz\",\r\n      \"integrity\": \"sha512-oy9+hTPCUFpngkEZUSzbf9MxI65wbKFoQYsgPdILTfbUldp5ovUuphZVe4i30emU9M/kP+T64Di0mxl7dSw3MA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@eslint-community/regexpp\": \"^4.5.1\",\r\n        \"@typescript-eslint/scope-manager\": \"6.21.0\",\r\n        \"@typescript-eslint/type-utils\": \"6.21.0\",\r\n        \"@typescript-eslint/utils\": \"6.21.0\",\r\n        \"@typescript-eslint/visitor-keys\": \"6.21.0\",\r\n        \"debug\": \"^4.3.4\",\r\n        \"graphemer\": \"^1.4.0\",\r\n        \"ignore\": \"^5.2.4\",\r\n        \"natural-compare\": \"^1.4.0\",\r\n        \"semver\": \"^7.5.4\",\r\n        \"ts-api-utils\": \"^1.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^16.0.0 || >=18.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"type\": \"opencollective\",\r\n        \"url\": \"https://opencollective.com/typescript-eslint\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@typescript-eslint/parser\": \"^6.0.0 || ^6.0.0-alpha\",\r\n        \"eslint\": \"^7.0.0 || ^8.0.0\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"typescript\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"node_modules/@typescript-eslint/parser\": {\r\n      \"version\": \"6.21.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@typescript-eslint/parser/-/parser-6.21.0.tgz\",\r\n      \"integrity\": \"sha512-tbsV1jPne5CkFQCgPBcDOt30ItF7aJoZL997JSF7MhGQqOeT3svWRYxiqlfA5RUdlHN6Fi+EI9bxqbdyAUZjYQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@typescript-eslint/scope-manager\": \"6.21.0\",\r\n        \"@typescript-eslint/types\": \"6.21.0\",\r\n        \"@typescript-eslint/typescript-estree\": \"6.21.0\",\r\n        \"@typescript-eslint/visitor-keys\": \"6.21.0\",\r\n        \"debug\": \"^4.3.4\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^16.0.0 || >=18.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"type\": \"opencollective\",\r\n        \"url\": \"https://opencollective.com/typescript-eslint\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"eslint\": \"^7.0.0 || ^8.0.0\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"typescript\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"node_modules/@typescript-eslint/scope-manager\": {\r\n      \"version\": \"6.21.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-6.21.0.tgz\",\r\n      \"integrity\": \"sha512-OwLUIWZJry80O99zvqXVEioyniJMa+d2GrqpUTqi5/v5D5rOrppJVBPa0yKCblcigC0/aYAzxxqQ1B+DS2RYsg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@typescript-eslint/types\": \"6.21.0\",\r\n        \"@typescript-eslint/visitor-keys\": \"6.21.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^16.0.0 || >=18.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"type\": \"opencollective\",\r\n        \"url\": \"https://opencollective.com/typescript-eslint\"\r\n      }\r\n    },\r\n    \"node_modules/@typescript-eslint/type-utils\": {\r\n      \"version\": \"6.21.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-6.21.0.tgz\",\r\n      \"integrity\": \"sha512-rZQI7wHfao8qMX3Rd3xqeYSMCL3SoiSQLBATSiVKARdFGCYSRvmViieZjqc58jKgs8Y8i9YvVVhRbHSTA4VBag==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@typescript-eslint/typescript-estree\": \"6.21.0\",\r\n        \"@typescript-eslint/utils\": \"6.21.0\",\r\n        \"debug\": \"^4.3.4\",\r\n        \"ts-api-utils\": \"^1.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^16.0.0 || >=18.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"type\": \"opencollective\",\r\n        \"url\": \"https://opencollective.com/typescript-eslint\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"eslint\": \"^7.0.0 || ^8.0.0\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"typescript\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"node_modules/@typescript-eslint/types\": {\r\n      \"version\": \"6.21.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@typescript-eslint/types/-/types-6.21.0.tgz\",\r\n      \"integrity\": \"sha512-1kFmZ1rOm5epu9NZEZm1kckCDGj5UJEf7P1kliH4LKu/RkwpsfqqGmY2OOcUs18lSlQBKLDYBOGxRVtrMN5lpg==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \"^16.0.0 || >=18.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"type\": \"opencollective\",\r\n        \"url\": \"https://opencollective.com/typescript-eslint\"\r\n      }\r\n    },\r\n    \"node_modules/@typescript-eslint/typescript-estree\": {\r\n      \"version\": \"6.21.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-6.21.0.tgz\",\r\n      \"integrity\": \"sha512-6npJTkZcO+y2/kr+z0hc4HwNfrrP4kNYh57ek7yCNlrBjWQ1Y0OS7jiZTkgumrvkX5HkEKXFZkkdFNkaW2wmUQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@typescript-eslint/types\": \"6.21.0\",\r\n        \"@typescript-eslint/visitor-keys\": \"6.21.0\",\r\n        \"debug\": \"^4.3.4\",\r\n        \"globby\": \"^11.1.0\",\r\n        \"is-glob\": \"^4.0.3\",\r\n        \"minimatch\": \"9.0.3\",\r\n        \"semver\": \"^7.5.4\",\r\n        \"ts-api-utils\": \"^1.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^16.0.0 || >=18.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"type\": \"opencollective\",\r\n        \"url\": \"https://opencollective.com/typescript-eslint\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"typescript\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"node_modules/@typescript-eslint/utils\": {\r\n      \"version\": \"6.21.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@typescript-eslint/utils/-/utils-6.21.0.tgz\",\r\n      \"integrity\": \"sha512-NfWVaC8HP9T8cbKQxHcsJBY5YE1O33+jpMwN45qzWWaPDZgLIbo12toGMWnmhvCpd3sIxkpDw3Wv1B3dYrbDQQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@eslint-community/eslint-utils\": \"^4.4.0\",\r\n        \"@types/json-schema\": \"^7.0.12\",\r\n        \"@types/semver\": \"^7.5.0\",\r\n        \"@typescript-eslint/scope-manager\": \"6.21.0\",\r\n        \"@typescript-eslint/types\": \"6.21.0\",\r\n        \"@typescript-eslint/typescript-estree\": \"6.21.0\",\r\n        \"semver\": \"^7.5.4\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^16.0.0 || >=18.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"type\": \"opencollective\",\r\n        \"url\": \"https://opencollective.com/typescript-eslint\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"eslint\": \"^7.0.0 || ^8.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/@typescript-eslint/visitor-keys\": {\r\n      \"version\": \"6.21.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-6.21.0.tgz\",\r\n      \"integrity\": \"sha512-JJtkDduxLi9bivAB+cYOVMtbkqdPOhZ+ZI5LC47MIRrDV4Yn2o+ZnW10Nkmr28xRpSpdJ6Sm42Hjf2+REYXm0A==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@typescript-eslint/types\": \"6.21.0\",\r\n        \"eslint-visitor-keys\": \"^3.4.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^16.0.0 || >=18.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"type\": \"opencollective\",\r\n        \"url\": \"https://opencollective.com/typescript-eslint\"\r\n      }\r\n    },\r\n    \"node_modules/@ungap/structured-clone\": {\r\n      \"version\": \"1.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@ungap/structured-clone/-/structured-clone-1.2.0.tgz\",\r\n      \"integrity\": \"sha512-zuVdFrMJiuCDQUMCzQaD6KL28MjnqqN8XnAqiEq9PNm/hCPTSGfrXCOfwj1ow4LFb/tNymJPwsNbVePc1xFqrQ==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/@webassemblyjs/ast\": {\r\n      \"version\": \"1.12.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/ast/-/ast-1.12.1.tgz\",\r\n      \"integrity\": \"sha512-EKfMUOPRRUTy5UII4qJDGPpqfwjOmZ5jeGFwid9mnoqIFK+e0vqoi1qH56JpmZSzEL53jKnNzScdmftJyG5xWg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@webassemblyjs/helper-numbers\": \"1.11.6\",\r\n        \"@webassemblyjs/helper-wasm-bytecode\": \"1.11.6\"\r\n      }\r\n    },\r\n    \"node_modules/@webassemblyjs/floating-point-hex-parser\": {\r\n      \"version\": \"1.11.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/floating-point-hex-parser/-/floating-point-hex-parser-1.11.6.tgz\",\r\n      \"integrity\": \"sha512-ejAj9hfRJ2XMsNHk/v6Fu2dGS+i4UaXBXGemOfQ/JfQ6mdQg/WXtwleQRLLS4OvfDhv8rYnVwH27YJLMyYsxhw==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/@webassemblyjs/helper-api-error\": {\r\n      \"version\": \"1.11.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/helper-api-error/-/helper-api-error-1.11.6.tgz\",\r\n      \"integrity\": \"sha512-o0YkoP4pVu4rN8aTJgAyj9hC2Sv5UlkzCHhxqWj8butaLvnpdc2jOwh4ewE6CX0txSfLn/UYaV/pheS2Txg//Q==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/@webassemblyjs/helper-buffer\": {\r\n      \"version\": \"1.12.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/helper-buffer/-/helper-buffer-1.12.1.tgz\",\r\n      \"integrity\": \"sha512-nzJwQw99DNDKr9BVCOZcLuJJUlqkJh+kVzVl6Fmq/tI5ZtEyWT1KZMyOXltXLZJmDtvLCDgwsyrkohEtopTXCw==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/@webassemblyjs/helper-numbers\": {\r\n      \"version\": \"1.11.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/helper-numbers/-/helper-numbers-1.11.6.tgz\",\r\n      \"integrity\": \"sha512-vUIhZ8LZoIWHBohiEObxVm6hwP034jwmc9kuq5GdHZH0wiLVLIPcMCdpJzG4C11cHoQ25TFIQj9kaVADVX7N3g==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@webassemblyjs/floating-point-hex-parser\": \"1.11.6\",\r\n        \"@webassemblyjs/helper-api-error\": \"1.11.6\",\r\n        \"@xtuc/long\": \"4.2.2\"\r\n      }\r\n    },\r\n    \"node_modules/@webassemblyjs/helper-wasm-bytecode\": {\r\n      \"version\": \"1.11.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/helper-wasm-bytecode/-/helper-wasm-bytecode-1.11.6.tgz\",\r\n      \"integrity\": \"sha512-sFFHKwcmBprO9e7Icf0+gddyWYDViL8bpPjJJl0WHxCdETktXdmtWLGVzoHbqUcY4Be1LkNfwTmXOJUFZYSJdA==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/@webassemblyjs/helper-wasm-section\": {\r\n      \"version\": \"1.12.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/helper-wasm-section/-/helper-wasm-section-1.12.1.tgz\",\r\n      \"integrity\": \"sha512-Jif4vfB6FJlUlSbgEMHUyk1j234GTNG9dBJ4XJdOySoj518Xj0oGsNi59cUQF4RRMS9ouBUxDDdyBVfPTypa5g==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@webassemblyjs/ast\": \"1.12.1\",\r\n        \"@webassemblyjs/helper-buffer\": \"1.12.1\",\r\n        \"@webassemblyjs/helper-wasm-bytecode\": \"1.11.6\",\r\n        \"@webassemblyjs/wasm-gen\": \"1.12.1\"\r\n      }\r\n    },\r\n    \"node_modules/@webassemblyjs/ieee754\": {\r\n      \"version\": \"1.11.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/ieee754/-/ieee754-1.11.6.tgz\",\r\n      \"integrity\": \"sha512-LM4p2csPNvbij6U1f19v6WR56QZ8JcHg3QIJTlSwzFcmx6WSORicYj6I63f9yU1kEUtrpG+kjkiIAkevHpDXrg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@xtuc/ieee754\": \"^1.2.0\"\r\n      }\r\n    },\r\n    \"node_modules/@webassemblyjs/leb128\": {\r\n      \"version\": \"1.11.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/leb128/-/leb128-1.11.6.tgz\",\r\n      \"integrity\": \"sha512-m7a0FhE67DQXgouf1tbN5XQcdWoNgaAuoULHIfGFIEVKA6tu/edls6XnIlkmS6FrXAquJRPni3ZZKjw6FSPjPQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@xtuc/long\": \"4.2.2\"\r\n      }\r\n    },\r\n    \"node_modules/@webassemblyjs/utf8\": {\r\n      \"version\": \"1.11.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/utf8/-/utf8-1.11.6.tgz\",\r\n      \"integrity\": \"sha512-vtXf2wTQ3+up9Zsg8sa2yWiQpzSsMyXj0qViVP6xKGCUT8p8YJ6HqI7l5eCnWx1T/FYdsv07HQs2wTFbbof/RA==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/@webassemblyjs/wasm-edit\": {\r\n      \"version\": \"1.12.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/wasm-edit/-/wasm-edit-1.12.1.tgz\",\r\n      \"integrity\": \"sha512-1DuwbVvADvS5mGnXbE+c9NfA8QRcZ6iKquqjjmR10k6o+zzsRVesil54DKexiowcFCPdr/Q0qaMgB01+SQ1u6g==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@webassemblyjs/ast\": \"1.12.1\",\r\n        \"@webassemblyjs/helper-buffer\": \"1.12.1\",\r\n        \"@webassemblyjs/helper-wasm-bytecode\": \"1.11.6\",\r\n        \"@webassemblyjs/helper-wasm-section\": \"1.12.1\",\r\n        \"@webassemblyjs/wasm-gen\": \"1.12.1\",\r\n        \"@webassemblyjs/wasm-opt\": \"1.12.1\",\r\n        \"@webassemblyjs/wasm-parser\": \"1.12.1\",\r\n        \"@webassemblyjs/wast-printer\": \"1.12.1\"\r\n      }\r\n    },\r\n    \"node_modules/@webassemblyjs/wasm-gen\": {\r\n      \"version\": \"1.12.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/wasm-gen/-/wasm-gen-1.12.1.tgz\",\r\n      \"integrity\": \"sha512-TDq4Ojh9fcohAw6OIMXqiIcTq5KUXTGRkVxbSo1hQnSy6lAM5GSdfwWeSxpAo0YzgsgF182E/U0mDNhuA0tW7w==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@webassemblyjs/ast\": \"1.12.1\",\r\n        \"@webassemblyjs/helper-wasm-bytecode\": \"1.11.6\",\r\n        \"@webassemblyjs/ieee754\": \"1.11.6\",\r\n        \"@webassemblyjs/leb128\": \"1.11.6\",\r\n        \"@webassemblyjs/utf8\": \"1.11.6\"\r\n      }\r\n    },\r\n    \"node_modules/@webassemblyjs/wasm-opt\": {\r\n      \"version\": \"1.12.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/wasm-opt/-/wasm-opt-1.12.1.tgz\",\r\n      \"integrity\": \"sha512-Jg99j/2gG2iaz3hijw857AVYekZe2SAskcqlWIZXjji5WStnOpVoat3gQfT/Q5tb2djnCjBtMocY/Su1GfxPBg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@webassemblyjs/ast\": \"1.12.1\",\r\n        \"@webassemblyjs/helper-buffer\": \"1.12.1\",\r\n        \"@webassemblyjs/wasm-gen\": \"1.12.1\",\r\n        \"@webassemblyjs/wasm-parser\": \"1.12.1\"\r\n      }\r\n    },\r\n    \"node_modules/@webassemblyjs/wasm-parser\": {\r\n      \"version\": \"1.12.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/wasm-parser/-/wasm-parser-1.12.1.tgz\",\r\n      \"integrity\": \"sha512-xikIi7c2FHXysxXe3COrVUPSheuBtpcfhbpFj4gmu7KRLYOzANztwUU0IbsqvMqzuNK2+glRGWCEqZo1WCLyAQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@webassemblyjs/ast\": \"1.12.1\",\r\n        \"@webassemblyjs/helper-api-error\": \"1.11.6\",\r\n        \"@webassemblyjs/helper-wasm-bytecode\": \"1.11.6\",\r\n        \"@webassemblyjs/ieee754\": \"1.11.6\",\r\n        \"@webassemblyjs/leb128\": \"1.11.6\",\r\n        \"@webassemblyjs/utf8\": \"1.11.6\"\r\n      }\r\n    },\r\n    \"node_modules/@webassemblyjs/wast-printer\": {\r\n      \"version\": \"1.12.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/@webassemblyjs/wast-printer/-/wast-printer-1.12.1.tgz\",\r\n      \"integrity\": \"sha512-+X4WAlOisVWQMikjbcvY2e0rwPsKQ9F688lksZhBcPycBBuii3O7m8FACbDMWDojpAqvjIncrG8J0XHKyQfVeA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@webassemblyjs/ast\": \"1.12.1\",\r\n        \"@xtuc/long\": \"4.2.2\"\r\n      }\r\n    },\r\n    \"node_modules/@xtuc/ieee754\": {\r\n      \"version\": \"1.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/@xtuc/ieee754/-/ieee754-1.2.0.tgz\",\r\n      \"integrity\": \"sha512-DX8nKgqcGwsc0eJSqYt5lwP4DH5FlHnmuWWBRy7X0NcaGR0ZtuyeESgMwTYVEtxmsNGY+qit4QYT/MIYTOTPeA==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/@xtuc/long\": {\r\n      \"version\": \"4.2.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/@xtuc/long/-/long-4.2.2.tgz\",\r\n      \"integrity\": \"sha512-NuHqBY1PB/D8xU6s/thBgOAiAP7HOYDQ32+BFZILJ8ivkUkAHQnWfn6WhL79Owj1qmUnoN/YPhktdIoucipkAQ==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/abbrev\": {\r\n      \"version\": \"1.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz\",\r\n      \"integrity\": \"sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q==\"\r\n    },\r\n    \"node_modules/accepts\": {\r\n      \"version\": \"1.3.8\",\r\n      \"resolved\": \"https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz\",\r\n      \"integrity\": \"sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==\",\r\n      \"dependencies\": {\r\n        \"mime-types\": \"~2.1.34\",\r\n        \"negotiator\": \"0.6.3\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/acorn\": {\r\n      \"version\": \"8.14.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/acorn/-/acorn-8.14.0.tgz\",\r\n      \"integrity\": \"sha512-cl669nCJTZBsL97OF4kUQm5g5hC2uihk0NxY3WENAC0TYdILVkAyHymAntgxGkl7K+t0cXIrH5siy5S4XkFycA==\",\r\n      \"devOptional\": true,\r\n      \"bin\": {\r\n        \"acorn\": \"bin/acorn\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=0.4.0\"\r\n      }\r\n    },\r\n    \"node_modules/acorn-import-attributes\": {\r\n      \"version\": \"1.9.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/acorn-import-attributes/-/acorn-import-attributes-1.9.5.tgz\",\r\n      \"integrity\": \"sha512-n02Vykv5uA3eHGM/Z2dQrcD56kL8TyDb2p1+0P83PClMnC/nc+anbQRhIOWnSq4Ke/KvDPrY3C9hDtC/A3eHnQ==\",\r\n      \"dev\": true,\r\n      \"peerDependencies\": {\r\n        \"acorn\": \"^8\"\r\n      }\r\n    },\r\n    \"node_modules/acorn-jsx\": {\r\n      \"version\": \"5.3.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz\",\r\n      \"integrity\": \"sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==\",\r\n      \"dev\": true,\r\n      \"peerDependencies\": {\r\n        \"acorn\": \"^6.0.0 || ^7.0.0 || ^8.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/acorn-walk\": {\r\n      \"version\": \"8.3.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.3.4.tgz\",\r\n      \"integrity\": \"sha512-ueEepnujpqee2o5aIYnvHU6C0A42MNdsIDeqy5BydrkuC5R1ZuUFnm27EeFJGoEHJQgn3uleRvmTXaJgfXbt4g==\",\r\n      \"devOptional\": true,\r\n      \"dependencies\": {\r\n        \"acorn\": \"^8.11.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=0.4.0\"\r\n      }\r\n    },\r\n    \"node_modules/agent-base\": {\r\n      \"version\": \"6.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz\",\r\n      \"integrity\": \"sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==\",\r\n      \"dependencies\": {\r\n        \"debug\": \"4\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 6.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/ajv\": {\r\n      \"version\": \"8.12.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/ajv/-/ajv-8.12.0.tgz\",\r\n      \"integrity\": \"sha512-sRu1kpcO9yLtYxBKvqfTeh9KzZEwO3STyX1HT+4CaDzC6HpTGYhIhPIzj9XuKU7KYDwnaeh5hcOwjy1QuJzBPA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"fast-deep-equal\": \"^3.1.1\",\r\n        \"json-schema-traverse\": \"^1.0.0\",\r\n        \"require-from-string\": \"^2.0.2\",\r\n        \"uri-js\": \"^4.2.2\"\r\n      },\r\n      \"funding\": {\r\n        \"type\": \"github\",\r\n        \"url\": \"https://github.com/sponsors/epoberezkin\"\r\n      }\r\n    },\r\n    \"node_modules/ajv-formats\": {\r\n      \"version\": \"2.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/ajv-formats/-/ajv-formats-2.1.1.tgz\",\r\n      \"integrity\": \"sha512-Wx0Kx52hxE7C18hkMEggYlEifqWZtYaRgouJor+WMdPnQyEK13vgEWyVNup7SoeeoLMsr4kf5h6dOW11I15MUA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"ajv\": \"^8.0.0\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"ajv\": \"^8.0.0\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"ajv\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"node_modules/ansi-colors\": {\r\n      \"version\": \"4.1.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/ansi-colors/-/ansi-colors-4.1.3.tgz\",\r\n      \"integrity\": \"sha512-/6w/C21Pm1A7aZitlI5Ni/2J6FFQN8i1Cvz3kHABAAbw93v/NlvKdVOqz7CCWz/3iv/JplRSEEZ83XION15ovw==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=6\"\r\n      }\r\n    },\r\n    \"node_modules/ansi-escapes\": {\r\n      \"version\": \"4.3.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz\",\r\n      \"integrity\": \"sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"type-fest\": \"^0.21.3\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/ansi-escapes/node_modules/type-fest\": {\r\n      \"version\": \"0.21.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/type-fest/-/type-fest-0.21.3.tgz\",\r\n      \"integrity\": \"sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/ansi-regex\": {\r\n      \"version\": \"5.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz\",\r\n      \"integrity\": \"sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==\",\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/ansi-styles\": {\r\n      \"version\": \"4.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz\",\r\n      \"integrity\": \"sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==\",\r\n      \"dependencies\": {\r\n        \"color-convert\": \"^2.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/chalk/ansi-styles?sponsor=1\"\r\n      }\r\n    },\r\n    \"node_modules/any-promise\": {\r\n      \"version\": \"1.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/any-promise/-/any-promise-1.3.0.tgz\",\r\n      \"integrity\": \"sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==\"\r\n    },\r\n    \"node_modules/anymatch\": {\r\n      \"version\": \"3.1.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz\",\r\n      \"integrity\": \"sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"normalize-path\": \"^3.0.0\",\r\n        \"picomatch\": \"^2.0.4\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 8\"\r\n      }\r\n    },\r\n    \"node_modules/anymatch/node_modules/picomatch\": {\r\n      \"version\": \"2.3.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz\",\r\n      \"integrity\": \"sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=8.6\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/jonschlinkert\"\r\n      }\r\n    },\r\n    \"node_modules/app-root-path\": {\r\n      \"version\": \"3.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/app-root-path/-/app-root-path-3.1.0.tgz\",\r\n      \"integrity\": \"sha512-biN3PwB2gUtjaYy/isrU3aNWI5w+fAfvHkSvCKeQGxhmYpwKFUxudR3Yya+KqVRHBmEDYh+/lTozYCFbmzX4nA==\",\r\n      \"engines\": {\r\n        \"node\": \">= 6.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/append-field\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/append-field/-/append-field-1.0.0.tgz\",\r\n      \"integrity\": \"sha512-klpgFSWLW1ZEs8svjfb7g4qWY0YS5imI82dTg+QahUvJ8YqAY0P10Uk8tTyh9ZGuYEZEMaeJYCF5BFuX552hsw==\"\r\n    },\r\n    \"node_modules/aproba\": {\r\n      \"version\": \"2.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/aproba/-/aproba-2.0.0.tgz\",\r\n      \"integrity\": \"sha512-lYe4Gx7QT+MKGbDsA+Z+he/Wtef0BiwDOlK/XkBrdfsh9J/jPPXbX0tE9x9cl27Tmu5gg3QUbUrQYa/y+KOHPQ==\"\r\n    },\r\n    \"node_modules/are-we-there-yet\": {\r\n      \"version\": \"2.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/are-we-there-yet/-/are-we-there-yet-2.0.0.tgz\",\r\n      \"integrity\": \"sha512-Ci/qENmwHnsYo9xKIcUJN5LeDKdJ6R1Z1j9V/J5wyq8nh/mYPEpIKJbBZXtZjG04HiK7zV/p6Vs9952MrMeUIw==\",\r\n      \"deprecated\": \"This package is no longer supported.\",\r\n      \"dependencies\": {\r\n        \"delegates\": \"^1.0.0\",\r\n        \"readable-stream\": \"^3.6.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      }\r\n    },\r\n    \"node_modules/are-we-there-yet/node_modules/readable-stream\": {\r\n      \"version\": \"3.6.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz\",\r\n      \"integrity\": \"sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==\",\r\n      \"dependencies\": {\r\n        \"inherits\": \"^2.0.3\",\r\n        \"string_decoder\": \"^1.1.1\",\r\n        \"util-deprecate\": \"^1.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 6\"\r\n      }\r\n    },\r\n    \"node_modules/arg\": {\r\n      \"version\": \"4.1.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/arg/-/arg-4.1.3.tgz\",\r\n      \"integrity\": \"sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA==\",\r\n      \"devOptional\": true\r\n    },\r\n    \"node_modules/argparse\": {\r\n      \"version\": \"2.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz\",\r\n      \"integrity\": \"sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==\"\r\n    },\r\n    \"node_modules/array-flatten\": {\r\n      \"version\": \"1.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz\",\r\n      \"integrity\": \"sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==\"\r\n    },\r\n    \"node_modules/array-timsort\": {\r\n      \"version\": \"1.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/array-timsort/-/array-timsort-1.0.3.tgz\",\r\n      \"integrity\": \"sha512-/+3GRL7dDAGEfM6TseQk/U+mi18TU2Ms9I3UlLdUMhz2hbvGNTKdj9xniwXfUqgYhHxRx0+8UnKkvlNwVU+cWQ==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/array-union\": {\r\n      \"version\": \"2.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/array-union/-/array-union-2.1.0.tgz\",\r\n      \"integrity\": \"sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/asap\": {\r\n      \"version\": \"2.0.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/asap/-/asap-2.0.6.tgz\",\r\n      \"integrity\": \"sha512-BSHWgDSAiKs50o2Re8ppvp3seVHXSRM44cdSsT9FfNEUUZLOGWVCsiWaRPWM1Znn+mqZ1OfVZ3z3DWEzSp7hRA==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/async\": {\r\n      \"version\": \"3.2.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/async/-/async-3.2.6.tgz\",\r\n      \"integrity\": \"sha512-htCUDlxyyCLMgaM3xXg0C0LW2xqfuQ6p05pCEIsXuyQ+a1koYKTuBMzRNwmybfLgvJDMd0r1LTn4+E0Ti6C2AA==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/asynckit\": {\r\n      \"version\": \"0.4.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz\",\r\n      \"integrity\": \"sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==\"\r\n    },\r\n    \"node_modules/aws-ssl-profiles\": {\r\n      \"version\": \"1.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/aws-ssl-profiles/-/aws-ssl-profiles-1.1.2.tgz\",\r\n      \"integrity\": \"sha512-NZKeq9AfyQvEeNlN0zSYAaWrmBffJh3IELMZfRpJVWgrpEbtEpnjvzqBPf+mxoI287JohRDoa+/nsfqqiZmF6g==\",\r\n      \"engines\": {\r\n        \"node\": \">= 6.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/axios\": {\r\n      \"version\": \"1.7.9\",\r\n      \"resolved\": \"https://registry.npmjs.org/axios/-/axios-1.7.9.tgz\",\r\n      \"integrity\": \"sha512-LhLcE7Hbiryz8oMDdDptSrWowmB4Bl6RCt6sIJKpRB4XtVf0iEgewX3au/pJqm+Py1kCASkb/FFKjxQaLtxJvw==\",\r\n      \"dependencies\": {\r\n        \"follow-redirects\": \"^1.15.6\",\r\n        \"form-data\": \"^4.0.0\",\r\n        \"proxy-from-env\": \"^1.1.0\"\r\n      }\r\n    },\r\n    \"node_modules/babel-jest\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/babel-jest/-/babel-jest-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-BrvGY3xZSwEcCzKvKsCi2GgHqDqsYkOP4/by5xCgIwGXQxIEh+8ew3gmrE1y7XRR6LHZIj6yLYnUi/mm2KXKBg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@jest/transform\": \"^29.7.0\",\r\n        \"@types/babel__core\": \"^7.1.14\",\r\n        \"babel-plugin-istanbul\": \"^6.1.1\",\r\n        \"babel-preset-jest\": \"^29.6.3\",\r\n        \"chalk\": \"^4.0.0\",\r\n        \"graceful-fs\": \"^4.2.9\",\r\n        \"slash\": \"^3.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@babel/core\": \"^7.8.0\"\r\n      }\r\n    },\r\n    \"node_modules/babel-plugin-istanbul\": {\r\n      \"version\": \"6.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/babel-plugin-istanbul/-/babel-plugin-istanbul-6.1.1.tgz\",\r\n      \"integrity\": \"sha512-Y1IQok9821cC9onCx5otgFfRm7Lm+I+wwxOx738M/WLPZ9Q42m4IG5W0FNX8WLL2gYMZo3JkuXIH2DOpWM+qwA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/helper-plugin-utils\": \"^7.0.0\",\r\n        \"@istanbuljs/load-nyc-config\": \"^1.0.0\",\r\n        \"@istanbuljs/schema\": \"^0.1.2\",\r\n        \"istanbul-lib-instrument\": \"^5.0.4\",\r\n        \"test-exclude\": \"^6.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/babel-plugin-istanbul/node_modules/istanbul-lib-instrument\": {\r\n      \"version\": \"5.2.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/istanbul-lib-instrument/-/istanbul-lib-instrument-5.2.1.tgz\",\r\n      \"integrity\": \"sha512-pzqtp31nLv/XFOzXGuvhCb8qhjmTVo5vjVk19XE4CRlSWz0KoeJ3bw9XsA7nOp9YBf4qHjwBxkDzKcME/J29Yg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/core\": \"^7.12.3\",\r\n        \"@babel/parser\": \"^7.14.7\",\r\n        \"@istanbuljs/schema\": \"^0.1.2\",\r\n        \"istanbul-lib-coverage\": \"^3.2.0\",\r\n        \"semver\": \"^6.3.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/babel-plugin-istanbul/node_modules/semver\": {\r\n      \"version\": \"6.3.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/semver/-/semver-6.3.1.tgz\",\r\n      \"integrity\": \"sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==\",\r\n      \"dev\": true,\r\n      \"bin\": {\r\n        \"semver\": \"bin/semver.js\"\r\n      }\r\n    },\r\n    \"node_modules/babel-plugin-jest-hoist\": {\r\n      \"version\": \"29.6.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/babel-plugin-jest-hoist/-/babel-plugin-jest-hoist-29.6.3.tgz\",\r\n      \"integrity\": \"sha512-ESAc/RJvGTFEzRwOTT4+lNDk/GNHMkKbNzsvT0qKRfDyyYTskxB5rnU2njIDYVxXCBHHEI1c0YwHob3WaYujOg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/template\": \"^7.3.3\",\r\n        \"@babel/types\": \"^7.3.3\",\r\n        \"@types/babel__core\": \"^7.1.14\",\r\n        \"@types/babel__traverse\": \"^7.0.6\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/babel-preset-current-node-syntax\": {\r\n      \"version\": \"1.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/babel-preset-current-node-syntax/-/babel-preset-current-node-syntax-1.1.0.tgz\",\r\n      \"integrity\": \"sha512-ldYss8SbBlWva1bs28q78Ju5Zq1F+8BrqBZZ0VFhLBvhh6lCpC2o3gDJi/5DRLs9FgYZCnmPYIVFU4lRXCkyUw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/plugin-syntax-async-generators\": \"^7.8.4\",\r\n        \"@babel/plugin-syntax-bigint\": \"^7.8.3\",\r\n        \"@babel/plugin-syntax-class-properties\": \"^7.12.13\",\r\n        \"@babel/plugin-syntax-class-static-block\": \"^7.14.5\",\r\n        \"@babel/plugin-syntax-import-attributes\": \"^7.24.7\",\r\n        \"@babel/plugin-syntax-import-meta\": \"^7.10.4\",\r\n        \"@babel/plugin-syntax-json-strings\": \"^7.8.3\",\r\n        \"@babel/plugin-syntax-logical-assignment-operators\": \"^7.10.4\",\r\n        \"@babel/plugin-syntax-nullish-coalescing-operator\": \"^7.8.3\",\r\n        \"@babel/plugin-syntax-numeric-separator\": \"^7.10.4\",\r\n        \"@babel/plugin-syntax-object-rest-spread\": \"^7.8.3\",\r\n        \"@babel/plugin-syntax-optional-catch-binding\": \"^7.8.3\",\r\n        \"@babel/plugin-syntax-optional-chaining\": \"^7.8.3\",\r\n        \"@babel/plugin-syntax-private-property-in-object\": \"^7.14.5\",\r\n        \"@babel/plugin-syntax-top-level-await\": \"^7.14.5\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@babel/core\": \"^7.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/babel-preset-jest\": {\r\n      \"version\": \"29.6.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/babel-preset-jest/-/babel-preset-jest-29.6.3.tgz\",\r\n      \"integrity\": \"sha512-0B3bhxR6snWXJZtR/RliHTDPRgn1sNHOR0yVtq/IiQFyuOVjFS+wuio/R4gSNkyYmKmJB4wGZv2NZanmKmTnNA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"babel-plugin-jest-hoist\": \"^29.6.3\",\r\n        \"babel-preset-current-node-syntax\": \"^1.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@babel/core\": \"^7.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/balanced-match\": {\r\n      \"version\": \"1.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz\",\r\n      \"integrity\": \"sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==\"\r\n    },\r\n    \"node_modules/base64-js\": {\r\n      \"version\": \"1.5.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz\",\r\n      \"integrity\": \"sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==\",\r\n      \"funding\": [\r\n        {\r\n          \"type\": \"github\",\r\n          \"url\": \"https://github.com/sponsors/feross\"\r\n        },\r\n        {\r\n          \"type\": \"patreon\",\r\n          \"url\": \"https://www.patreon.com/feross\"\r\n        },\r\n        {\r\n          \"type\": \"consulting\",\r\n          \"url\": \"https://feross.org/support\"\r\n        }\r\n      ]\r\n    },\r\n    \"node_modules/bcrypt\": {\r\n      \"version\": \"5.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/bcrypt/-/bcrypt-5.1.1.tgz\",\r\n      \"integrity\": \"sha512-AGBHOG5hPYZ5Xl9KXzU5iKq9516yEmvCKDg3ecP5kX2aB6UqTeXZxk2ELnDgDm6BQSMlLt9rDB4LoSMx0rYwww==\",\r\n      \"hasInstallScript\": true,\r\n      \"dependencies\": {\r\n        \"@mapbox/node-pre-gyp\": \"^1.0.11\",\r\n        \"node-addon-api\": \"^5.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 10.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/binary-extensions\": {\r\n      \"version\": \"2.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz\",\r\n      \"integrity\": \"sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/bl\": {\r\n      \"version\": \"4.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/bl/-/bl-4.1.0.tgz\",\r\n      \"integrity\": \"sha512-1W07cM9gS6DcLperZfFSj+bWLtaPGSOHWhPiGzXmvVJbRLdG82sH/Kn8EtW1VqWVA54AKf2h5k5BbnIbwF3h6w==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"buffer\": \"^5.5.0\",\r\n        \"inherits\": \"^2.0.4\",\r\n        \"readable-stream\": \"^3.4.0\"\r\n      }\r\n    },\r\n    \"node_modules/bl/node_modules/readable-stream\": {\r\n      \"version\": \"3.6.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz\",\r\n      \"integrity\": \"sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"inherits\": \"^2.0.3\",\r\n        \"string_decoder\": \"^1.1.1\",\r\n        \"util-deprecate\": \"^1.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 6\"\r\n      }\r\n    },\r\n    \"node_modules/body-parser\": {\r\n      \"version\": \"1.20.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/body-parser/-/body-parser-1.20.3.tgz\",\r\n      \"integrity\": \"sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==\",\r\n      \"dependencies\": {\r\n        \"bytes\": \"3.1.2\",\r\n        \"content-type\": \"~1.0.5\",\r\n        \"debug\": \"2.6.9\",\r\n        \"depd\": \"2.0.0\",\r\n        \"destroy\": \"1.2.0\",\r\n        \"http-errors\": \"2.0.0\",\r\n        \"iconv-lite\": \"0.4.24\",\r\n        \"on-finished\": \"2.4.1\",\r\n        \"qs\": \"6.13.0\",\r\n        \"raw-body\": \"2.5.2\",\r\n        \"type-is\": \"~1.6.18\",\r\n        \"unpipe\": \"1.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\",\r\n        \"npm\": \"1.2.8000 || >= 1.4.16\"\r\n      }\r\n    },\r\n    \"node_modules/body-parser/node_modules/debug\": {\r\n      \"version\": \"2.6.9\",\r\n      \"resolved\": \"https://registry.npmjs.org/debug/-/debug-2.6.9.tgz\",\r\n      \"integrity\": \"sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==\",\r\n      \"dependencies\": {\r\n        \"ms\": \"2.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/body-parser/node_modules/ms\": {\r\n      \"version\": \"2.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.0.0.tgz\",\r\n      \"integrity\": \"sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==\"\r\n    },\r\n    \"node_modules/brace-expansion\": {\r\n      \"version\": \"2.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz\",\r\n      \"integrity\": \"sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==\",\r\n      \"dependencies\": {\r\n        \"balanced-match\": \"^1.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/braces\": {\r\n      \"version\": \"3.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/braces/-/braces-3.0.3.tgz\",\r\n      \"integrity\": \"sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"fill-range\": \"^7.1.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/browserslist\": {\r\n      \"version\": \"4.24.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/browserslist/-/browserslist-4.24.2.tgz\",\r\n      \"integrity\": \"sha512-ZIc+Q62revdMcqC6aChtW4jz3My3klmCO1fEmINZY/8J3EpBg5/A/D0AKmBveUh6pgoeycoMkVMko84tuYS+Gg==\",\r\n      \"dev\": true,\r\n      \"funding\": [\r\n        {\r\n          \"type\": \"opencollective\",\r\n          \"url\": \"https://opencollective.com/browserslist\"\r\n        },\r\n        {\r\n          \"type\": \"tidelift\",\r\n          \"url\": \"https://tidelift.com/funding/github/npm/browserslist\"\r\n        },\r\n        {\r\n          \"type\": \"github\",\r\n          \"url\": \"https://github.com/sponsors/ai\"\r\n        }\r\n      ],\r\n      \"dependencies\": {\r\n        \"caniuse-lite\": \"^1.0.30001669\",\r\n        \"electron-to-chromium\": \"^1.5.41\",\r\n        \"node-releases\": \"^2.0.18\",\r\n        \"update-browserslist-db\": \"^1.1.1\"\r\n      },\r\n      \"bin\": {\r\n        \"browserslist\": \"cli.js\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7\"\r\n      }\r\n    },\r\n    \"node_modules/bs-logger\": {\r\n      \"version\": \"0.2.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/bs-logger/-/bs-logger-0.2.6.tgz\",\r\n      \"integrity\": \"sha512-pd8DCoxmbgc7hyPKOvxtqNcjYoOsABPQdcCUjGp3d42VR2CX1ORhk2A87oqqu5R1kk+76nsxZupkmyd+MVtCog==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"fast-json-stable-stringify\": \"2.x\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 6\"\r\n      }\r\n    },\r\n    \"node_modules/bser\": {\r\n      \"version\": \"2.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/bser/-/bser-2.1.1.tgz\",\r\n      \"integrity\": \"sha512-gQxTNE/GAfIIrmHLUE3oJyp5FO6HRBfhjnw4/wMmA63ZGDJnWBmgY/lyQBpnDUkGmAhbSe39tx2d/iTOAfglwQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"node-int64\": \"^0.4.0\"\r\n      }\r\n    },\r\n    \"node_modules/buffer\": {\r\n      \"version\": \"5.7.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/buffer/-/buffer-5.7.1.tgz\",\r\n      \"integrity\": \"sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==\",\r\n      \"dev\": true,\r\n      \"funding\": [\r\n        {\r\n          \"type\": \"github\",\r\n          \"url\": \"https://github.com/sponsors/feross\"\r\n        },\r\n        {\r\n          \"type\": \"patreon\",\r\n          \"url\": \"https://www.patreon.com/feross\"\r\n        },\r\n        {\r\n          \"type\": \"consulting\",\r\n          \"url\": \"https://feross.org/support\"\r\n        }\r\n      ],\r\n      \"dependencies\": {\r\n        \"base64-js\": \"^1.3.1\",\r\n        \"ieee754\": \"^1.1.13\"\r\n      }\r\n    },\r\n    \"node_modules/buffer-equal-constant-time\": {\r\n      \"version\": \"1.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz\",\r\n      \"integrity\": \"sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==\"\r\n    },\r\n    \"node_modules/buffer-from\": {\r\n      \"version\": \"1.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz\",\r\n      \"integrity\": \"sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==\"\r\n    },\r\n    \"node_modules/builder-pattern\": {\r\n      \"version\": \"2.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/builder-pattern/-/builder-pattern-2.2.0.tgz\",\r\n      \"integrity\": \"sha512-cES3qdeBzA4QyJi7rV/l/kAhIFX6AKo3vK66ZPXLNpjcQWCS8sjLKscly8imlfW2YPTo/hquMRMnaWpZ80Kj+g==\"\r\n    },\r\n    \"node_modules/busboy\": {\r\n      \"version\": \"1.6.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/busboy/-/busboy-1.6.0.tgz\",\r\n      \"integrity\": \"sha512-8SFQbg/0hQ9xy3UNTB0YEnsNBbWfhf7RtnzpL7TkBiTBRfrQ9Fxcnz7VJsleJpyp6rVLvXiuORqjlHi5q+PYuA==\",\r\n      \"dependencies\": {\r\n        \"streamsearch\": \"^1.1.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10.16.0\"\r\n      }\r\n    },\r\n    \"node_modules/bytes\": {\r\n      \"version\": \"3.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz\",\r\n      \"integrity\": \"sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\"\r\n      }\r\n    },\r\n    \"node_modules/call-bind\": {\r\n      \"version\": \"1.0.7\",\r\n      \"resolved\": \"https://registry.npmjs.org/call-bind/-/call-bind-1.0.7.tgz\",\r\n      \"integrity\": \"sha512-GHTSNSYICQ7scH7sZ+M2rFopRoLh8t2bLSW6BbgrtLsahOIB5iyAVJf9GjWK3cYTDaMj4XdBpM1cA6pIS0Kv2w==\",\r\n      \"dependencies\": {\r\n        \"es-define-property\": \"^1.0.0\",\r\n        \"es-errors\": \"^1.3.0\",\r\n        \"function-bind\": \"^1.1.2\",\r\n        \"get-intrinsic\": \"^1.2.4\",\r\n        \"set-function-length\": \"^1.2.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.4\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/ljharb\"\r\n      }\r\n    },\r\n    \"node_modules/callsites\": {\r\n      \"version\": \"3.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz\",\r\n      \"integrity\": \"sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=6\"\r\n      }\r\n    },\r\n    \"node_modules/camelcase\": {\r\n      \"version\": \"5.3.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/camelcase/-/camelcase-5.3.1.tgz\",\r\n      \"integrity\": \"sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=6\"\r\n      }\r\n    },\r\n    \"node_modules/caniuse-lite\": {\r\n      \"version\": \"1.0.30001676\",\r\n      \"resolved\": \"https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001676.tgz\",\r\n      \"integrity\": \"sha512-Qz6zwGCiPghQXGJvgQAem79esjitvJ+CxSbSQkW9H/UX5hg8XM88d4lp2W+MEQ81j+Hip58Il+jGVdazk1z9cw==\",\r\n      \"dev\": true,\r\n      \"funding\": [\r\n        {\r\n          \"type\": \"opencollective\",\r\n          \"url\": \"https://opencollective.com/browserslist\"\r\n        },\r\n        {\r\n          \"type\": \"tidelift\",\r\n          \"url\": \"https://tidelift.com/funding/github/npm/caniuse-lite\"\r\n        },\r\n        {\r\n          \"type\": \"github\",\r\n          \"url\": \"https://github.com/sponsors/ai\"\r\n        }\r\n      ]\r\n    },\r\n    \"node_modules/chalk\": {\r\n      \"version\": \"4.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz\",\r\n      \"integrity\": \"sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==\",\r\n      \"dependencies\": {\r\n        \"ansi-styles\": \"^4.1.0\",\r\n        \"supports-color\": \"^7.1.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/chalk/chalk?sponsor=1\"\r\n      }\r\n    },\r\n    \"node_modules/char-regex\": {\r\n      \"version\": \"1.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/char-regex/-/char-regex-1.0.2.tgz\",\r\n      \"integrity\": \"sha512-kWWXztvZ5SBQV+eRgKFeh8q5sLuZY2+8WUIzlxWVTg+oGwY14qylx1KbKzHd8P6ZYkAg0xyIDU9JMHhyJMZ1jw==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      }\r\n    },\r\n    \"node_modules/chardet\": {\r\n      \"version\": \"0.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/chardet/-/chardet-0.7.0.tgz\",\r\n      \"integrity\": \"sha512-mT8iDcrh03qDGRRmoA2hmBJnxpllMR+0/0qlzjqZES6NdiWDcZkCNAk4rPFZ9Q85r27unkiNNg8ZOiwZXBHwcA==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/chokidar\": {\r\n      \"version\": \"3.6.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz\",\r\n      \"integrity\": \"sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"anymatch\": \"~3.1.2\",\r\n        \"braces\": \"~3.0.2\",\r\n        \"glob-parent\": \"~5.1.2\",\r\n        \"is-binary-path\": \"~2.1.0\",\r\n        \"is-glob\": \"~4.0.1\",\r\n        \"normalize-path\": \"~3.0.0\",\r\n        \"readdirp\": \"~3.6.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 8.10.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://paulmillr.com/funding/\"\r\n      },\r\n      \"optionalDependencies\": {\r\n        \"fsevents\": \"~2.3.2\"\r\n      }\r\n    },\r\n    \"node_modules/chownr\": {\r\n      \"version\": \"2.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/chownr/-/chownr-2.0.0.tgz\",\r\n      \"integrity\": \"sha512-bIomtDF5KGpdogkLd9VspvFzk9KfpyyGlS8YFVZl7TGPBHL5snIOnxeshwVgPteQ9b4Eydl+pVbIyE1DcvCWgQ==\",\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      }\r\n    },\r\n    \"node_modules/chrome-trace-event\": {\r\n      \"version\": \"1.0.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/chrome-trace-event/-/chrome-trace-event-1.0.4.tgz\",\r\n      \"integrity\": \"sha512-rNjApaLzuwaOTjCiT8lSDdGN1APCiqkChLMJxJPWLunPAt5fy8xgU9/jNOchV84wfIxrA0lRQB7oCT8jrn/wrQ==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=6.0\"\r\n      }\r\n    },\r\n    \"node_modules/ci-info\": {\r\n      \"version\": \"3.9.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/ci-info/-/ci-info-3.9.0.tgz\",\r\n      \"integrity\": \"sha512-NIxF55hv4nSqQswkAeiOi1r83xy8JldOFDTWiug55KBu9Jnblncd2U6ViHmYgHf01TPZS77NJBhBMKdWj9HQMQ==\",\r\n      \"dev\": true,\r\n      \"funding\": [\r\n        {\r\n          \"type\": \"github\",\r\n          \"url\": \"https://github.com/sponsors/sibiraj-s\"\r\n        }\r\n      ],\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/cjs-module-lexer\": {\r\n      \"version\": \"1.4.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/cjs-module-lexer/-/cjs-module-lexer-1.4.1.tgz\",\r\n      \"integrity\": \"sha512-cuSVIHi9/9E/+821Qjdvngor+xpnlwnuwIyZOaLmHBVdXL+gP+I6QQB9VkO7RI77YIcTV+S1W9AreJ5eN63JBA==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/class-transformer\": {\r\n      \"version\": \"0.5.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/class-transformer/-/class-transformer-0.5.1.tgz\",\r\n      \"integrity\": \"sha512-SQa1Ws6hUbfC98vKGxZH3KFY0Y1lm5Zm0SY8XX9zbK7FJCyVEac3ATW0RIpwzW+oOfmHE5PMPufDG9hCfoEOMw==\"\r\n    },\r\n    \"node_modules/class-validator\": {\r\n      \"version\": \"0.14.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/class-validator/-/class-validator-0.14.1.tgz\",\r\n      \"integrity\": \"sha512-2VEG9JICxIqTpoK1eMzZqaV+u/EiwEJkMGzTrZf6sU/fwsnOITVgYJ8yojSy6CaXtO9V0Cc6ZQZ8h8m4UBuLwQ==\",\r\n      \"dependencies\": {\r\n        \"@types/validator\": \"^13.11.8\",\r\n        \"libphonenumber-js\": \"^1.10.53\",\r\n        \"validator\": \"^13.9.0\"\r\n      }\r\n    },\r\n    \"node_modules/cli-cursor\": {\r\n      \"version\": \"3.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/cli-cursor/-/cli-cursor-3.1.0.tgz\",\r\n      \"integrity\": \"sha512-I/zHAwsKf9FqGoXM4WWRACob9+SNukZTd94DWF57E4toouRulbCxcUh6RKUEOQlYTHJnzkPMySvPNaaSLNfLZw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"restore-cursor\": \"^3.1.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/cli-highlight\": {\r\n      \"version\": \"2.1.11\",\r\n      \"resolved\": \"https://registry.npmjs.org/cli-highlight/-/cli-highlight-2.1.11.tgz\",\r\n      \"integrity\": \"sha512-9KDcoEVwyUXrjcJNvHD0NFc/hiwe/WPVYIleQh2O1N2Zro5gWJZ/K+3DGn8w8P/F6FxOgzyC5bxDyHIgCSPhGg==\",\r\n      \"dependencies\": {\r\n        \"chalk\": \"^4.0.0\",\r\n        \"highlight.js\": \"^10.7.1\",\r\n        \"mz\": \"^2.4.0\",\r\n        \"parse5\": \"^5.1.1\",\r\n        \"parse5-htmlparser2-tree-adapter\": \"^6.0.0\",\r\n        \"yargs\": \"^16.0.0\"\r\n      },\r\n      \"bin\": {\r\n        \"highlight\": \"bin/highlight\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8.0.0\",\r\n        \"npm\": \">=5.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/cli-highlight/node_modules/cliui\": {\r\n      \"version\": \"7.0.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/cliui/-/cliui-7.0.4.tgz\",\r\n      \"integrity\": \"sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==\",\r\n      \"dependencies\": {\r\n        \"string-width\": \"^4.2.0\",\r\n        \"strip-ansi\": \"^6.0.0\",\r\n        \"wrap-ansi\": \"^7.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/cli-highlight/node_modules/wrap-ansi\": {\r\n      \"version\": \"7.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz\",\r\n      \"integrity\": \"sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==\",\r\n      \"dependencies\": {\r\n        \"ansi-styles\": \"^4.0.0\",\r\n        \"string-width\": \"^4.1.0\",\r\n        \"strip-ansi\": \"^6.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/chalk/wrap-ansi?sponsor=1\"\r\n      }\r\n    },\r\n    \"node_modules/cli-highlight/node_modules/yargs\": {\r\n      \"version\": \"16.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/yargs/-/yargs-16.2.0.tgz\",\r\n      \"integrity\": \"sha512-D1mvvtDG0L5ft/jGWkLpG1+m0eQxOfaBvTNELraWj22wSVUMWxZUvYgJYcKh6jGGIkJFhH4IZPQhR4TKpc8mBw==\",\r\n      \"dependencies\": {\r\n        \"cliui\": \"^7.0.2\",\r\n        \"escalade\": \"^3.1.1\",\r\n        \"get-caller-file\": \"^2.0.5\",\r\n        \"require-directory\": \"^2.1.1\",\r\n        \"string-width\": \"^4.2.0\",\r\n        \"y18n\": \"^5.0.5\",\r\n        \"yargs-parser\": \"^20.2.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      }\r\n    },\r\n    \"node_modules/cli-highlight/node_modules/yargs-parser\": {\r\n      \"version\": \"20.2.9\",\r\n      \"resolved\": \"https://registry.npmjs.org/yargs-parser/-/yargs-parser-20.2.9.tgz\",\r\n      \"integrity\": \"sha512-y11nGElTIV+CT3Zv9t7VKl+Q3hTQoT9a1Qzezhhl6Rp21gJ/IVTW7Z3y9EWXhuUBC2Shnf+DX0antecpAwSP8w==\",\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      }\r\n    },\r\n    \"node_modules/cli-spinners\": {\r\n      \"version\": \"2.9.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/cli-spinners/-/cli-spinners-2.9.2.tgz\",\r\n      \"integrity\": \"sha512-ywqV+5MmyL4E7ybXgKys4DugZbX0FC6LnwrhjuykIjnK9k8OQacQ7axGKnjDXWNhns0xot3bZI5h55H8yo9cJg==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=6\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/cli-table3\": {\r\n      \"version\": \"0.6.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/cli-table3/-/cli-table3-0.6.5.tgz\",\r\n      \"integrity\": \"sha512-+W/5efTR7y5HRD7gACw9yQjqMVvEMLBHmboM/kPWam+H+Hmyrgjh6YncVKK122YZkXrLudzTuAukUw9FnMf7IQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"string-width\": \"^4.2.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"10.* || >= 12.*\"\r\n      },\r\n      \"optionalDependencies\": {\r\n        \"@colors/colors\": \"1.5.0\"\r\n      }\r\n    },\r\n    \"node_modules/cli-width\": {\r\n      \"version\": \"3.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/cli-width/-/cli-width-3.0.0.tgz\",\r\n      \"integrity\": \"sha512-FxqpkPPwu1HjuN93Omfm4h8uIanXofW0RxVEW3k5RKx+mJJYSthzNhp32Kzxxy3YAEZ/Dc/EWN1vZRY0+kOhbw==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">= 10\"\r\n      }\r\n    },\r\n    \"node_modules/cliui\": {\r\n      \"version\": \"8.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz\",\r\n      \"integrity\": \"sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==\",\r\n      \"dependencies\": {\r\n        \"string-width\": \"^4.2.0\",\r\n        \"strip-ansi\": \"^6.0.1\",\r\n        \"wrap-ansi\": \"^7.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=12\"\r\n      }\r\n    },\r\n    \"node_modules/cliui/node_modules/wrap-ansi\": {\r\n      \"version\": \"7.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz\",\r\n      \"integrity\": \"sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==\",\r\n      \"dependencies\": {\r\n        \"ansi-styles\": \"^4.0.0\",\r\n        \"string-width\": \"^4.1.0\",\r\n        \"strip-ansi\": \"^6.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/chalk/wrap-ansi?sponsor=1\"\r\n      }\r\n    },\r\n    \"node_modules/clone\": {\r\n      \"version\": \"1.0.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/clone/-/clone-1.0.4.tgz\",\r\n      \"integrity\": \"sha512-JQHZ2QMW6l3aH/j6xCqQThY/9OH4D/9ls34cgkUBiEeocRTU04tHfKPBsUK1PqZCUQM7GiA0IIXJSuXHI64Kbg==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=0.8\"\r\n      }\r\n    },\r\n    \"node_modules/co\": {\r\n      \"version\": \"4.6.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/co/-/co-4.6.0.tgz\",\r\n      \"integrity\": \"sha512-QVb0dM5HvG+uaxitm8wONl7jltx8dqhfU33DcqtOZcLSVIKSDDLDi7+0LbAKiyI8hD9u42m2YxXSkMGWThaecQ==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"iojs\": \">= 1.0.0\",\r\n        \"node\": \">= 0.12.0\"\r\n      }\r\n    },\r\n    \"node_modules/collect-v8-coverage\": {\r\n      \"version\": \"1.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/collect-v8-coverage/-/collect-v8-coverage-1.0.2.tgz\",\r\n      \"integrity\": \"sha512-lHl4d5/ONEbLlJvaJNtsF/Lz+WvB07u2ycqTYbdrq7UypDXailES4valYb2eWiJFxZlVmpGekfqoxQhzyFdT4Q==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/color-convert\": {\r\n      \"version\": \"2.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz\",\r\n      \"integrity\": \"sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==\",\r\n      \"dependencies\": {\r\n        \"color-name\": \"~1.1.4\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=7.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/color-name\": {\r\n      \"version\": \"1.1.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz\",\r\n      \"integrity\": \"sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==\"\r\n    },\r\n    \"node_modules/color-support\": {\r\n      \"version\": \"1.1.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/color-support/-/color-support-1.1.3.tgz\",\r\n      \"integrity\": \"sha512-qiBjkpbMLO/HL68y+lh4q0/O1MZFj2RX6X/KmMa3+gJD3z+WwI1ZzDHysvqHGS3mP6mznPckpXmw1nI9cJjyRg==\",\r\n      \"bin\": {\r\n        \"color-support\": \"bin.js\"\r\n      }\r\n    },\r\n    \"node_modules/combined-stream\": {\r\n      \"version\": \"1.0.8\",\r\n      \"resolved\": \"https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz\",\r\n      \"integrity\": \"sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==\",\r\n      \"dependencies\": {\r\n        \"delayed-stream\": \"~1.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\"\r\n      }\r\n    },\r\n    \"node_modules/commander\": {\r\n      \"version\": \"4.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/commander/-/commander-4.1.1.tgz\",\r\n      \"integrity\": \"sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">= 6\"\r\n      }\r\n    },\r\n    \"node_modules/comment-json\": {\r\n      \"version\": \"4.2.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/comment-json/-/comment-json-4.2.5.tgz\",\r\n      \"integrity\": \"sha512-bKw/r35jR3HGt5PEPm1ljsQQGyCrR8sFGNiN5L+ykDHdpO8Smxkrkla9Yi6NkQyUrb8V54PGhfMs6NrIwtxtdw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"array-timsort\": \"^1.0.3\",\r\n        \"core-util-is\": \"^1.0.3\",\r\n        \"esprima\": \"^4.0.1\",\r\n        \"has-own-prop\": \"^2.0.0\",\r\n        \"repeat-string\": \"^1.6.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 6\"\r\n      }\r\n    },\r\n    \"node_modules/component-emitter\": {\r\n      \"version\": \"1.3.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/component-emitter/-/component-emitter-1.3.1.tgz\",\r\n      \"integrity\": \"sha512-T0+barUSQRTUQASh8bx02dl+DhF54GtIDY13Y3m9oWTklKbb3Wv974meRpeZ3lp1JpLVECWWNHC4vaG2XHXouQ==\",\r\n      \"dev\": true,\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/concat-map\": {\r\n      \"version\": \"0.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz\",\r\n      \"integrity\": \"sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==\"\r\n    },\r\n    \"node_modules/concat-stream\": {\r\n      \"version\": \"1.6.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/concat-stream/-/concat-stream-1.6.2.tgz\",\r\n      \"integrity\": \"sha512-27HBghJxjiZtIk3Ycvn/4kbJk/1uZuJFfuPEns6LaEvpvG1f0hTea8lilrouyo9mVc2GWdcEZ8OLoGmSADlrCw==\",\r\n      \"engines\": [\r\n        \"node >= 0.8\"\r\n      ],\r\n      \"dependencies\": {\r\n        \"buffer-from\": \"^1.0.0\",\r\n        \"inherits\": \"^2.0.3\",\r\n        \"readable-stream\": \"^2.2.2\",\r\n        \"typedarray\": \"^0.0.6\"\r\n      }\r\n    },\r\n    \"node_modules/consola\": {\r\n      \"version\": \"2.15.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/consola/-/consola-2.15.3.tgz\",\r\n      \"integrity\": \"sha512-9vAdYbHj6x2fLKC4+oPH0kFzY/orMZyG2Aj+kNylHxKGJ/Ed4dpNyAQYwJOdqO4zdM7XpVHmyejQDcQHrnuXbw==\"\r\n    },\r\n    \"node_modules/console-control-strings\": {\r\n      \"version\": \"1.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/console-control-strings/-/console-control-strings-1.1.0.tgz\",\r\n      \"integrity\": \"sha512-ty/fTekppD2fIwRvnZAVdeOiGd1c7YXEixbgJTNzqcxJWKQnjJ/V1bNEEE6hygpM3WjwHFUVK6HTjWSzV4a8sQ==\"\r\n    },\r\n    \"node_modules/content-disposition\": {\r\n      \"version\": \"0.5.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz\",\r\n      \"integrity\": \"sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==\",\r\n      \"dependencies\": {\r\n        \"safe-buffer\": \"5.2.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/content-type\": {\r\n      \"version\": \"1.0.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz\",\r\n      \"integrity\": \"sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/convert-source-map\": {\r\n      \"version\": \"2.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz\",\r\n      \"integrity\": \"sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/cookie\": {\r\n      \"version\": \"0.7.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/cookie/-/cookie-0.7.1.tgz\",\r\n      \"integrity\": \"sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/cookie-signature\": {\r\n      \"version\": \"1.0.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz\",\r\n      \"integrity\": \"sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==\"\r\n    },\r\n    \"node_modules/cookiejar\": {\r\n      \"version\": \"2.1.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/cookiejar/-/cookiejar-2.1.4.tgz\",\r\n      \"integrity\": \"sha512-LDx6oHrK+PhzLKJU9j5S7/Y3jM/mUHvD/DeI1WQmJn652iPC5Y4TBzC9l+5OMOXlyTTA+SmVUPm0HQUwpD5Jqw==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/core-util-is\": {\r\n      \"version\": \"1.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.3.tgz\",\r\n      \"integrity\": \"sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==\"\r\n    },\r\n    \"node_modules/cors\": {\r\n      \"version\": \"2.8.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/cors/-/cors-2.8.5.tgz\",\r\n      \"integrity\": \"sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==\",\r\n      \"dependencies\": {\r\n        \"object-assign\": \"^4\",\r\n        \"vary\": \"^1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.10\"\r\n      }\r\n    },\r\n    \"node_modules/cosmiconfig\": {\r\n      \"version\": \"8.3.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/cosmiconfig/-/cosmiconfig-8.3.6.tgz\",\r\n      \"integrity\": \"sha512-kcZ6+W5QzcJ3P1Mt+83OUv/oHFqZHIx8DuxG6eZ5RGMERoLqp4BuGjhHLYGK+Kf5XVkQvqBSmAy/nGWN3qDgEA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"import-fresh\": \"^3.3.0\",\r\n        \"js-yaml\": \"^4.1.0\",\r\n        \"parse-json\": \"^5.2.0\",\r\n        \"path-type\": \"^4.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=14\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/d-fischer\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"typescript\": \">=4.9.5\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"typescript\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"node_modules/create-jest\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/create-jest/-/create-jest-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-Adz2bdH0Vq3F53KEMJOoftQFutWCukm6J24wbPWRO4k1kMY7gS7ds/uoJkNuV8wDCtWWnuwGcJwpWcih+zEW1Q==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@jest/types\": \"^29.6.3\",\r\n        \"chalk\": \"^4.0.0\",\r\n        \"exit\": \"^0.1.2\",\r\n        \"graceful-fs\": \"^4.2.9\",\r\n        \"jest-config\": \"^29.7.0\",\r\n        \"jest-util\": \"^29.7.0\",\r\n        \"prompts\": \"^2.0.1\"\r\n      },\r\n      \"bin\": {\r\n        \"create-jest\": \"bin/create-jest.js\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/create-require\": {\r\n      \"version\": \"1.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/create-require/-/create-require-1.1.1.tgz\",\r\n      \"integrity\": \"sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ==\",\r\n      \"devOptional\": true\r\n    },\r\n    \"node_modules/cross-spawn\": {\r\n      \"version\": \"7.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz\",\r\n      \"integrity\": \"sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==\",\r\n      \"dependencies\": {\r\n        \"path-key\": \"^3.1.0\",\r\n        \"shebang-command\": \"^2.0.0\",\r\n        \"which\": \"^2.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 8\"\r\n      }\r\n    },\r\n    \"node_modules/dayjs\": {\r\n      \"version\": \"1.11.13\",\r\n      \"resolved\": \"https://registry.npmjs.org/dayjs/-/dayjs-1.11.13.tgz\",\r\n      \"integrity\": \"sha512-oaMBel6gjolK862uaPQOVTA7q3TZhuSvuMQAAglQDOWYO9A91IrAOUJEyKVlqJlHE0vq5p5UXxzdPfMH/x6xNg==\"\r\n    },\r\n    \"node_modules/debug\": {\r\n      \"version\": \"4.3.7\",\r\n      \"resolved\": \"https://registry.npmjs.org/debug/-/debug-4.3.7.tgz\",\r\n      \"integrity\": \"sha512-Er2nc/H7RrMXZBFCEim6TCmMk02Z8vLC2Rbi1KEBggpo0fS6l0S1nnapwmIi3yW/+GOJap1Krg4w0Hg80oCqgQ==\",\r\n      \"dependencies\": {\r\n        \"ms\": \"^2.1.3\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=6.0\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"supports-color\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"node_modules/dedent\": {\r\n      \"version\": \"1.5.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/dedent/-/dedent-1.5.3.tgz\",\r\n      \"integrity\": \"sha512-NHQtfOOW68WD8lgypbLA5oT+Bt0xXJhiYvoR6SmmNXZfpzOGXwdKWmcwG8N7PwVVWV3eF/68nmD9BaJSsTBhyQ==\",\r\n      \"dev\": true,\r\n      \"peerDependencies\": {\r\n        \"babel-plugin-macros\": \"^3.1.0\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"babel-plugin-macros\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"node_modules/deep-is\": {\r\n      \"version\": \"0.1.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz\",\r\n      \"integrity\": \"sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/deepmerge\": {\r\n      \"version\": \"4.3.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/deepmerge/-/deepmerge-4.3.1.tgz\",\r\n      \"integrity\": \"sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=0.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/defaults\": {\r\n      \"version\": \"1.0.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/defaults/-/defaults-1.0.4.tgz\",\r\n      \"integrity\": \"sha512-eFuaLoy/Rxalv2kr+lqMlUnrDWV+3j4pljOIJgLIhI058IQfWJ7vXhyEIHu+HtC738klGALYxOKDO0bQP3tg8A==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"clone\": \"^1.0.2\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/define-data-property\": {\r\n      \"version\": \"1.1.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.4.tgz\",\r\n      \"integrity\": \"sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==\",\r\n      \"dependencies\": {\r\n        \"es-define-property\": \"^1.0.0\",\r\n        \"es-errors\": \"^1.3.0\",\r\n        \"gopd\": \"^1.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.4\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/ljharb\"\r\n      }\r\n    },\r\n    \"node_modules/delayed-stream\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz\",\r\n      \"integrity\": \"sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==\",\r\n      \"engines\": {\r\n        \"node\": \">=0.4.0\"\r\n      }\r\n    },\r\n    \"node_modules/delegates\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/delegates/-/delegates-1.0.0.tgz\",\r\n      \"integrity\": \"sha512-bd2L678uiWATM6m5Z1VzNCErI3jiGzt6HGY8OVICs40JQq/HALfbyNJmp0UDakEY4pMMaN0Ly5om/B1VI/+xfQ==\"\r\n    },\r\n    \"node_modules/denque\": {\r\n      \"version\": \"2.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/denque/-/denque-2.1.0.tgz\",\r\n      \"integrity\": \"sha512-HVQE3AAb/pxF8fQAoiqpvg9i3evqug3hoiwakOyZAwJm+6vZehbkYXZ0l4JxS+I3QxM97v5aaRNhj8v5oBhekw==\",\r\n      \"engines\": {\r\n        \"node\": \">=0.10\"\r\n      }\r\n    },\r\n    \"node_modules/depd\": {\r\n      \"version\": \"2.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/depd/-/depd-2.0.0.tgz\",\r\n      \"integrity\": \"sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\"\r\n      }\r\n    },\r\n    \"node_modules/destroy\": {\r\n      \"version\": \"1.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz\",\r\n      \"integrity\": \"sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\",\r\n        \"npm\": \"1.2.8000 || >= 1.4.16\"\r\n      }\r\n    },\r\n    \"node_modules/detect-libc\": {\r\n      \"version\": \"2.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.3.tgz\",\r\n      \"integrity\": \"sha512-bwy0MGW55bG41VqxxypOsdSdGqLwXPI/focwgTYCFMbdUiBAxLg9CFzG08sz2aqzknwiX7Hkl0bQENjg8iLByw==\",\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/detect-newline\": {\r\n      \"version\": \"3.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/detect-newline/-/detect-newline-3.1.0.tgz\",\r\n      \"integrity\": \"sha512-TLz+x/vEXm/Y7P7wn1EJFNLxYpUD4TgMosxY6fAVJUnJMbupHBOncxyWUG9OpTaH9EBD7uFI5LfEgmMOc54DsA==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/dezalgo\": {\r\n      \"version\": \"1.0.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/dezalgo/-/dezalgo-1.0.4.tgz\",\r\n      \"integrity\": \"sha512-rXSP0bf+5n0Qonsb+SVVfNfIsimO4HEtmnIpPHY8Q1UCzKlQrDMfdobr8nJOOsRgWCyMRqeSBQzmWUMq7zvVig==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"asap\": \"^2.0.0\",\r\n        \"wrappy\": \"1\"\r\n      }\r\n    },\r\n    \"node_modules/diff\": {\r\n      \"version\": \"4.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/diff/-/diff-4.0.2.tgz\",\r\n      \"integrity\": \"sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A==\",\r\n      \"devOptional\": true,\r\n      \"engines\": {\r\n        \"node\": \">=0.3.1\"\r\n      }\r\n    },\r\n    \"node_modules/diff-sequences\": {\r\n      \"version\": \"29.6.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/diff-sequences/-/diff-sequences-29.6.3.tgz\",\r\n      \"integrity\": \"sha512-EjePK1srD3P08o2j4f0ExnylqRs5B9tJjcp9t1krH2qRi8CCdsYfwe9JgSLurFBWwq4uOlipzfk5fHNvwFKr8Q==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/dir-glob\": {\r\n      \"version\": \"3.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/dir-glob/-/dir-glob-3.0.1.tgz\",\r\n      \"integrity\": \"sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"path-type\": \"^4.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/doctrine\": {\r\n      \"version\": \"3.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/doctrine/-/doctrine-3.0.0.tgz\",\r\n      \"integrity\": \"sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"esutils\": \"^2.0.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=6.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/dotenv\": {\r\n      \"version\": \"16.4.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/dotenv/-/dotenv-16.4.5.tgz\",\r\n      \"integrity\": \"sha512-ZmdL2rui+eB2YwhsWzjInR8LldtZHGDoQ1ugH85ppHKwpUHL7j7rN0Ti9NCnGiQbhaZ11FpR+7ao1dNsmduNUg==\",\r\n      \"engines\": {\r\n        \"node\": \">=12\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://dotenvx.com\"\r\n      }\r\n    },\r\n    \"node_modules/dotenv-expand\": {\r\n      \"version\": \"10.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/dotenv-expand/-/dotenv-expand-10.0.0.tgz\",\r\n      \"integrity\": \"sha512-GopVGCpVS1UKH75VKHGuQFqS1Gusej0z4FyQkPdwjil2gNIv+LNsqBlboOzpJFZKVT95GkCyWJbBSdFEFUWI2A==\",\r\n      \"engines\": {\r\n        \"node\": \">=12\"\r\n      }\r\n    },\r\n    \"node_modules/eastasianwidth\": {\r\n      \"version\": \"0.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz\",\r\n      \"integrity\": \"sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==\"\r\n    },\r\n    \"node_modules/ecdsa-sig-formatter\": {\r\n      \"version\": \"1.0.11\",\r\n      \"resolved\": \"https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz\",\r\n      \"integrity\": \"sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==\",\r\n      \"dependencies\": {\r\n        \"safe-buffer\": \"^5.0.1\"\r\n      }\r\n    },\r\n    \"node_modules/ee-first\": {\r\n      \"version\": \"1.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz\",\r\n      \"integrity\": \"sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==\"\r\n    },\r\n    \"node_modules/ejs\": {\r\n      \"version\": \"3.1.10\",\r\n      \"resolved\": \"https://registry.npmjs.org/ejs/-/ejs-3.1.10.tgz\",\r\n      \"integrity\": \"sha512-UeJmFfOrAQS8OJWPZ4qtgHyWExa088/MtK5UEyoJGFH67cDEXkZSviOiKRCZ4Xij0zxI3JECgYs3oKx+AizQBA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"jake\": \"^10.8.5\"\r\n      },\r\n      \"bin\": {\r\n        \"ejs\": \"bin/cli.js\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=0.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/electron-to-chromium\": {\r\n      \"version\": \"1.5.50\",\r\n      \"resolved\": \"https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.50.tgz\",\r\n      \"integrity\": \"sha512-eMVObiUQ2LdgeO1F/ySTXsvqvxb6ZH2zPGaMYsWzRDdOddUa77tdmI0ltg+L16UpbWdhPmuF3wIQYyQq65WfZw==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/emittery\": {\r\n      \"version\": \"0.13.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/emittery/-/emittery-0.13.1.tgz\",\r\n      \"integrity\": \"sha512-DeWwawk6r5yR9jFgnDKYt4sLS0LmHJJi3ZOnb5/JdbYwj3nW+FxQnHIjhBKz8YLC7oRNPVM9NQ47I3CVx34eqQ==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=12\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sindresorhus/emittery?sponsor=1\"\r\n      }\r\n    },\r\n    \"node_modules/emoji-regex\": {\r\n      \"version\": \"8.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz\",\r\n      \"integrity\": \"sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==\"\r\n    },\r\n    \"node_modules/encodeurl\": {\r\n      \"version\": \"2.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz\",\r\n      \"integrity\": \"sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\"\r\n      }\r\n    },\r\n    \"node_modules/enhanced-resolve\": {\r\n      \"version\": \"5.17.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-5.17.1.tgz\",\r\n      \"integrity\": \"sha512-LMHl3dXhTcfv8gM4kEzIUeTQ+7fpdA0l2tUf34BddXPkz2A5xJ5L/Pchd5BL6rdccM9QGvu0sWZzK1Z1t4wwyg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"graceful-fs\": \"^4.2.4\",\r\n        \"tapable\": \"^2.2.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10.13.0\"\r\n      }\r\n    },\r\n    \"node_modules/error-ex\": {\r\n      \"version\": \"1.3.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz\",\r\n      \"integrity\": \"sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"is-arrayish\": \"^0.2.1\"\r\n      }\r\n    },\r\n    \"node_modules/es-define-property\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.0.tgz\",\r\n      \"integrity\": \"sha512-jxayLKShrEqqzJ0eumQbVhTYQM27CfT1T35+gCgDFoL82JLsXqTJ76zv6A0YLOgEnLUMvLzsDsGIrl8NFpT2gQ==\",\r\n      \"dependencies\": {\r\n        \"get-intrinsic\": \"^1.2.4\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.4\"\r\n      }\r\n    },\r\n    \"node_modules/es-errors\": {\r\n      \"version\": \"1.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz\",\r\n      \"integrity\": \"sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.4\"\r\n      }\r\n    },\r\n    \"node_modules/es-module-lexer\": {\r\n      \"version\": \"1.5.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/es-module-lexer/-/es-module-lexer-1.5.4.tgz\",\r\n      \"integrity\": \"sha512-MVNK56NiMrOwitFB7cqDwq0CQutbw+0BvLshJSse0MUNU+y1FC3bUS/AQg7oUng+/wKrrki7JfmwtVHkVfPLlw==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/escalade\": {\r\n      \"version\": \"3.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz\",\r\n      \"integrity\": \"sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==\",\r\n      \"engines\": {\r\n        \"node\": \">=6\"\r\n      }\r\n    },\r\n    \"node_modules/escape-html\": {\r\n      \"version\": \"1.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz\",\r\n      \"integrity\": \"sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==\"\r\n    },\r\n    \"node_modules/escape-string-regexp\": {\r\n      \"version\": \"4.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz\",\r\n      \"integrity\": \"sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/eslint\": {\r\n      \"version\": \"8.57.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/eslint/-/eslint-8.57.1.tgz\",\r\n      \"integrity\": \"sha512-ypowyDxpVSYpkXr9WPv2PAZCtNip1Mv5KTW0SCurXv/9iOpcrH9PaqUElksqEB6pChqHGDRCFTyrZlGhnLNGiA==\",\r\n      \"deprecated\": \"This version is no longer supported. Please see https://eslint.org/version-support for other options.\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@eslint-community/eslint-utils\": \"^4.2.0\",\r\n        \"@eslint-community/regexpp\": \"^4.6.1\",\r\n        \"@eslint/eslintrc\": \"^2.1.4\",\r\n        \"@eslint/js\": \"8.57.1\",\r\n        \"@humanwhocodes/config-array\": \"^0.13.0\",\r\n        \"@humanwhocodes/module-importer\": \"^1.0.1\",\r\n        \"@nodelib/fs.walk\": \"^1.2.8\",\r\n        \"@ungap/structured-clone\": \"^1.2.0\",\r\n        \"ajv\": \"^6.12.4\",\r\n        \"chalk\": \"^4.0.0\",\r\n        \"cross-spawn\": \"^7.0.2\",\r\n        \"debug\": \"^4.3.2\",\r\n        \"doctrine\": \"^3.0.0\",\r\n        \"escape-string-regexp\": \"^4.0.0\",\r\n        \"eslint-scope\": \"^7.2.2\",\r\n        \"eslint-visitor-keys\": \"^3.4.3\",\r\n        \"espree\": \"^9.6.1\",\r\n        \"esquery\": \"^1.4.2\",\r\n        \"esutils\": \"^2.0.2\",\r\n        \"fast-deep-equal\": \"^3.1.3\",\r\n        \"file-entry-cache\": \"^6.0.1\",\r\n        \"find-up\": \"^5.0.0\",\r\n        \"glob-parent\": \"^6.0.2\",\r\n        \"globals\": \"^13.19.0\",\r\n        \"graphemer\": \"^1.4.0\",\r\n        \"ignore\": \"^5.2.0\",\r\n        \"imurmurhash\": \"^0.1.4\",\r\n        \"is-glob\": \"^4.0.0\",\r\n        \"is-path-inside\": \"^3.0.3\",\r\n        \"js-yaml\": \"^4.1.0\",\r\n        \"json-stable-stringify-without-jsonify\": \"^1.0.1\",\r\n        \"levn\": \"^0.4.1\",\r\n        \"lodash.merge\": \"^4.6.2\",\r\n        \"minimatch\": \"^3.1.2\",\r\n        \"natural-compare\": \"^1.4.0\",\r\n        \"optionator\": \"^0.9.3\",\r\n        \"strip-ansi\": \"^6.0.1\",\r\n        \"text-table\": \"^0.2.0\"\r\n      },\r\n      \"bin\": {\r\n        \"eslint\": \"bin/eslint.js\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^12.22.0 || ^14.17.0 || >=16.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/eslint\"\r\n      }\r\n    },\r\n    \"node_modules/eslint-config-prettier\": {\r\n      \"version\": \"9.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/eslint-config-prettier/-/eslint-config-prettier-9.1.0.tgz\",\r\n      \"integrity\": \"sha512-NSWl5BFQWEPi1j4TjVNItzYV7dZXZ+wP6I6ZhrBGpChQhZRUaElihE9uRRkcbRnNb76UMKDF3r+WTmNcGPKsqw==\",\r\n      \"dev\": true,\r\n      \"bin\": {\r\n        \"eslint-config-prettier\": \"bin/cli.js\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"eslint\": \">=7.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/eslint-plugin-prettier\": {\r\n      \"version\": \"5.2.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/eslint-plugin-prettier/-/eslint-plugin-prettier-5.2.1.tgz\",\r\n      \"integrity\": \"sha512-gH3iR3g4JfF+yYPaJYkN7jEl9QbweL/YfkoRlNnuIEHEz1vHVlCmWOS+eGGiRuzHQXdJFCOTxRgvju9b8VUmrw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"prettier-linter-helpers\": \"^1.0.0\",\r\n        \"synckit\": \"^0.9.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.18.0 || >=16.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/eslint-plugin-prettier\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@types/eslint\": \">=8.0.0\",\r\n        \"eslint\": \">=8.0.0\",\r\n        \"eslint-config-prettier\": \"*\",\r\n        \"prettier\": \">=3.0.0\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"@types/eslint\": {\r\n          \"optional\": true\r\n        },\r\n        \"eslint-config-prettier\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"node_modules/eslint-scope\": {\r\n      \"version\": \"7.2.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/eslint-scope/-/eslint-scope-7.2.2.tgz\",\r\n      \"integrity\": \"sha512-dOt21O7lTMhDM+X9mB4GX+DZrZtCUJPL/wlcTqxyrx5IvO0IYtILdtrQGQp+8n5S0gwSVmOf9NQrjMOgfQZlIg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"esrecurse\": \"^4.3.0\",\r\n        \"estraverse\": \"^5.2.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^12.22.0 || ^14.17.0 || >=16.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/eslint\"\r\n      }\r\n    },\r\n    \"node_modules/eslint-visitor-keys\": {\r\n      \"version\": \"3.4.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz\",\r\n      \"integrity\": \"sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \"^12.22.0 || ^14.17.0 || >=16.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/eslint\"\r\n      }\r\n    },\r\n    \"node_modules/eslint/node_modules/ajv\": {\r\n      \"version\": \"6.12.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz\",\r\n      \"integrity\": \"sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"fast-deep-equal\": \"^3.1.1\",\r\n        \"fast-json-stable-stringify\": \"^2.0.0\",\r\n        \"json-schema-traverse\": \"^0.4.1\",\r\n        \"uri-js\": \"^4.2.2\"\r\n      },\r\n      \"funding\": {\r\n        \"type\": \"github\",\r\n        \"url\": \"https://github.com/sponsors/epoberezkin\"\r\n      }\r\n    },\r\n    \"node_modules/eslint/node_modules/brace-expansion\": {\r\n      \"version\": \"1.1.11\",\r\n      \"resolved\": \"https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz\",\r\n      \"integrity\": \"sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"balanced-match\": \"^1.0.0\",\r\n        \"concat-map\": \"0.0.1\"\r\n      }\r\n    },\r\n    \"node_modules/eslint/node_modules/glob-parent\": {\r\n      \"version\": \"6.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz\",\r\n      \"integrity\": \"sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"is-glob\": \"^4.0.3\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10.13.0\"\r\n      }\r\n    },\r\n    \"node_modules/eslint/node_modules/json-schema-traverse\": {\r\n      \"version\": \"0.4.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz\",\r\n      \"integrity\": \"sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/eslint/node_modules/minimatch\": {\r\n      \"version\": \"3.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz\",\r\n      \"integrity\": \"sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"brace-expansion\": \"^1.1.7\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"*\"\r\n      }\r\n    },\r\n    \"node_modules/espree\": {\r\n      \"version\": \"9.6.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/espree/-/espree-9.6.1.tgz\",\r\n      \"integrity\": \"sha512-oruZaFkjorTpF32kDSI5/75ViwGeZginGGy2NoOSg3Q9bnwlnmDm4HLnkl0RE3n+njDXR037aY1+x58Z/zFdwQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"acorn\": \"^8.9.0\",\r\n        \"acorn-jsx\": \"^5.3.2\",\r\n        \"eslint-visitor-keys\": \"^3.4.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^12.22.0 || ^14.17.0 || >=16.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/eslint\"\r\n      }\r\n    },\r\n    \"node_modules/esprima\": {\r\n      \"version\": \"4.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz\",\r\n      \"integrity\": \"sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==\",\r\n      \"dev\": true,\r\n      \"bin\": {\r\n        \"esparse\": \"bin/esparse.js\",\r\n        \"esvalidate\": \"bin/esvalidate.js\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=4\"\r\n      }\r\n    },\r\n    \"node_modules/esquery\": {\r\n      \"version\": \"1.6.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz\",\r\n      \"integrity\": \"sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"estraverse\": \"^5.1.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=0.10\"\r\n      }\r\n    },\r\n    \"node_modules/esrecurse\": {\r\n      \"version\": \"4.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz\",\r\n      \"integrity\": \"sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"estraverse\": \"^5.2.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=4.0\"\r\n      }\r\n    },\r\n    \"node_modules/estraverse\": {\r\n      \"version\": \"5.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz\",\r\n      \"integrity\": \"sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=4.0\"\r\n      }\r\n    },\r\n    \"node_modules/esutils\": {\r\n      \"version\": \"2.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz\",\r\n      \"integrity\": \"sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=0.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/etag\": {\r\n      \"version\": \"1.8.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/etag/-/etag-1.8.1.tgz\",\r\n      \"integrity\": \"sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/events\": {\r\n      \"version\": \"3.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/events/-/events-3.3.0.tgz\",\r\n      \"integrity\": \"sha512-mQw+2fkQbALzQ7V0MY0IqdnXNOeTtP4r0lN9z7AAawCXgqea7bDii20AYrIBrFd/Hx0M2Ocz6S111CaFkUcb0Q==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=0.8.x\"\r\n      }\r\n    },\r\n    \"node_modules/execa\": {\r\n      \"version\": \"5.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/execa/-/execa-5.1.1.tgz\",\r\n      \"integrity\": \"sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"cross-spawn\": \"^7.0.3\",\r\n        \"get-stream\": \"^6.0.0\",\r\n        \"human-signals\": \"^2.1.0\",\r\n        \"is-stream\": \"^2.0.0\",\r\n        \"merge-stream\": \"^2.0.0\",\r\n        \"npm-run-path\": \"^4.0.1\",\r\n        \"onetime\": \"^5.1.2\",\r\n        \"signal-exit\": \"^3.0.3\",\r\n        \"strip-final-newline\": \"^2.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sindresorhus/execa?sponsor=1\"\r\n      }\r\n    },\r\n    \"node_modules/execa/node_modules/signal-exit\": {\r\n      \"version\": \"3.0.7\",\r\n      \"resolved\": \"https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz\",\r\n      \"integrity\": \"sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/exit\": {\r\n      \"version\": \"0.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/exit/-/exit-0.1.2.tgz\",\r\n      \"integrity\": \"sha512-Zk/eNKV2zbjpKzrsQ+n1G6poVbErQxJ0LBOJXaKZ1EViLzH+hrLu9cdXI4zw9dBQJslwBEpbQ2P1oS7nDxs6jQ==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">= 0.8.0\"\r\n      }\r\n    },\r\n    \"node_modules/expect\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/expect/-/expect-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-2Zks0hf1VLFYI1kbh0I5jP3KHHyCHpkfyHBzsSXRFgl/Bg9mWYfMW8oD+PdMPlEwy5HNsR9JutYy6pMeOh61nw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@jest/expect-utils\": \"^29.7.0\",\r\n        \"jest-get-type\": \"^29.6.3\",\r\n        \"jest-matcher-utils\": \"^29.7.0\",\r\n        \"jest-message-util\": \"^29.7.0\",\r\n        \"jest-util\": \"^29.7.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/express\": {\r\n      \"version\": \"4.21.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/express/-/express-4.21.1.tgz\",\r\n      \"integrity\": \"sha512-YSFlK1Ee0/GC8QaO91tHcDxJiE/X4FbpAyQWkxAvG6AXCuR65YzK8ua6D9hvi/TzUfZMpc+BwuM1IPw8fmQBiQ==\",\r\n      \"dependencies\": {\r\n        \"accepts\": \"~1.3.8\",\r\n        \"array-flatten\": \"1.1.1\",\r\n        \"body-parser\": \"1.20.3\",\r\n        \"content-disposition\": \"0.5.4\",\r\n        \"content-type\": \"~1.0.4\",\r\n        \"cookie\": \"0.7.1\",\r\n        \"cookie-signature\": \"1.0.6\",\r\n        \"debug\": \"2.6.9\",\r\n        \"depd\": \"2.0.0\",\r\n        \"encodeurl\": \"~2.0.0\",\r\n        \"escape-html\": \"~1.0.3\",\r\n        \"etag\": \"~1.8.1\",\r\n        \"finalhandler\": \"1.3.1\",\r\n        \"fresh\": \"0.5.2\",\r\n        \"http-errors\": \"2.0.0\",\r\n        \"merge-descriptors\": \"1.0.3\",\r\n        \"methods\": \"~1.1.2\",\r\n        \"on-finished\": \"2.4.1\",\r\n        \"parseurl\": \"~1.3.3\",\r\n        \"path-to-regexp\": \"0.1.10\",\r\n        \"proxy-addr\": \"~2.0.7\",\r\n        \"qs\": \"6.13.0\",\r\n        \"range-parser\": \"~1.2.1\",\r\n        \"safe-buffer\": \"5.2.1\",\r\n        \"send\": \"0.19.0\",\r\n        \"serve-static\": \"1.16.2\",\r\n        \"setprototypeof\": \"1.2.0\",\r\n        \"statuses\": \"2.0.1\",\r\n        \"type-is\": \"~1.6.18\",\r\n        \"utils-merge\": \"1.0.1\",\r\n        \"vary\": \"~1.1.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/express/node_modules/debug\": {\r\n      \"version\": \"2.6.9\",\r\n      \"resolved\": \"https://registry.npmjs.org/debug/-/debug-2.6.9.tgz\",\r\n      \"integrity\": \"sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==\",\r\n      \"dependencies\": {\r\n        \"ms\": \"2.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/express/node_modules/ms\": {\r\n      \"version\": \"2.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.0.0.tgz\",\r\n      \"integrity\": \"sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==\"\r\n    },\r\n    \"node_modules/express/node_modules/path-to-regexp\": {\r\n      \"version\": \"0.1.10\",\r\n      \"resolved\": \"https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.10.tgz\",\r\n      \"integrity\": \"sha512-7lf7qcQidTku0Gu3YDPc8DJ1q7OOucfa/BSsIwjuh56VU7katFvuM8hULfkwB3Fns/rsVF7PwPKVw1sl5KQS9w==\"\r\n    },\r\n    \"node_modules/external-editor\": {\r\n      \"version\": \"3.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/external-editor/-/external-editor-3.1.0.tgz\",\r\n      \"integrity\": \"sha512-hMQ4CX1p1izmuLYyZqLMO/qGNw10wSv9QDCPfzXfyFrOaCSSoRfqE1Kf1s5an66J5JZC62NewG+mK49jOCtQew==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"chardet\": \"^0.7.0\",\r\n        \"iconv-lite\": \"^0.4.24\",\r\n        \"tmp\": \"^0.0.33\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=4\"\r\n      }\r\n    },\r\n    \"node_modules/fast-deep-equal\": {\r\n      \"version\": \"3.1.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz\",\r\n      \"integrity\": \"sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/fast-diff\": {\r\n      \"version\": \"1.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/fast-diff/-/fast-diff-1.3.0.tgz\",\r\n      \"integrity\": \"sha512-VxPP4NqbUjj6MaAOafWeUn2cXWLcCtljklUtZf0Ind4XQ+QPtmA0b18zZy0jIQx+ExRVCR/ZQpBmik5lXshNsw==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/fast-glob\": {\r\n      \"version\": \"3.3.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.2.tgz\",\r\n      \"integrity\": \"sha512-oX2ruAFQwf/Orj8m737Y5adxDQO0LAB7/S5MnxCdTNDd4p6BsyIVsv9JQsATbTSq8KHRpLwIHbVlUNatxd+1Ow==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@nodelib/fs.stat\": \"^2.0.2\",\r\n        \"@nodelib/fs.walk\": \"^1.2.3\",\r\n        \"glob-parent\": \"^5.1.2\",\r\n        \"merge2\": \"^1.3.0\",\r\n        \"micromatch\": \"^4.0.4\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8.6.0\"\r\n      }\r\n    },\r\n    \"node_modules/fast-json-stable-stringify\": {\r\n      \"version\": \"2.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz\",\r\n      \"integrity\": \"sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/fast-levenshtein\": {\r\n      \"version\": \"2.0.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz\",\r\n      \"integrity\": \"sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/fast-safe-stringify\": {\r\n      \"version\": \"2.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/fast-safe-stringify/-/fast-safe-stringify-2.1.1.tgz\",\r\n      \"integrity\": \"sha512-W+KJc2dmILlPplD/H4K9l9LcAHAfPtP6BY84uVLXQ6Evcz9Lcg33Y2z1IVblT6xdY54PXYVHEv+0Wpq8Io6zkA==\"\r\n    },\r\n    \"node_modules/fastq\": {\r\n      \"version\": \"1.17.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/fastq/-/fastq-1.17.1.tgz\",\r\n      \"integrity\": \"sha512-sRVD3lWVIXWg6By68ZN7vho9a1pQcN/WBFaAAsDDFzlJjvoGx0P8z7V1t72grFJfJhu3YPZBuu25f7Kaw2jN1w==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"reusify\": \"^1.0.4\"\r\n      }\r\n    },\r\n    \"node_modules/fb-watchman\": {\r\n      \"version\": \"2.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/fb-watchman/-/fb-watchman-2.0.2.tgz\",\r\n      \"integrity\": \"sha512-p5161BqbuCaSnB8jIbzQHOlpgsPmK5rJVDfDKO91Axs5NC1uu3HRQm6wt9cd9/+GtQQIO53JdGXXoyDpTAsgYA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"bser\": \"2.1.1\"\r\n      }\r\n    },\r\n    \"node_modules/figures\": {\r\n      \"version\": \"3.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/figures/-/figures-3.2.0.tgz\",\r\n      \"integrity\": \"sha512-yaduQFRKLXYOGgEn6AZau90j3ggSOyiqXU0F9JZfeXYhNa+Jk4X+s45A2zg5jns87GAFa34BBm2kXw4XpNcbdg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"escape-string-regexp\": \"^1.0.5\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/figures/node_modules/escape-string-regexp\": {\r\n      \"version\": \"1.0.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz\",\r\n      \"integrity\": \"sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=0.8.0\"\r\n      }\r\n    },\r\n    \"node_modules/file-entry-cache\": {\r\n      \"version\": \"6.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-6.0.1.tgz\",\r\n      \"integrity\": \"sha512-7Gps/XWymbLk2QLYK4NzpMOrYjMhdIxXuIvy2QBsLE6ljuodKvdkWs/cpyJJ3CVIVpH0Oi1Hvg1ovbMzLdFBBg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"flat-cache\": \"^3.0.4\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^10.12.0 || >=12.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/filelist\": {\r\n      \"version\": \"1.0.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/filelist/-/filelist-1.0.4.tgz\",\r\n      \"integrity\": \"sha512-w1cEuf3S+DrLCQL7ET6kz+gmlJdbq9J7yXCSjK/OZCPA+qEN1WyF4ZAf0YYJa4/shHJra2t/d/r8SV4Ji+x+8Q==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"minimatch\": \"^5.0.1\"\r\n      }\r\n    },\r\n    \"node_modules/filelist/node_modules/minimatch\": {\r\n      \"version\": \"5.1.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-5.1.6.tgz\",\r\n      \"integrity\": \"sha512-lKwV/1brpG6mBUFHtb7NUmtABCb2WZZmm2wNiOA5hAb8VdCS4B3dtMWyvcoViccwAW/COERjXLt0zP1zXUN26g==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"brace-expansion\": \"^2.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      }\r\n    },\r\n    \"node_modules/fill-range\": {\r\n      \"version\": \"7.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz\",\r\n      \"integrity\": \"sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"to-regex-range\": \"^5.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/finalhandler\": {\r\n      \"version\": \"1.3.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/finalhandler/-/finalhandler-1.3.1.tgz\",\r\n      \"integrity\": \"sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==\",\r\n      \"dependencies\": {\r\n        \"debug\": \"2.6.9\",\r\n        \"encodeurl\": \"~2.0.0\",\r\n        \"escape-html\": \"~1.0.3\",\r\n        \"on-finished\": \"2.4.1\",\r\n        \"parseurl\": \"~1.3.3\",\r\n        \"statuses\": \"2.0.1\",\r\n        \"unpipe\": \"~1.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\"\r\n      }\r\n    },\r\n    \"node_modules/finalhandler/node_modules/debug\": {\r\n      \"version\": \"2.6.9\",\r\n      \"resolved\": \"https://registry.npmjs.org/debug/-/debug-2.6.9.tgz\",\r\n      \"integrity\": \"sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==\",\r\n      \"dependencies\": {\r\n        \"ms\": \"2.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/finalhandler/node_modules/ms\": {\r\n      \"version\": \"2.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.0.0.tgz\",\r\n      \"integrity\": \"sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==\"\r\n    },\r\n    \"node_modules/find-up\": {\r\n      \"version\": \"5.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz\",\r\n      \"integrity\": \"sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"locate-path\": \"^6.0.0\",\r\n        \"path-exists\": \"^4.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/flat-cache\": {\r\n      \"version\": \"3.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/flat-cache/-/flat-cache-3.2.0.tgz\",\r\n      \"integrity\": \"sha512-CYcENa+FtcUKLmhhqyctpclsq7QF38pKjZHsGNiSQF5r4FtoKDWabFDl3hzaEQMvT1LHEysw5twgLvpYYb4vbw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"flatted\": \"^3.2.9\",\r\n        \"keyv\": \"^4.5.3\",\r\n        \"rimraf\": \"^3.0.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^10.12.0 || >=12.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/flatted\": {\r\n      \"version\": \"3.3.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/flatted/-/flatted-3.3.1.tgz\",\r\n      \"integrity\": \"sha512-X8cqMLLie7KsNUDSdzeN8FYK9rEt4Dt67OsG/DNGnYTSDBG4uFAJFBnUeiV+zCVAvwFy56IjM9sH51jVaEhNxw==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/follow-redirects\": {\r\n      \"version\": \"1.15.9\",\r\n      \"resolved\": \"https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.9.tgz\",\r\n      \"integrity\": \"sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==\",\r\n      \"funding\": [\r\n        {\r\n          \"type\": \"individual\",\r\n          \"url\": \"https://github.com/sponsors/RubenVerborgh\"\r\n        }\r\n      ],\r\n      \"engines\": {\r\n        \"node\": \">=4.0\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"debug\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"node_modules/foreground-child\": {\r\n      \"version\": \"3.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/foreground-child/-/foreground-child-3.3.0.tgz\",\r\n      \"integrity\": \"sha512-Ld2g8rrAyMYFXBhEqMz8ZAHBi4J4uS1i/CxGMDnjyFWddMXLVcDp051DZfu+t7+ab7Wv6SMqpWmyFIj5UbfFvg==\",\r\n      \"dependencies\": {\r\n        \"cross-spawn\": \"^7.0.0\",\r\n        \"signal-exit\": \"^4.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=14\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/isaacs\"\r\n      }\r\n    },\r\n    \"node_modules/fork-ts-checker-webpack-plugin\": {\r\n      \"version\": \"9.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/fork-ts-checker-webpack-plugin/-/fork-ts-checker-webpack-plugin-9.0.2.tgz\",\r\n      \"integrity\": \"sha512-Uochze2R8peoN1XqlSi/rGUkDQpRogtLFocP9+PGu68zk1BDAKXfdeCdyVZpgTk8V8WFVQXdEz426VKjXLO1Gg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/code-frame\": \"^7.16.7\",\r\n        \"chalk\": \"^4.1.2\",\r\n        \"chokidar\": \"^3.5.3\",\r\n        \"cosmiconfig\": \"^8.2.0\",\r\n        \"deepmerge\": \"^4.2.2\",\r\n        \"fs-extra\": \"^10.0.0\",\r\n        \"memfs\": \"^3.4.1\",\r\n        \"minimatch\": \"^3.0.4\",\r\n        \"node-abort-controller\": \"^3.0.1\",\r\n        \"schema-utils\": \"^3.1.1\",\r\n        \"semver\": \"^7.3.5\",\r\n        \"tapable\": \"^2.2.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=12.13.0\",\r\n        \"yarn\": \">=1.0.0\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"typescript\": \">3.6.0\",\r\n        \"webpack\": \"^5.11.0\"\r\n      }\r\n    },\r\n    \"node_modules/fork-ts-checker-webpack-plugin/node_modules/brace-expansion\": {\r\n      \"version\": \"1.1.11\",\r\n      \"resolved\": \"https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz\",\r\n      \"integrity\": \"sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"balanced-match\": \"^1.0.0\",\r\n        \"concat-map\": \"0.0.1\"\r\n      }\r\n    },\r\n    \"node_modules/fork-ts-checker-webpack-plugin/node_modules/minimatch\": {\r\n      \"version\": \"3.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz\",\r\n      \"integrity\": \"sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"brace-expansion\": \"^1.1.7\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"*\"\r\n      }\r\n    },\r\n    \"node_modules/form-data\": {\r\n      \"version\": \"4.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/form-data/-/form-data-4.0.1.tgz\",\r\n      \"integrity\": \"sha512-tzN8e4TX8+kkxGPK8D5u0FNmjPUjw3lwC9lSLxxoB/+GtsJG91CO8bSWy73APlgAZzZbXEYZJuxjkHH2w+Ezhw==\",\r\n      \"dependencies\": {\r\n        \"asynckit\": \"^0.4.0\",\r\n        \"combined-stream\": \"^1.0.8\",\r\n        \"mime-types\": \"^2.1.12\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 6\"\r\n      }\r\n    },\r\n    \"node_modules/formidable\": {\r\n      \"version\": \"2.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/formidable/-/formidable-2.1.2.tgz\",\r\n      \"integrity\": \"sha512-CM3GuJ57US06mlpQ47YcunuUZ9jpm8Vx+P2CGt2j7HpgkKZO/DJYQ0Bobim8G6PFQmK5lOqOOdUXboU+h73A4g==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"dezalgo\": \"^1.0.4\",\r\n        \"hexoid\": \"^1.0.0\",\r\n        \"once\": \"^1.4.0\",\r\n        \"qs\": \"^6.11.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://ko-fi.com/tunnckoCore/commissions\"\r\n      }\r\n    },\r\n    \"node_modules/forwarded\": {\r\n      \"version\": \"0.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz\",\r\n      \"integrity\": \"sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/fresh\": {\r\n      \"version\": \"0.5.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz\",\r\n      \"integrity\": \"sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/fs-extra\": {\r\n      \"version\": \"10.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/fs-extra/-/fs-extra-10.1.0.tgz\",\r\n      \"integrity\": \"sha512-oRXApq54ETRj4eMiFzGnHWGy+zo5raudjuxN0b8H7s/RU2oW0Wvsx9O0ACRN/kRq9E8Vu/ReskGB5o3ji+FzHQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"graceful-fs\": \"^4.2.0\",\r\n        \"jsonfile\": \"^6.0.1\",\r\n        \"universalify\": \"^2.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=12\"\r\n      }\r\n    },\r\n    \"node_modules/fs-minipass\": {\r\n      \"version\": \"2.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/fs-minipass/-/fs-minipass-2.1.0.tgz\",\r\n      \"integrity\": \"sha512-V/JgOLFCS+R6Vcq0slCuaeWEdNC3ouDlJMNIsacH2VtALiu9mV4LPrHc5cDl8k5aw6J8jwgWWpiTo5RYhmIzvg==\",\r\n      \"dependencies\": {\r\n        \"minipass\": \"^3.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 8\"\r\n      }\r\n    },\r\n    \"node_modules/fs-minipass/node_modules/minipass\": {\r\n      \"version\": \"3.3.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz\",\r\n      \"integrity\": \"sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==\",\r\n      \"dependencies\": {\r\n        \"yallist\": \"^4.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/fs-minipass/node_modules/yallist\": {\r\n      \"version\": \"4.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz\",\r\n      \"integrity\": \"sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==\"\r\n    },\r\n    \"node_modules/fs-monkey\": {\r\n      \"version\": \"1.0.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/fs-monkey/-/fs-monkey-1.0.6.tgz\",\r\n      \"integrity\": \"sha512-b1FMfwetIKymC0eioW7mTywihSQE4oLzQn1dB6rZB5fx/3NpNEdAWeCSMB+60/AeT0TCXsxzAlcYVEFCTAksWg==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/fs.realpath\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz\",\r\n      \"integrity\": \"sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==\"\r\n    },\r\n    \"node_modules/fsevents\": {\r\n      \"version\": \"2.3.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz\",\r\n      \"integrity\": \"sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==\",\r\n      \"dev\": true,\r\n      \"hasInstallScript\": true,\r\n      \"optional\": true,\r\n      \"os\": [\r\n        \"darwin\"\r\n      ],\r\n      \"engines\": {\r\n        \"node\": \"^8.16.0 || ^10.6.0 || >=11.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/function-bind\": {\r\n      \"version\": \"1.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz\",\r\n      \"integrity\": \"sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==\",\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/ljharb\"\r\n      }\r\n    },\r\n    \"node_modules/gauge\": {\r\n      \"version\": \"3.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/gauge/-/gauge-3.0.2.tgz\",\r\n      \"integrity\": \"sha512-+5J6MS/5XksCuXq++uFRsnUd7Ovu1XenbeuIuNRJxYWjgQbPuFhT14lAvsWfqfAmnwluf1OwMjz39HjfLPci0Q==\",\r\n      \"deprecated\": \"This package is no longer supported.\",\r\n      \"dependencies\": {\r\n        \"aproba\": \"^1.0.3 || ^2.0.0\",\r\n        \"color-support\": \"^1.1.2\",\r\n        \"console-control-strings\": \"^1.0.0\",\r\n        \"has-unicode\": \"^2.0.1\",\r\n        \"object-assign\": \"^4.1.1\",\r\n        \"signal-exit\": \"^3.0.0\",\r\n        \"string-width\": \"^4.2.3\",\r\n        \"strip-ansi\": \"^6.0.1\",\r\n        \"wide-align\": \"^1.1.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      }\r\n    },\r\n    \"node_modules/gauge/node_modules/signal-exit\": {\r\n      \"version\": \"3.0.7\",\r\n      \"resolved\": \"https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz\",\r\n      \"integrity\": \"sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==\"\r\n    },\r\n    \"node_modules/generate-function\": {\r\n      \"version\": \"2.3.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/generate-function/-/generate-function-2.3.1.tgz\",\r\n      \"integrity\": \"sha512-eeB5GfMNeevm/GRYq20ShmsaGcmI81kIX2K9XQx5miC8KdHaC6Jm0qQ8ZNeGOi7wYB8OsdxKs+Y2oVuTFuVwKQ==\",\r\n      \"dependencies\": {\r\n        \"is-property\": \"^1.0.2\"\r\n      }\r\n    },\r\n    \"node_modules/gensync\": {\r\n      \"version\": \"1.0.0-beta.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz\",\r\n      \"integrity\": \"sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=6.9.0\"\r\n      }\r\n    },\r\n    \"node_modules/get-caller-file\": {\r\n      \"version\": \"2.0.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz\",\r\n      \"integrity\": \"sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==\",\r\n      \"engines\": {\r\n        \"node\": \"6.* || 8.* || >= 10.*\"\r\n      }\r\n    },\r\n    \"node_modules/get-intrinsic\": {\r\n      \"version\": \"1.2.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.2.4.tgz\",\r\n      \"integrity\": \"sha512-5uYhsJH8VJBTv7oslg4BznJYhDoRI6waYCxMmCdnTrcCrHA/fCFKoTFz2JKKE0HdDFUF7/oQuhzumXJK7paBRQ==\",\r\n      \"dependencies\": {\r\n        \"es-errors\": \"^1.3.0\",\r\n        \"function-bind\": \"^1.1.2\",\r\n        \"has-proto\": \"^1.0.1\",\r\n        \"has-symbols\": \"^1.0.3\",\r\n        \"hasown\": \"^2.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.4\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/ljharb\"\r\n      }\r\n    },\r\n    \"node_modules/get-package-type\": {\r\n      \"version\": \"0.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/get-package-type/-/get-package-type-0.1.0.tgz\",\r\n      \"integrity\": \"sha512-pjzuKtY64GYfWizNAJ0fr9VqttZkNiK2iS430LtIHzjBEr6bX8Am2zm4sW4Ro5wjWW5cAlRL1qAMTcXbjNAO2Q==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=8.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/get-stream\": {\r\n      \"version\": \"6.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/get-stream/-/get-stream-6.0.1.tgz\",\r\n      \"integrity\": \"sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/glob\": {\r\n      \"version\": \"10.4.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/glob/-/glob-10.4.2.tgz\",\r\n      \"integrity\": \"sha512-GwMlUF6PkPo3Gk21UxkCohOv0PLcIXVtKyLlpEI28R/cO/4eNOdmLk3CMW1wROV/WR/EsZOWAfBbBOqYvs88/w==\",\r\n      \"dependencies\": {\r\n        \"foreground-child\": \"^3.1.0\",\r\n        \"jackspeak\": \"^3.1.2\",\r\n        \"minimatch\": \"^9.0.4\",\r\n        \"minipass\": \"^7.1.2\",\r\n        \"package-json-from-dist\": \"^1.0.0\",\r\n        \"path-scurry\": \"^1.11.1\"\r\n      },\r\n      \"bin\": {\r\n        \"glob\": \"dist/esm/bin.mjs\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=16 || 14 >=14.18\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/isaacs\"\r\n      }\r\n    },\r\n    \"node_modules/glob-parent\": {\r\n      \"version\": \"5.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz\",\r\n      \"integrity\": \"sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"is-glob\": \"^4.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 6\"\r\n      }\r\n    },\r\n    \"node_modules/glob-to-regexp\": {\r\n      \"version\": \"0.4.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/glob-to-regexp/-/glob-to-regexp-0.4.1.tgz\",\r\n      \"integrity\": \"sha512-lkX1HJXwyMcprw/5YUZc2s7DrpAiHB21/V+E1rHUrVNokkvB6bqMzT0VfV6/86ZNabt1k14YOIaT7nDvOX3Iiw==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/glob/node_modules/minimatch\": {\r\n      \"version\": \"9.0.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz\",\r\n      \"integrity\": \"sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==\",\r\n      \"dependencies\": {\r\n        \"brace-expansion\": \"^2.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=16 || 14 >=14.17\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/isaacs\"\r\n      }\r\n    },\r\n    \"node_modules/globals\": {\r\n      \"version\": \"13.24.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/globals/-/globals-13.24.0.tgz\",\r\n      \"integrity\": \"sha512-AhO5QUcj8llrbG09iWhPU2B204J1xnPeL8kQmVorSsy+Sjj1sk8gIyh6cUocGmH4L0UuhAJy+hJMRA4mgA4mFQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"type-fest\": \"^0.20.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/globby\": {\r\n      \"version\": \"11.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/globby/-/globby-11.1.0.tgz\",\r\n      \"integrity\": \"sha512-jhIXaOzy1sb8IyocaruWSn1TjmnBVs8Ayhcy83rmxNJ8q2uWKCAj3CnJY+KpGSXCueAPc0i05kVvVKtP1t9S3g==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"array-union\": \"^2.1.0\",\r\n        \"dir-glob\": \"^3.0.1\",\r\n        \"fast-glob\": \"^3.2.9\",\r\n        \"ignore\": \"^5.2.0\",\r\n        \"merge2\": \"^1.4.1\",\r\n        \"slash\": \"^3.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/gopd\": {\r\n      \"version\": \"1.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/gopd/-/gopd-1.0.1.tgz\",\r\n      \"integrity\": \"sha512-d65bNlIadxvpb/A2abVdlqKqV563juRnZ1Wtk6s1sIR8uNsXR70xqIzVqxVf1eTqDunwT2MkczEeaezCKTZhwA==\",\r\n      \"dependencies\": {\r\n        \"get-intrinsic\": \"^1.1.3\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/ljharb\"\r\n      }\r\n    },\r\n    \"node_modules/graceful-fs\": {\r\n      \"version\": \"4.2.11\",\r\n      \"resolved\": \"https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz\",\r\n      \"integrity\": \"sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/graphemer\": {\r\n      \"version\": \"1.4.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/graphemer/-/graphemer-1.4.0.tgz\",\r\n      \"integrity\": \"sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/has-flag\": {\r\n      \"version\": \"4.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz\",\r\n      \"integrity\": \"sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==\",\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/has-own-prop\": {\r\n      \"version\": \"2.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/has-own-prop/-/has-own-prop-2.0.0.tgz\",\r\n      \"integrity\": \"sha512-Pq0h+hvsVm6dDEa8x82GnLSYHOzNDt7f0ddFa3FqcQlgzEiptPqL+XrOJNavjOzSYiYWIrgeVYYgGlLmnxwilQ==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/has-property-descriptors\": {\r\n      \"version\": \"1.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz\",\r\n      \"integrity\": \"sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==\",\r\n      \"dependencies\": {\r\n        \"es-define-property\": \"^1.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/ljharb\"\r\n      }\r\n    },\r\n    \"node_modules/has-proto\": {\r\n      \"version\": \"1.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/has-proto/-/has-proto-1.0.3.tgz\",\r\n      \"integrity\": \"sha512-SJ1amZAJUiZS+PhsVLf5tGydlaVB8EdFpaSO4gmiUKUOxk8qzn5AIy4ZeJUmh22znIdk/uMAUT2pl3FxzVUH+Q==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.4\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/ljharb\"\r\n      }\r\n    },\r\n    \"node_modules/has-symbols\": {\r\n      \"version\": \"1.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.3.tgz\",\r\n      \"integrity\": \"sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.4\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/ljharb\"\r\n      }\r\n    },\r\n    \"node_modules/has-unicode\": {\r\n      \"version\": \"2.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/has-unicode/-/has-unicode-2.0.1.tgz\",\r\n      \"integrity\": \"sha512-8Rf9Y83NBReMnx0gFzA8JImQACstCYWUplepDa9xprwwtmgEZUF0h/i5xSA625zB/I37EtrswSST6OXxwaaIJQ==\"\r\n    },\r\n    \"node_modules/hasown\": {\r\n      \"version\": \"2.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz\",\r\n      \"integrity\": \"sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==\",\r\n      \"dependencies\": {\r\n        \"function-bind\": \"^1.1.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.4\"\r\n      }\r\n    },\r\n    \"node_modules/hexoid\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/hexoid/-/hexoid-1.0.0.tgz\",\r\n      \"integrity\": \"sha512-QFLV0taWQOZtvIRIAdBChesmogZrtuXvVWsFHZTk2SU+anspqZ2vMnoLg7IE1+Uk16N19APic1BuF8bC8c2m5g==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/highlight.js\": {\r\n      \"version\": \"10.7.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/highlight.js/-/highlight.js-10.7.3.tgz\",\r\n      \"integrity\": \"sha512-tzcUFauisWKNHaRkN4Wjl/ZA07gENAjFl3J/c480dprkGTg5EQstgaNFqBfUqCq54kZRIEcreTsAgF/m2quD7A==\",\r\n      \"engines\": {\r\n        \"node\": \"*\"\r\n      }\r\n    },\r\n    \"node_modules/html-escaper\": {\r\n      \"version\": \"2.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/html-escaper/-/html-escaper-2.0.2.tgz\",\r\n      \"integrity\": \"sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/http-errors\": {\r\n      \"version\": \"2.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz\",\r\n      \"integrity\": \"sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==\",\r\n      \"dependencies\": {\r\n        \"depd\": \"2.0.0\",\r\n        \"inherits\": \"2.0.4\",\r\n        \"setprototypeof\": \"1.2.0\",\r\n        \"statuses\": \"2.0.1\",\r\n        \"toidentifier\": \"1.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\"\r\n      }\r\n    },\r\n    \"node_modules/https-proxy-agent\": {\r\n      \"version\": \"5.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz\",\r\n      \"integrity\": \"sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==\",\r\n      \"dependencies\": {\r\n        \"agent-base\": \"6\",\r\n        \"debug\": \"4\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 6\"\r\n      }\r\n    },\r\n    \"node_modules/human-signals\": {\r\n      \"version\": \"2.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/human-signals/-/human-signals-2.1.0.tgz\",\r\n      \"integrity\": \"sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=10.17.0\"\r\n      }\r\n    },\r\n    \"node_modules/iconv-lite\": {\r\n      \"version\": \"0.4.24\",\r\n      \"resolved\": \"https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz\",\r\n      \"integrity\": \"sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==\",\r\n      \"dependencies\": {\r\n        \"safer-buffer\": \">= 2.1.2 < 3\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=0.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/ieee754\": {\r\n      \"version\": \"1.2.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz\",\r\n      \"integrity\": \"sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==\",\r\n      \"funding\": [\r\n        {\r\n          \"type\": \"github\",\r\n          \"url\": \"https://github.com/sponsors/feross\"\r\n        },\r\n        {\r\n          \"type\": \"patreon\",\r\n          \"url\": \"https://www.patreon.com/feross\"\r\n        },\r\n        {\r\n          \"type\": \"consulting\",\r\n          \"url\": \"https://feross.org/support\"\r\n        }\r\n      ]\r\n    },\r\n    \"node_modules/ignore\": {\r\n      \"version\": \"5.3.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz\",\r\n      \"integrity\": \"sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">= 4\"\r\n      }\r\n    },\r\n    \"node_modules/ignore-by-default\": {\r\n      \"version\": \"1.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-1.0.1.tgz\",\r\n      \"integrity\": \"sha512-Ius2VYcGNk7T90CppJqcIkS5ooHUZyIQK+ClZfMfMNFEF9VSE73Fq+906u/CWu92x4gzZMWOwfFYckPObzdEbA==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/import-fresh\": {\r\n      \"version\": \"3.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.0.tgz\",\r\n      \"integrity\": \"sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"parent-module\": \"^1.0.0\",\r\n        \"resolve-from\": \"^4.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=6\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/import-local\": {\r\n      \"version\": \"3.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/import-local/-/import-local-3.2.0.tgz\",\r\n      \"integrity\": \"sha512-2SPlun1JUPWoM6t3F0dw0FkCF/jWY8kttcY4f599GLTSjh2OCuuhdTkJQsEcZzBqbXZGKMK2OqW1oZsjtf/gQA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"pkg-dir\": \"^4.2.0\",\r\n        \"resolve-cwd\": \"^3.0.0\"\r\n      },\r\n      \"bin\": {\r\n        \"import-local-fixture\": \"fixtures/cli.js\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/imurmurhash\": {\r\n      \"version\": \"0.1.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz\",\r\n      \"integrity\": \"sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=0.8.19\"\r\n      }\r\n    },\r\n    \"node_modules/inflight\": {\r\n      \"version\": \"1.0.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz\",\r\n      \"integrity\": \"sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==\",\r\n      \"deprecated\": \"This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.\",\r\n      \"dependencies\": {\r\n        \"once\": \"^1.3.0\",\r\n        \"wrappy\": \"1\"\r\n      }\r\n    },\r\n    \"node_modules/inherits\": {\r\n      \"version\": \"2.0.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz\",\r\n      \"integrity\": \"sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==\"\r\n    },\r\n    \"node_modules/inquirer\": {\r\n      \"version\": \"8.2.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/inquirer/-/inquirer-8.2.6.tgz\",\r\n      \"integrity\": \"sha512-M1WuAmb7pn9zdFRtQYk26ZBoY043Sse0wVDdk4Bppr+JOXyQYybdtvK+l9wUibhtjdjvtoiNy8tk+EgsYIUqKg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"ansi-escapes\": \"^4.2.1\",\r\n        \"chalk\": \"^4.1.1\",\r\n        \"cli-cursor\": \"^3.1.0\",\r\n        \"cli-width\": \"^3.0.0\",\r\n        \"external-editor\": \"^3.0.3\",\r\n        \"figures\": \"^3.0.0\",\r\n        \"lodash\": \"^4.17.21\",\r\n        \"mute-stream\": \"0.0.8\",\r\n        \"ora\": \"^5.4.1\",\r\n        \"run-async\": \"^2.4.0\",\r\n        \"rxjs\": \"^7.5.5\",\r\n        \"string-width\": \"^4.1.0\",\r\n        \"strip-ansi\": \"^6.0.0\",\r\n        \"through\": \"^2.3.6\",\r\n        \"wrap-ansi\": \"^6.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=12.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/ipaddr.js\": {\r\n      \"version\": \"1.9.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz\",\r\n      \"integrity\": \"sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.10\"\r\n      }\r\n    },\r\n    \"node_modules/is-arrayish\": {\r\n      \"version\": \"0.2.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz\",\r\n      \"integrity\": \"sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/is-binary-path\": {\r\n      \"version\": \"2.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz\",\r\n      \"integrity\": \"sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"binary-extensions\": \"^2.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/is-core-module\": {\r\n      \"version\": \"2.15.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/is-core-module/-/is-core-module-2.15.1.tgz\",\r\n      \"integrity\": \"sha512-z0vtXSwucUJtANQWldhbtbt7BnL0vxiFjIdDLAatwhDYty2bad6s+rijD6Ri4YuYJubLzIJLUidCh09e1djEVQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"hasown\": \"^2.0.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.4\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/ljharb\"\r\n      }\r\n    },\r\n    \"node_modules/is-extglob\": {\r\n      \"version\": \"2.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz\",\r\n      \"integrity\": \"sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=0.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/is-fullwidth-code-point\": {\r\n      \"version\": \"3.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz\",\r\n      \"integrity\": \"sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==\",\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/is-generator-fn\": {\r\n      \"version\": \"2.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/is-generator-fn/-/is-generator-fn-2.1.0.tgz\",\r\n      \"integrity\": \"sha512-cTIB4yPYL/Grw0EaSzASzg6bBy9gqCofvWN8okThAYIxKJZC+udlRAmGbM0XLeniEJSs8uEgHPGuHSe1XsOLSQ==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=6\"\r\n      }\r\n    },\r\n    \"node_modules/is-glob\": {\r\n      \"version\": \"4.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz\",\r\n      \"integrity\": \"sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"is-extglob\": \"^2.1.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=0.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/is-interactive\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/is-interactive/-/is-interactive-1.0.0.tgz\",\r\n      \"integrity\": \"sha512-2HvIEKRoqS62guEC+qBjpvRubdX910WCMuJTZ+I9yvqKU2/12eSL549HMwtabb4oupdj2sMP50k+XJfB/8JE6w==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/is-number\": {\r\n      \"version\": \"7.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz\",\r\n      \"integrity\": \"sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=0.12.0\"\r\n      }\r\n    },\r\n    \"node_modules/is-path-inside\": {\r\n      \"version\": \"3.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/is-path-inside/-/is-path-inside-3.0.3.tgz\",\r\n      \"integrity\": \"sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/is-property\": {\r\n      \"version\": \"1.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/is-property/-/is-property-1.0.2.tgz\",\r\n      \"integrity\": \"sha512-Ks/IoX00TtClbGQr4TWXemAnktAQvYB7HzcCxDGqEZU6oCmb2INHuOoKxbtR+HFkmYWBKv/dOZtGRiAjDhj92g==\"\r\n    },\r\n    \"node_modules/is-stream\": {\r\n      \"version\": \"2.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz\",\r\n      \"integrity\": \"sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/is-unicode-supported\": {\r\n      \"version\": \"0.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/is-unicode-supported/-/is-unicode-supported-0.1.0.tgz\",\r\n      \"integrity\": \"sha512-knxG2q4UC3u8stRGyAVJCOdxFmv5DZiRcdlIaAQXAbSfJya+OhopNotLQrstBhququ4ZpuKbDc/8S6mgXgPFPw==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/isarray\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz\",\r\n      \"integrity\": \"sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==\"\r\n    },\r\n    \"node_modules/isexe\": {\r\n      \"version\": \"2.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz\",\r\n      \"integrity\": \"sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==\"\r\n    },\r\n    \"node_modules/istanbul-lib-coverage\": {\r\n      \"version\": \"3.2.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/istanbul-lib-coverage/-/istanbul-lib-coverage-3.2.2.tgz\",\r\n      \"integrity\": \"sha512-O8dpsF+r0WV/8MNRKfnmrtCWhuKjxrq2w+jpzBL5UZKTi2LeVWnWOmWRxFlesJONmc+wLAGvKQZEOanko0LFTg==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/istanbul-lib-instrument\": {\r\n      \"version\": \"6.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/istanbul-lib-instrument/-/istanbul-lib-instrument-6.0.3.tgz\",\r\n      \"integrity\": \"sha512-Vtgk7L/R2JHyyGW07spoFlB8/lpjiOLTjMdms6AFMraYt3BaJauod/NGrfnVG/y4Ix1JEuMRPDPEj2ua+zz1/Q==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/core\": \"^7.23.9\",\r\n        \"@babel/parser\": \"^7.23.9\",\r\n        \"@istanbuljs/schema\": \"^0.1.3\",\r\n        \"istanbul-lib-coverage\": \"^3.2.0\",\r\n        \"semver\": \"^7.5.4\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      }\r\n    },\r\n    \"node_modules/istanbul-lib-report\": {\r\n      \"version\": \"3.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/istanbul-lib-report/-/istanbul-lib-report-3.0.1.tgz\",\r\n      \"integrity\": \"sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"istanbul-lib-coverage\": \"^3.0.0\",\r\n        \"make-dir\": \"^4.0.0\",\r\n        \"supports-color\": \"^7.1.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      }\r\n    },\r\n    \"node_modules/istanbul-lib-report/node_modules/make-dir\": {\r\n      \"version\": \"4.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/make-dir/-/make-dir-4.0.0.tgz\",\r\n      \"integrity\": \"sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"semver\": \"^7.5.3\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/istanbul-lib-source-maps\": {\r\n      \"version\": \"4.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/istanbul-lib-source-maps/-/istanbul-lib-source-maps-4.0.1.tgz\",\r\n      \"integrity\": \"sha512-n3s8EwkdFIJCG3BPKBYvskgXGoy88ARzvegkitk60NxRdwltLOTaH7CUiMRXvwYorl0Q712iEjcWB+fK/MrWVw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"debug\": \"^4.1.1\",\r\n        \"istanbul-lib-coverage\": \"^3.0.0\",\r\n        \"source-map\": \"^0.6.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      }\r\n    },\r\n    \"node_modules/istanbul-lib-source-maps/node_modules/source-map\": {\r\n      \"version\": \"0.6.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz\",\r\n      \"integrity\": \"sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=0.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/istanbul-reports\": {\r\n      \"version\": \"3.1.7\",\r\n      \"resolved\": \"https://registry.npmjs.org/istanbul-reports/-/istanbul-reports-3.1.7.tgz\",\r\n      \"integrity\": \"sha512-BewmUXImeuRk2YY0PVbxgKAysvhRPUQE0h5QRM++nVWyubKGV0l8qQ5op8+B2DOmwSe63Jivj0BjkPQVf8fP5g==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"html-escaper\": \"^2.0.0\",\r\n        \"istanbul-lib-report\": \"^3.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/iterare\": {\r\n      \"version\": \"1.2.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/iterare/-/iterare-1.2.1.tgz\",\r\n      \"integrity\": \"sha512-RKYVTCjAnRthyJes037NX/IiqeidgN1xc3j1RjFfECFp28A1GVwK9nA+i0rJPaHqSZwygLzRnFlzUuHFoWWy+Q==\",\r\n      \"engines\": {\r\n        \"node\": \">=6\"\r\n      }\r\n    },\r\n    \"node_modules/jackspeak\": {\r\n      \"version\": \"3.4.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/jackspeak/-/jackspeak-3.4.3.tgz\",\r\n      \"integrity\": \"sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==\",\r\n      \"dependencies\": {\r\n        \"@isaacs/cliui\": \"^8.0.2\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/isaacs\"\r\n      },\r\n      \"optionalDependencies\": {\r\n        \"@pkgjs/parseargs\": \"^0.11.0\"\r\n      }\r\n    },\r\n    \"node_modules/jake\": {\r\n      \"version\": \"10.9.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/jake/-/jake-10.9.2.tgz\",\r\n      \"integrity\": \"sha512-2P4SQ0HrLQ+fw6llpLnOaGAvN2Zu6778SJMrCUwns4fOoG9ayrTiZk3VV8sCPkVZF8ab0zksVpS8FDY5pRCNBA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"async\": \"^3.2.3\",\r\n        \"chalk\": \"^4.0.2\",\r\n        \"filelist\": \"^1.0.4\",\r\n        \"minimatch\": \"^3.1.2\"\r\n      },\r\n      \"bin\": {\r\n        \"jake\": \"bin/cli.js\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      }\r\n    },\r\n    \"node_modules/jake/node_modules/brace-expansion\": {\r\n      \"version\": \"1.1.11\",\r\n      \"resolved\": \"https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz\",\r\n      \"integrity\": \"sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"balanced-match\": \"^1.0.0\",\r\n        \"concat-map\": \"0.0.1\"\r\n      }\r\n    },\r\n    \"node_modules/jake/node_modules/minimatch\": {\r\n      \"version\": \"3.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz\",\r\n      \"integrity\": \"sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"brace-expansion\": \"^1.1.7\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"*\"\r\n      }\r\n    },\r\n    \"node_modules/jest\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/jest/-/jest-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-NIy3oAFp9shda19hy4HK0HRTWKtPJmGdnvywu01nOqNC2vZg+Z+fvJDxpMQA88eb2I9EcafcdjYgsDthnYTvGw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@jest/core\": \"^29.7.0\",\r\n        \"@jest/types\": \"^29.6.3\",\r\n        \"import-local\": \"^3.0.2\",\r\n        \"jest-cli\": \"^29.7.0\"\r\n      },\r\n      \"bin\": {\r\n        \"jest\": \"bin/jest.js\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"node-notifier\": \"^8.0.1 || ^9.0.0 || ^10.0.0\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"node-notifier\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"node_modules/jest-changed-files\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/jest-changed-files/-/jest-changed-files-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-fEArFiwf1BpQ+4bXSprcDc3/x4HSzL4al2tozwVpDFpsxALjLYdyiIK4e5Vz66GQJIbXJ82+35PtysofptNX2w==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"execa\": \"^5.0.0\",\r\n        \"jest-util\": \"^29.7.0\",\r\n        \"p-limit\": \"^3.1.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/jest-circus\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/jest-circus/-/jest-circus-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-3E1nCMgipcTkCocFwM90XXQab9bS+GMsjdpmPrlelaxwD93Ad8iVEjX/vvHPdLPnFf+L40u+5+iutRdA1N9myw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@jest/environment\": \"^29.7.0\",\r\n        \"@jest/expect\": \"^29.7.0\",\r\n        \"@jest/test-result\": \"^29.7.0\",\r\n        \"@jest/types\": \"^29.6.3\",\r\n        \"@types/node\": \"*\",\r\n        \"chalk\": \"^4.0.0\",\r\n        \"co\": \"^4.6.0\",\r\n        \"dedent\": \"^1.0.0\",\r\n        \"is-generator-fn\": \"^2.0.0\",\r\n        \"jest-each\": \"^29.7.0\",\r\n        \"jest-matcher-utils\": \"^29.7.0\",\r\n        \"jest-message-util\": \"^29.7.0\",\r\n        \"jest-runtime\": \"^29.7.0\",\r\n        \"jest-snapshot\": \"^29.7.0\",\r\n        \"jest-util\": \"^29.7.0\",\r\n        \"p-limit\": \"^3.1.0\",\r\n        \"pretty-format\": \"^29.7.0\",\r\n        \"pure-rand\": \"^6.0.0\",\r\n        \"slash\": \"^3.0.0\",\r\n        \"stack-utils\": \"^2.0.3\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/jest-cli\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/jest-cli/-/jest-cli-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-OVVobw2IubN/GSYsxETi+gOe7Ka59EFMR/twOU3Jb2GnKKeMGJB5SGUUrEz3SFVmJASUdZUzy83sLNNQ2gZslg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@jest/core\": \"^29.7.0\",\r\n        \"@jest/test-result\": \"^29.7.0\",\r\n        \"@jest/types\": \"^29.6.3\",\r\n        \"chalk\": \"^4.0.0\",\r\n        \"create-jest\": \"^29.7.0\",\r\n        \"exit\": \"^0.1.2\",\r\n        \"import-local\": \"^3.0.2\",\r\n        \"jest-config\": \"^29.7.0\",\r\n        \"jest-util\": \"^29.7.0\",\r\n        \"jest-validate\": \"^29.7.0\",\r\n        \"yargs\": \"^17.3.1\"\r\n      },\r\n      \"bin\": {\r\n        \"jest\": \"bin/jest.js\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"node-notifier\": \"^8.0.1 || ^9.0.0 || ^10.0.0\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"node-notifier\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"node_modules/jest-config\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/jest-config/-/jest-config-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-uXbpfeQ7R6TZBqI3/TxCU4q4ttk3u0PJeC+E0zbfSoSjq6bJ7buBPxzQPL0ifrkY4DNu4JUdk0ImlBUYi840eQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/core\": \"^7.11.6\",\r\n        \"@jest/test-sequencer\": \"^29.7.0\",\r\n        \"@jest/types\": \"^29.6.3\",\r\n        \"babel-jest\": \"^29.7.0\",\r\n        \"chalk\": \"^4.0.0\",\r\n        \"ci-info\": \"^3.2.0\",\r\n        \"deepmerge\": \"^4.2.2\",\r\n        \"glob\": \"^7.1.3\",\r\n        \"graceful-fs\": \"^4.2.9\",\r\n        \"jest-circus\": \"^29.7.0\",\r\n        \"jest-environment-node\": \"^29.7.0\",\r\n        \"jest-get-type\": \"^29.6.3\",\r\n        \"jest-regex-util\": \"^29.6.3\",\r\n        \"jest-resolve\": \"^29.7.0\",\r\n        \"jest-runner\": \"^29.7.0\",\r\n        \"jest-util\": \"^29.7.0\",\r\n        \"jest-validate\": \"^29.7.0\",\r\n        \"micromatch\": \"^4.0.4\",\r\n        \"parse-json\": \"^5.2.0\",\r\n        \"pretty-format\": \"^29.7.0\",\r\n        \"slash\": \"^3.0.0\",\r\n        \"strip-json-comments\": \"^3.1.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@types/node\": \"*\",\r\n        \"ts-node\": \">=9.0.0\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"@types/node\": {\r\n          \"optional\": true\r\n        },\r\n        \"ts-node\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"node_modules/jest-config/node_modules/brace-expansion\": {\r\n      \"version\": \"1.1.11\",\r\n      \"resolved\": \"https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz\",\r\n      \"integrity\": \"sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"balanced-match\": \"^1.0.0\",\r\n        \"concat-map\": \"0.0.1\"\r\n      }\r\n    },\r\n    \"node_modules/jest-config/node_modules/glob\": {\r\n      \"version\": \"7.2.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/glob/-/glob-7.2.3.tgz\",\r\n      \"integrity\": \"sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==\",\r\n      \"deprecated\": \"Glob versions prior to v9 are no longer supported\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"fs.realpath\": \"^1.0.0\",\r\n        \"inflight\": \"^1.0.4\",\r\n        \"inherits\": \"2\",\r\n        \"minimatch\": \"^3.1.1\",\r\n        \"once\": \"^1.3.0\",\r\n        \"path-is-absolute\": \"^1.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"*\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/isaacs\"\r\n      }\r\n    },\r\n    \"node_modules/jest-config/node_modules/minimatch\": {\r\n      \"version\": \"3.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz\",\r\n      \"integrity\": \"sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"brace-expansion\": \"^1.1.7\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"*\"\r\n      }\r\n    },\r\n    \"node_modules/jest-diff\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/jest-diff/-/jest-diff-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-LMIgiIrhigmPrs03JHpxUh2yISK3vLFPkAodPeo0+BuF7wA2FoQbkEg1u8gBYBThncu7e1oEDUfIXVuTqLRUjw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"chalk\": \"^4.0.0\",\r\n        \"diff-sequences\": \"^29.6.3\",\r\n        \"jest-get-type\": \"^29.6.3\",\r\n        \"pretty-format\": \"^29.7.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/jest-docblock\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/jest-docblock/-/jest-docblock-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-q617Auw3A612guyaFgsbFeYpNP5t2aoUNLwBUbc/0kD1R4t9ixDbyFTHd1nok4epoVFpr7PmeWHrhvuV3XaJ4g==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"detect-newline\": \"^3.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/jest-each\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/jest-each/-/jest-each-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-gns+Er14+ZrEoC5fhOfYCY1LOHHr0TI+rQUHZS8Ttw2l7gl+80eHc/gFf2Ktkw0+SIACDTeWvpFcv3B04VembQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@jest/types\": \"^29.6.3\",\r\n        \"chalk\": \"^4.0.0\",\r\n        \"jest-get-type\": \"^29.6.3\",\r\n        \"jest-util\": \"^29.7.0\",\r\n        \"pretty-format\": \"^29.7.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/jest-environment-node\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/jest-environment-node/-/jest-environment-node-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-DOSwCRqXirTOyheM+4d5YZOrWcdu0LNZ87ewUoywbcb2XR4wKgqiG8vNeYwhjFMbEkfju7wx2GYH0P2gevGvFw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@jest/environment\": \"^29.7.0\",\r\n        \"@jest/fake-timers\": \"^29.7.0\",\r\n        \"@jest/types\": \"^29.6.3\",\r\n        \"@types/node\": \"*\",\r\n        \"jest-mock\": \"^29.7.0\",\r\n        \"jest-util\": \"^29.7.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/jest-get-type\": {\r\n      \"version\": \"29.6.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/jest-get-type/-/jest-get-type-29.6.3.tgz\",\r\n      \"integrity\": \"sha512-zrteXnqYxfQh7l5FHyL38jL39di8H8rHoecLH3JNxH3BwOrBsNeabdap5e0I23lD4HHI8W5VFBZqG4Eaq5LNcw==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/jest-haste-map\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/jest-haste-map/-/jest-haste-map-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-fP8u2pyfqx0K1rGn1R9pyE0/KTn+G7PxktWidOBTqFPLYX0b9ksaMFkhK5vrS3DVun09pckLdlx90QthlW7AmA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@jest/types\": \"^29.6.3\",\r\n        \"@types/graceful-fs\": \"^4.1.3\",\r\n        \"@types/node\": \"*\",\r\n        \"anymatch\": \"^3.0.3\",\r\n        \"fb-watchman\": \"^2.0.0\",\r\n        \"graceful-fs\": \"^4.2.9\",\r\n        \"jest-regex-util\": \"^29.6.3\",\r\n        \"jest-util\": \"^29.7.0\",\r\n        \"jest-worker\": \"^29.7.0\",\r\n        \"micromatch\": \"^4.0.4\",\r\n        \"walker\": \"^1.0.8\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      },\r\n      \"optionalDependencies\": {\r\n        \"fsevents\": \"^2.3.2\"\r\n      }\r\n    },\r\n    \"node_modules/jest-leak-detector\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/jest-leak-detector/-/jest-leak-detector-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-kYA8IJcSYtST2BY9I+SMC32nDpBT3J2NvWJx8+JCuCdl/CR1I4EKUJROiP8XtCcxqgTTBGJNdbB1A8XRKbTetw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"jest-get-type\": \"^29.6.3\",\r\n        \"pretty-format\": \"^29.7.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/jest-matcher-utils\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/jest-matcher-utils/-/jest-matcher-utils-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-sBkD+Xi9DtcChsI3L3u0+N0opgPYnCRPtGcQYrgXmR+hmt/fYfWAL0xRXYU8eWOdfuLgBe0YCW3AFtnRLagq/g==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"chalk\": \"^4.0.0\",\r\n        \"jest-diff\": \"^29.7.0\",\r\n        \"jest-get-type\": \"^29.6.3\",\r\n        \"pretty-format\": \"^29.7.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/jest-message-util\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/jest-message-util/-/jest-message-util-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-GBEV4GRADeP+qtB2+6u61stea8mGcOT4mCtrYISZwfu9/ISHFJ/5zOMXYbpBE9RsS5+Gb63DW4FgmnKJ79Kf6w==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/code-frame\": \"^7.12.13\",\r\n        \"@jest/types\": \"^29.6.3\",\r\n        \"@types/stack-utils\": \"^2.0.0\",\r\n        \"chalk\": \"^4.0.0\",\r\n        \"graceful-fs\": \"^4.2.9\",\r\n        \"micromatch\": \"^4.0.4\",\r\n        \"pretty-format\": \"^29.7.0\",\r\n        \"slash\": \"^3.0.0\",\r\n        \"stack-utils\": \"^2.0.3\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/jest-mock\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/jest-mock/-/jest-mock-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-ITOMZn+UkYS4ZFh83xYAOzWStloNzJFO2s8DWrE4lhtGD+AorgnbkiKERe4wQVBydIGPx059g6riW5Btp6Llnw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@jest/types\": \"^29.6.3\",\r\n        \"@types/node\": \"*\",\r\n        \"jest-util\": \"^29.7.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/jest-pnp-resolver\": {\r\n      \"version\": \"1.2.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/jest-pnp-resolver/-/jest-pnp-resolver-1.2.3.tgz\",\r\n      \"integrity\": \"sha512-+3NpwQEnRoIBtx4fyhblQDPgJI0H1IEIkX7ShLUjPGA7TtUTvI1oiKi3SR4oBR0hQhQR80l4WAe5RrXBwWMA8w==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=6\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"jest-resolve\": \"*\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"jest-resolve\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"node_modules/jest-regex-util\": {\r\n      \"version\": \"29.6.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/jest-regex-util/-/jest-regex-util-29.6.3.tgz\",\r\n      \"integrity\": \"sha512-KJJBsRCyyLNWCNBOvZyRDnAIfUiRJ8v+hOBQYGn8gDyF3UegwiP4gwRR3/SDa42g1YbVycTidUF3rKjyLFDWbg==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/jest-resolve\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/jest-resolve/-/jest-resolve-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-IOVhZSrg+UvVAshDSDtHyFCCBUl/Q3AAJv8iZ6ZjnZ74xzvwuzLXid9IIIPgTnY62SJjfuupMKZsZQRsCvxEgA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"chalk\": \"^4.0.0\",\r\n        \"graceful-fs\": \"^4.2.9\",\r\n        \"jest-haste-map\": \"^29.7.0\",\r\n        \"jest-pnp-resolver\": \"^1.2.2\",\r\n        \"jest-util\": \"^29.7.0\",\r\n        \"jest-validate\": \"^29.7.0\",\r\n        \"resolve\": \"^1.20.0\",\r\n        \"resolve.exports\": \"^2.0.0\",\r\n        \"slash\": \"^3.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/jest-resolve-dependencies\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/jest-resolve-dependencies/-/jest-resolve-dependencies-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-un0zD/6qxJ+S0et7WxeI3H5XSe9lTBBR7bOHCHXkKR6luG5mwDDlIzVQ0V5cZCuoTgEdcdwzTghYkTWfubi+nA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"jest-regex-util\": \"^29.6.3\",\r\n        \"jest-snapshot\": \"^29.7.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/jest-runner\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/jest-runner/-/jest-runner-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-fsc4N6cPCAahybGBfTRcq5wFR6fpLznMg47sY5aDpsoejOcVYFb07AHuSnR0liMcPTgBsA3ZJL6kFOjPdoNipQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@jest/console\": \"^29.7.0\",\r\n        \"@jest/environment\": \"^29.7.0\",\r\n        \"@jest/test-result\": \"^29.7.0\",\r\n        \"@jest/transform\": \"^29.7.0\",\r\n        \"@jest/types\": \"^29.6.3\",\r\n        \"@types/node\": \"*\",\r\n        \"chalk\": \"^4.0.0\",\r\n        \"emittery\": \"^0.13.1\",\r\n        \"graceful-fs\": \"^4.2.9\",\r\n        \"jest-docblock\": \"^29.7.0\",\r\n        \"jest-environment-node\": \"^29.7.0\",\r\n        \"jest-haste-map\": \"^29.7.0\",\r\n        \"jest-leak-detector\": \"^29.7.0\",\r\n        \"jest-message-util\": \"^29.7.0\",\r\n        \"jest-resolve\": \"^29.7.0\",\r\n        \"jest-runtime\": \"^29.7.0\",\r\n        \"jest-util\": \"^29.7.0\",\r\n        \"jest-watcher\": \"^29.7.0\",\r\n        \"jest-worker\": \"^29.7.0\",\r\n        \"p-limit\": \"^3.1.0\",\r\n        \"source-map-support\": \"0.5.13\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/jest-runner/node_modules/source-map\": {\r\n      \"version\": \"0.6.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz\",\r\n      \"integrity\": \"sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=0.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/jest-runner/node_modules/source-map-support\": {\r\n      \"version\": \"0.5.13\",\r\n      \"resolved\": \"https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.13.tgz\",\r\n      \"integrity\": \"sha512-SHSKFHadjVA5oR4PPqhtAVdcBWwRYVd6g6cAXnIbRiIwc2EhPrTuKUBdSLvlEKyIP3GCf89fltvcZiP9MMFA1w==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"buffer-from\": \"^1.0.0\",\r\n        \"source-map\": \"^0.6.0\"\r\n      }\r\n    },\r\n    \"node_modules/jest-runtime\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/jest-runtime/-/jest-runtime-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-gUnLjgwdGqW7B4LvOIkbKs9WGbn+QLqRQQ9juC6HndeDiezIwhDP+mhMwHWCEcfQ5RUXa6OPnFF8BJh5xegwwQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@jest/environment\": \"^29.7.0\",\r\n        \"@jest/fake-timers\": \"^29.7.0\",\r\n        \"@jest/globals\": \"^29.7.0\",\r\n        \"@jest/source-map\": \"^29.6.3\",\r\n        \"@jest/test-result\": \"^29.7.0\",\r\n        \"@jest/transform\": \"^29.7.0\",\r\n        \"@jest/types\": \"^29.6.3\",\r\n        \"@types/node\": \"*\",\r\n        \"chalk\": \"^4.0.0\",\r\n        \"cjs-module-lexer\": \"^1.0.0\",\r\n        \"collect-v8-coverage\": \"^1.0.0\",\r\n        \"glob\": \"^7.1.3\",\r\n        \"graceful-fs\": \"^4.2.9\",\r\n        \"jest-haste-map\": \"^29.7.0\",\r\n        \"jest-message-util\": \"^29.7.0\",\r\n        \"jest-mock\": \"^29.7.0\",\r\n        \"jest-regex-util\": \"^29.6.3\",\r\n        \"jest-resolve\": \"^29.7.0\",\r\n        \"jest-snapshot\": \"^29.7.0\",\r\n        \"jest-util\": \"^29.7.0\",\r\n        \"slash\": \"^3.0.0\",\r\n        \"strip-bom\": \"^4.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/jest-runtime/node_modules/brace-expansion\": {\r\n      \"version\": \"1.1.11\",\r\n      \"resolved\": \"https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz\",\r\n      \"integrity\": \"sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"balanced-match\": \"^1.0.0\",\r\n        \"concat-map\": \"0.0.1\"\r\n      }\r\n    },\r\n    \"node_modules/jest-runtime/node_modules/glob\": {\r\n      \"version\": \"7.2.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/glob/-/glob-7.2.3.tgz\",\r\n      \"integrity\": \"sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==\",\r\n      \"deprecated\": \"Glob versions prior to v9 are no longer supported\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"fs.realpath\": \"^1.0.0\",\r\n        \"inflight\": \"^1.0.4\",\r\n        \"inherits\": \"2\",\r\n        \"minimatch\": \"^3.1.1\",\r\n        \"once\": \"^1.3.0\",\r\n        \"path-is-absolute\": \"^1.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"*\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/isaacs\"\r\n      }\r\n    },\r\n    \"node_modules/jest-runtime/node_modules/minimatch\": {\r\n      \"version\": \"3.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz\",\r\n      \"integrity\": \"sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"brace-expansion\": \"^1.1.7\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"*\"\r\n      }\r\n    },\r\n    \"node_modules/jest-snapshot\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/jest-snapshot/-/jest-snapshot-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-Rm0BMWtxBcioHr1/OX5YCP8Uov4riHvKPknOGs804Zg9JGZgmIBkbtlxJC/7Z4msKYVbIJtfU+tKb8xlYNfdkw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/core\": \"^7.11.6\",\r\n        \"@babel/generator\": \"^7.7.2\",\r\n        \"@babel/plugin-syntax-jsx\": \"^7.7.2\",\r\n        \"@babel/plugin-syntax-typescript\": \"^7.7.2\",\r\n        \"@babel/types\": \"^7.3.3\",\r\n        \"@jest/expect-utils\": \"^29.7.0\",\r\n        \"@jest/transform\": \"^29.7.0\",\r\n        \"@jest/types\": \"^29.6.3\",\r\n        \"babel-preset-current-node-syntax\": \"^1.0.0\",\r\n        \"chalk\": \"^4.0.0\",\r\n        \"expect\": \"^29.7.0\",\r\n        \"graceful-fs\": \"^4.2.9\",\r\n        \"jest-diff\": \"^29.7.0\",\r\n        \"jest-get-type\": \"^29.6.3\",\r\n        \"jest-matcher-utils\": \"^29.7.0\",\r\n        \"jest-message-util\": \"^29.7.0\",\r\n        \"jest-util\": \"^29.7.0\",\r\n        \"natural-compare\": \"^1.4.0\",\r\n        \"pretty-format\": \"^29.7.0\",\r\n        \"semver\": \"^7.5.3\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/jest-util\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/jest-util/-/jest-util-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-z6EbKajIpqGKU56y5KBUgy1dt1ihhQJgWzUlZHArA/+X2ad7Cb5iF+AK1EWVL/Bo7Rz9uurpqw6SiBCefUbCGA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@jest/types\": \"^29.6.3\",\r\n        \"@types/node\": \"*\",\r\n        \"chalk\": \"^4.0.0\",\r\n        \"ci-info\": \"^3.2.0\",\r\n        \"graceful-fs\": \"^4.2.9\",\r\n        \"picomatch\": \"^2.2.3\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/jest-util/node_modules/picomatch\": {\r\n      \"version\": \"2.3.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz\",\r\n      \"integrity\": \"sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=8.6\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/jonschlinkert\"\r\n      }\r\n    },\r\n    \"node_modules/jest-validate\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/jest-validate/-/jest-validate-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-ZB7wHqaRGVw/9hST/OuFUReG7M8vKeq0/J2egIGLdvjHCmYqGARhzXmtgi+gVeZ5uXFF219aOc3Ls2yLg27tkw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@jest/types\": \"^29.6.3\",\r\n        \"camelcase\": \"^6.2.0\",\r\n        \"chalk\": \"^4.0.0\",\r\n        \"jest-get-type\": \"^29.6.3\",\r\n        \"leven\": \"^3.1.0\",\r\n        \"pretty-format\": \"^29.7.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/jest-validate/node_modules/camelcase\": {\r\n      \"version\": \"6.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/camelcase/-/camelcase-6.3.0.tgz\",\r\n      \"integrity\": \"sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/jest-watcher\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/jest-watcher/-/jest-watcher-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-49Fg7WXkU3Vl2h6LbLtMQ/HyB6rXSIX7SqvBLQmssRBGN9I0PNvPmAmCWSOY6SOvrjhI/F7/bGAv9RtnsPA03g==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@jest/test-result\": \"^29.7.0\",\r\n        \"@jest/types\": \"^29.6.3\",\r\n        \"@types/node\": \"*\",\r\n        \"ansi-escapes\": \"^4.2.1\",\r\n        \"chalk\": \"^4.0.0\",\r\n        \"emittery\": \"^0.13.1\",\r\n        \"jest-util\": \"^29.7.0\",\r\n        \"string-length\": \"^4.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/jest-worker\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/jest-worker/-/jest-worker-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-eIz2msL/EzL9UFTFFx7jBTkeZfku0yUAyZZZmJ93H2TYEiroIx2PQjEXcwYtYl8zXCxb+PAmA2hLIt/6ZEkPHw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@types/node\": \"*\",\r\n        \"jest-util\": \"^29.7.0\",\r\n        \"merge-stream\": \"^2.0.0\",\r\n        \"supports-color\": \"^8.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/jest-worker/node_modules/supports-color\": {\r\n      \"version\": \"8.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz\",\r\n      \"integrity\": \"sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"has-flag\": \"^4.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/chalk/supports-color?sponsor=1\"\r\n      }\r\n    },\r\n    \"node_modules/js-tokens\": {\r\n      \"version\": \"4.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz\",\r\n      \"integrity\": \"sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/js-yaml\": {\r\n      \"version\": \"4.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz\",\r\n      \"integrity\": \"sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==\",\r\n      \"dependencies\": {\r\n        \"argparse\": \"^2.0.1\"\r\n      },\r\n      \"bin\": {\r\n        \"js-yaml\": \"bin/js-yaml.js\"\r\n      }\r\n    },\r\n    \"node_modules/jsesc\": {\r\n      \"version\": \"3.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/jsesc/-/jsesc-3.0.2.tgz\",\r\n      \"integrity\": \"sha512-xKqzzWXDttJuOcawBt4KnKHHIf5oQ/Cxax+0PWFG+DFDgHNAdi+TXECADI+RYiFUMmx8792xsMbbgXj4CwnP4g==\",\r\n      \"dev\": true,\r\n      \"bin\": {\r\n        \"jsesc\": \"bin/jsesc\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=6\"\r\n      }\r\n    },\r\n    \"node_modules/json-buffer\": {\r\n      \"version\": \"3.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz\",\r\n      \"integrity\": \"sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/json-parse-even-better-errors\": {\r\n      \"version\": \"2.3.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz\",\r\n      \"integrity\": \"sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/json-schema-traverse\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz\",\r\n      \"integrity\": \"sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/json-stable-stringify-without-jsonify\": {\r\n      \"version\": \"1.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz\",\r\n      \"integrity\": \"sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/json5\": {\r\n      \"version\": \"2.2.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/json5/-/json5-2.2.3.tgz\",\r\n      \"integrity\": \"sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==\",\r\n      \"dev\": true,\r\n      \"bin\": {\r\n        \"json5\": \"lib/cli.js\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=6\"\r\n      }\r\n    },\r\n    \"node_modules/jsonc-parser\": {\r\n      \"version\": \"3.2.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/jsonc-parser/-/jsonc-parser-3.2.1.tgz\",\r\n      \"integrity\": \"sha512-AilxAyFOAcK5wA1+LeaySVBrHsGQvUFCDWXKpZjzaL0PqW+xfBOttn8GNtWKFWqneyMZj41MWF9Kl6iPWLwgOA==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/jsonfile\": {\r\n      \"version\": \"6.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/jsonfile/-/jsonfile-6.1.0.tgz\",\r\n      \"integrity\": \"sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"universalify\": \"^2.0.0\"\r\n      },\r\n      \"optionalDependencies\": {\r\n        \"graceful-fs\": \"^4.1.6\"\r\n      }\r\n    },\r\n    \"node_modules/jsonwebtoken\": {\r\n      \"version\": \"9.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz\",\r\n      \"integrity\": \"sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==\",\r\n      \"dependencies\": {\r\n        \"jws\": \"^3.2.2\",\r\n        \"lodash.includes\": \"^4.3.0\",\r\n        \"lodash.isboolean\": \"^3.0.3\",\r\n        \"lodash.isinteger\": \"^4.0.4\",\r\n        \"lodash.isnumber\": \"^3.0.3\",\r\n        \"lodash.isplainobject\": \"^4.0.6\",\r\n        \"lodash.isstring\": \"^4.0.1\",\r\n        \"lodash.once\": \"^4.0.0\",\r\n        \"ms\": \"^2.1.1\",\r\n        \"semver\": \"^7.5.4\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=12\",\r\n        \"npm\": \">=6\"\r\n      }\r\n    },\r\n    \"node_modules/jwa\": {\r\n      \"version\": \"1.4.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/jwa/-/jwa-1.4.1.tgz\",\r\n      \"integrity\": \"sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==\",\r\n      \"dependencies\": {\r\n        \"buffer-equal-constant-time\": \"1.0.1\",\r\n        \"ecdsa-sig-formatter\": \"1.0.11\",\r\n        \"safe-buffer\": \"^5.0.1\"\r\n      }\r\n    },\r\n    \"node_modules/jws\": {\r\n      \"version\": \"3.2.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/jws/-/jws-3.2.2.tgz\",\r\n      \"integrity\": \"sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==\",\r\n      \"dependencies\": {\r\n        \"jwa\": \"^1.4.1\",\r\n        \"safe-buffer\": \"^5.0.1\"\r\n      }\r\n    },\r\n    \"node_modules/keyv\": {\r\n      \"version\": \"4.5.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz\",\r\n      \"integrity\": \"sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"json-buffer\": \"3.0.1\"\r\n      }\r\n    },\r\n    \"node_modules/kleur\": {\r\n      \"version\": \"3.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/kleur/-/kleur-3.0.3.tgz\",\r\n      \"integrity\": \"sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=6\"\r\n      }\r\n    },\r\n    \"node_modules/leven\": {\r\n      \"version\": \"3.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/leven/-/leven-3.1.0.tgz\",\r\n      \"integrity\": \"sha512-qsda+H8jTaUaN/x5vzW2rzc+8Rw4TAQ/4KjB46IwK5VH+IlVeeeje/EoZRpiXvIqjFgK84QffqPztGI3VBLG1A==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=6\"\r\n      }\r\n    },\r\n    \"node_modules/levn\": {\r\n      \"version\": \"0.4.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/levn/-/levn-0.4.1.tgz\",\r\n      \"integrity\": \"sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"prelude-ls\": \"^1.2.1\",\r\n        \"type-check\": \"~0.4.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.8.0\"\r\n      }\r\n    },\r\n    \"node_modules/libphonenumber-js\": {\r\n      \"version\": \"1.11.12\",\r\n      \"resolved\": \"https://registry.npmjs.org/libphonenumber-js/-/libphonenumber-js-1.11.12.tgz\",\r\n      \"integrity\": \"sha512-QkJn9/D7zZ1ucvT++TQSvZuSA2xAWeUytU+DiEQwbPKLyrDpvbul2AFs1CGbRAPpSCCk47aRAb5DX5mmcayp4g==\"\r\n    },\r\n    \"node_modules/lines-and-columns\": {\r\n      \"version\": \"1.2.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz\",\r\n      \"integrity\": \"sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/loader-runner\": {\r\n      \"version\": \"4.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/loader-runner/-/loader-runner-4.3.0.tgz\",\r\n      \"integrity\": \"sha512-3R/1M+yS3j5ou80Me59j7F9IMs4PXs3VqRrm0TU3AbKPxlmpoY1TNscJV/oGJXo8qCatFGTfDbY6W6ipGOYXfg==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=6.11.5\"\r\n      }\r\n    },\r\n    \"node_modules/locate-path\": {\r\n      \"version\": \"6.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz\",\r\n      \"integrity\": \"sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"p-locate\": \"^5.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/lodash\": {\r\n      \"version\": \"4.17.21\",\r\n      \"resolved\": \"https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz\",\r\n      \"integrity\": \"sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==\"\r\n    },\r\n    \"node_modules/lodash.includes\": {\r\n      \"version\": \"4.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz\",\r\n      \"integrity\": \"sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w==\"\r\n    },\r\n    \"node_modules/lodash.isboolean\": {\r\n      \"version\": \"3.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz\",\r\n      \"integrity\": \"sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg==\"\r\n    },\r\n    \"node_modules/lodash.isinteger\": {\r\n      \"version\": \"4.0.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz\",\r\n      \"integrity\": \"sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA==\"\r\n    },\r\n    \"node_modules/lodash.isnumber\": {\r\n      \"version\": \"3.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz\",\r\n      \"integrity\": \"sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw==\"\r\n    },\r\n    \"node_modules/lodash.isplainobject\": {\r\n      \"version\": \"4.0.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz\",\r\n      \"integrity\": \"sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==\"\r\n    },\r\n    \"node_modules/lodash.isstring\": {\r\n      \"version\": \"4.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz\",\r\n      \"integrity\": \"sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw==\"\r\n    },\r\n    \"node_modules/lodash.memoize\": {\r\n      \"version\": \"4.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/lodash.memoize/-/lodash.memoize-4.1.2.tgz\",\r\n      \"integrity\": \"sha512-t7j+NzmgnQzTAYXcsHYLgimltOV1MXHtlOWf6GjL9Kj8GK5FInw5JotxvbOs+IvV1/Dzo04/fCGfLVs7aXb4Ag==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/lodash.merge\": {\r\n      \"version\": \"4.6.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz\",\r\n      \"integrity\": \"sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/lodash.once\": {\r\n      \"version\": \"4.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz\",\r\n      \"integrity\": \"sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg==\"\r\n    },\r\n    \"node_modules/log-symbols\": {\r\n      \"version\": \"4.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/log-symbols/-/log-symbols-4.1.0.tgz\",\r\n      \"integrity\": \"sha512-8XPvpAA8uyhfteu8pIvQxpJZ7SYYdpUivZpGy6sFsBuKRY/7rQGavedeB8aK+Zkyq6upMFVL/9AW6vOYzfRyLg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"chalk\": \"^4.1.0\",\r\n        \"is-unicode-supported\": \"^0.1.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/long\": {\r\n      \"version\": \"5.2.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/long/-/long-5.2.3.tgz\",\r\n      \"integrity\": \"sha512-lcHwpNoggQTObv5apGNCTdJrO69eHOZMi4BNC+rTLER8iHAqGrUVeLh/irVIM7zTw2bOXA8T6uNPeujwOLg/2Q==\"\r\n    },\r\n    \"node_modules/lru-cache\": {\r\n      \"version\": \"5.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz\",\r\n      \"integrity\": \"sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"yallist\": \"^3.0.2\"\r\n      }\r\n    },\r\n    \"node_modules/lru.min\": {\r\n      \"version\": \"1.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/lru.min/-/lru.min-1.1.1.tgz\",\r\n      \"integrity\": \"sha512-FbAj6lXil6t8z4z3j0E5mfRlPzxkySotzUHwRXjlpRh10vc6AI6WN62ehZj82VG7M20rqogJ0GLwar2Xa05a8Q==\",\r\n      \"engines\": {\r\n        \"bun\": \">=1.0.0\",\r\n        \"deno\": \">=1.30.0\",\r\n        \"node\": \">=8.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"type\": \"github\",\r\n        \"url\": \"https://github.com/sponsors/wellwelwel\"\r\n      }\r\n    },\r\n    \"node_modules/magic-string\": {\r\n      \"version\": \"0.30.8\",\r\n      \"resolved\": \"https://registry.npmjs.org/magic-string/-/magic-string-0.30.8.tgz\",\r\n      \"integrity\": \"sha512-ISQTe55T2ao7XtlAStud6qwYPZjE4GK1S/BeVPus4jrq6JuOnQ00YKQC581RWhR122W7msZV263KzVeLoqidyQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@jridgewell/sourcemap-codec\": \"^1.4.15\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=12\"\r\n      }\r\n    },\r\n    \"node_modules/make-dir\": {\r\n      \"version\": \"3.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/make-dir/-/make-dir-3.1.0.tgz\",\r\n      \"integrity\": \"sha512-g3FeP20LNwhALb/6Cz6Dd4F2ngze0jz7tbzrD2wAV+o9FeNHe4rL+yK2md0J/fiSf1sa1ADhXqi5+oVwOM/eGw==\",\r\n      \"dependencies\": {\r\n        \"semver\": \"^6.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/make-dir/node_modules/semver\": {\r\n      \"version\": \"6.3.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/semver/-/semver-6.3.1.tgz\",\r\n      \"integrity\": \"sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==\",\r\n      \"bin\": {\r\n        \"semver\": \"bin/semver.js\"\r\n      }\r\n    },\r\n    \"node_modules/make-error\": {\r\n      \"version\": \"1.3.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz\",\r\n      \"integrity\": \"sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw==\",\r\n      \"devOptional\": true\r\n    },\r\n    \"node_modules/makeerror\": {\r\n      \"version\": \"1.0.12\",\r\n      \"resolved\": \"https://registry.npmjs.org/makeerror/-/makeerror-1.0.12.tgz\",\r\n      \"integrity\": \"sha512-JmqCvUhmt43madlpFzG4BQzG2Z3m6tvQDNKdClZnO3VbIudJYmxsT0FNJMeiB2+JTSlTQTSbU8QdesVmwJcmLg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"tmpl\": \"1.0.5\"\r\n      }\r\n    },\r\n    \"node_modules/media-typer\": {\r\n      \"version\": \"0.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz\",\r\n      \"integrity\": \"sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/memfs\": {\r\n      \"version\": \"3.5.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/memfs/-/memfs-3.5.3.tgz\",\r\n      \"integrity\": \"sha512-UERzLsxzllchadvbPs5aolHh65ISpKpM+ccLbOJ8/vvpBKmAWf+la7dXFy7Mr0ySHbdHrFv5kGFCUHHe6GFEmw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"fs-monkey\": \"^1.0.4\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 4.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/merge-descriptors\": {\r\n      \"version\": \"1.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.3.tgz\",\r\n      \"integrity\": \"sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ==\",\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/merge-stream\": {\r\n      \"version\": \"2.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz\",\r\n      \"integrity\": \"sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/merge2\": {\r\n      \"version\": \"1.4.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz\",\r\n      \"integrity\": \"sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">= 8\"\r\n      }\r\n    },\r\n    \"node_modules/methods\": {\r\n      \"version\": \"1.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/methods/-/methods-1.1.2.tgz\",\r\n      \"integrity\": \"sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/micromatch\": {\r\n      \"version\": \"4.0.8\",\r\n      \"resolved\": \"https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz\",\r\n      \"integrity\": \"sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"braces\": \"^3.0.3\",\r\n        \"picomatch\": \"^2.3.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8.6\"\r\n      }\r\n    },\r\n    \"node_modules/micromatch/node_modules/picomatch\": {\r\n      \"version\": \"2.3.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz\",\r\n      \"integrity\": \"sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=8.6\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/jonschlinkert\"\r\n      }\r\n    },\r\n    \"node_modules/mime\": {\r\n      \"version\": \"1.6.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/mime/-/mime-1.6.0.tgz\",\r\n      \"integrity\": \"sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==\",\r\n      \"bin\": {\r\n        \"mime\": \"cli.js\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=4\"\r\n      }\r\n    },\r\n    \"node_modules/mime-db\": {\r\n      \"version\": \"1.52.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz\",\r\n      \"integrity\": \"sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/mime-types\": {\r\n      \"version\": \"2.1.35\",\r\n      \"resolved\": \"https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz\",\r\n      \"integrity\": \"sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==\",\r\n      \"dependencies\": {\r\n        \"mime-db\": \"1.52.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/mimic-fn\": {\r\n      \"version\": \"2.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz\",\r\n      \"integrity\": \"sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=6\"\r\n      }\r\n    },\r\n    \"node_modules/minimatch\": {\r\n      \"version\": \"9.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-9.0.3.tgz\",\r\n      \"integrity\": \"sha512-RHiac9mvaRw0x3AYRgDC1CxAP7HTcNrrECeA8YYJeWnpo+2Q5CegtZjaotWTWxDG3UeGA1coE05iH1mPjT/2mg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"brace-expansion\": \"^2.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=16 || 14 >=14.17\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/isaacs\"\r\n      }\r\n    },\r\n    \"node_modules/minimist\": {\r\n      \"version\": \"1.2.8\",\r\n      \"resolved\": \"https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz\",\r\n      \"integrity\": \"sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==\",\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/ljharb\"\r\n      }\r\n    },\r\n    \"node_modules/minipass\": {\r\n      \"version\": \"7.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz\",\r\n      \"integrity\": \"sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==\",\r\n      \"engines\": {\r\n        \"node\": \">=16 || 14 >=14.17\"\r\n      }\r\n    },\r\n    \"node_modules/minizlib\": {\r\n      \"version\": \"2.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/minizlib/-/minizlib-2.1.2.tgz\",\r\n      \"integrity\": \"sha512-bAxsR8BVfj60DWXHE3u30oHzfl4G7khkSuPW+qvpd7jFRHm7dLxOjUk1EHACJ/hxLY8phGJ0YhYHZo7jil7Qdg==\",\r\n      \"dependencies\": {\r\n        \"minipass\": \"^3.0.0\",\r\n        \"yallist\": \"^4.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 8\"\r\n      }\r\n    },\r\n    \"node_modules/minizlib/node_modules/minipass\": {\r\n      \"version\": \"3.3.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz\",\r\n      \"integrity\": \"sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==\",\r\n      \"dependencies\": {\r\n        \"yallist\": \"^4.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/minizlib/node_modules/yallist\": {\r\n      \"version\": \"4.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz\",\r\n      \"integrity\": \"sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==\"\r\n    },\r\n    \"node_modules/mkdirp\": {\r\n      \"version\": \"0.5.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.6.tgz\",\r\n      \"integrity\": \"sha512-FP+p8RB8OWpF3YZBCrP5gtADmtXApB5AMLn+vdyA+PyxCjrCs00mjyUozssO33cwDeT3wNGdLxJ5M//YqtHAJw==\",\r\n      \"dependencies\": {\r\n        \"minimist\": \"^1.2.6\"\r\n      },\r\n      \"bin\": {\r\n        \"mkdirp\": \"bin/cmd.js\"\r\n      }\r\n    },\r\n    \"node_modules/ms\": {\r\n      \"version\": \"2.1.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.1.3.tgz\",\r\n      \"integrity\": \"sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==\"\r\n    },\r\n    \"node_modules/multer\": {\r\n      \"version\": \"1.4.4-lts.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/multer/-/multer-1.4.4-lts.1.tgz\",\r\n      \"integrity\": \"sha512-WeSGziVj6+Z2/MwQo3GvqzgR+9Uc+qt8SwHKh3gvNPiISKfsMfG4SvCOFYlxxgkXt7yIV2i1yczehm0EOKIxIg==\",\r\n      \"dependencies\": {\r\n        \"append-field\": \"^1.0.0\",\r\n        \"busboy\": \"^1.0.0\",\r\n        \"concat-stream\": \"^1.5.2\",\r\n        \"mkdirp\": \"^0.5.4\",\r\n        \"object-assign\": \"^4.1.1\",\r\n        \"type-is\": \"^1.6.4\",\r\n        \"xtend\": \"^4.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 6.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/mute-stream\": {\r\n      \"version\": \"0.0.8\",\r\n      \"resolved\": \"https://registry.npmjs.org/mute-stream/-/mute-stream-0.0.8.tgz\",\r\n      \"integrity\": \"sha512-nnbWWOkoWyUsTjKrhgD0dcz22mdkSnpYqbEjIm2nhwhuxlSkpywJmBo8h0ZqJdkp73mb90SssHkN4rsRaBAfAA==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/mysql2\": {\r\n      \"version\": \"3.11.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/mysql2/-/mysql2-3.11.3.tgz\",\r\n      \"integrity\": \"sha512-Qpu2ADfbKzyLdwC/5d4W7+5Yz7yBzCU05YWt5npWzACST37wJsB23wgOSo00qi043urkiRwXtEvJc9UnuLX/MQ==\",\r\n      \"dependencies\": {\r\n        \"aws-ssl-profiles\": \"^1.1.1\",\r\n        \"denque\": \"^2.1.0\",\r\n        \"generate-function\": \"^2.3.1\",\r\n        \"iconv-lite\": \"^0.6.3\",\r\n        \"long\": \"^5.2.1\",\r\n        \"lru.min\": \"^1.0.0\",\r\n        \"named-placeholders\": \"^1.1.3\",\r\n        \"seq-queue\": \"^0.0.5\",\r\n        \"sqlstring\": \"^2.3.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 8.0\"\r\n      }\r\n    },\r\n    \"node_modules/mysql2/node_modules/iconv-lite\": {\r\n      \"version\": \"0.6.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz\",\r\n      \"integrity\": \"sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==\",\r\n      \"dependencies\": {\r\n        \"safer-buffer\": \">= 2.1.2 < 3.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=0.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/mz\": {\r\n      \"version\": \"2.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/mz/-/mz-2.7.0.tgz\",\r\n      \"integrity\": \"sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==\",\r\n      \"dependencies\": {\r\n        \"any-promise\": \"^1.0.0\",\r\n        \"object-assign\": \"^4.0.1\",\r\n        \"thenify-all\": \"^1.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/named-placeholders\": {\r\n      \"version\": \"1.1.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/named-placeholders/-/named-placeholders-1.1.3.tgz\",\r\n      \"integrity\": \"sha512-eLoBxg6wE/rZkJPhU/xRX1WTpkFEwDJEN96oxFrTsqBdbT5ec295Q+CoHrL9IT0DipqKhmGcaZmwOt8OON5x1w==\",\r\n      \"dependencies\": {\r\n        \"lru-cache\": \"^7.14.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=12.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/named-placeholders/node_modules/lru-cache\": {\r\n      \"version\": \"7.18.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/lru-cache/-/lru-cache-7.18.3.tgz\",\r\n      \"integrity\": \"sha512-jumlc0BIUrS3qJGgIkWZsyfAM7NCWiBcCDhnd+3NNM5KbBmLTgHVfWBcg6W+rLUsIpzpERPsvwUP7CckAQSOoA==\",\r\n      \"engines\": {\r\n        \"node\": \">=12\"\r\n      }\r\n    },\r\n    \"node_modules/natural-compare\": {\r\n      \"version\": \"1.4.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz\",\r\n      \"integrity\": \"sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/negotiator\": {\r\n      \"version\": \"0.6.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz\",\r\n      \"integrity\": \"sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/neo-async\": {\r\n      \"version\": \"2.6.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/neo-async/-/neo-async-2.6.2.tgz\",\r\n      \"integrity\": \"sha512-Yd3UES5mWCSqR+qNT93S3UoYUkqAZ9lLg8a7g9rimsWmYGK8cVToA4/sF3RrshdyV3sAGMXVUmpMYOw+dLpOuw==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/node-abort-controller\": {\r\n      \"version\": \"3.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/node-abort-controller/-/node-abort-controller-3.1.1.tgz\",\r\n      \"integrity\": \"sha512-AGK2yQKIjRuqnc6VkX2Xj5d+QW8xZ87pa1UK6yA6ouUyuxfHuMP6umE5QK7UmTeOAymo+Zx1Fxiuw9rVx8taHQ==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/node-addon-api\": {\r\n      \"version\": \"5.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/node-addon-api/-/node-addon-api-5.1.0.tgz\",\r\n      \"integrity\": \"sha512-eh0GgfEkpnoWDq+VY8OyvYhFEzBk6jIYbRKdIlyTiAXIVJ8PyBaKb0rp7oDtoddbdoHWhq8wwr+XZ81F1rpNdA==\"\r\n    },\r\n    \"node_modules/node-emoji\": {\r\n      \"version\": \"1.11.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/node-emoji/-/node-emoji-1.11.0.tgz\",\r\n      \"integrity\": \"sha512-wo2DpQkQp7Sjm2A0cq+sN7EHKO6Sl0ctXeBdFZrL9T9+UywORbufTcTZxom8YqpLQt/FqNMUkOpkZrJVYSKD3A==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"lodash\": \"^4.17.21\"\r\n      }\r\n    },\r\n    \"node_modules/node-fetch\": {\r\n      \"version\": \"2.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/node-fetch/-/node-fetch-2.7.0.tgz\",\r\n      \"integrity\": \"sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==\",\r\n      \"dependencies\": {\r\n        \"whatwg-url\": \"^5.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"4.x || >=6.0.0\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"encoding\": \"^0.1.0\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"encoding\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"node_modules/node-int64\": {\r\n      \"version\": \"0.4.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/node-int64/-/node-int64-0.4.0.tgz\",\r\n      \"integrity\": \"sha512-O5lz91xSOeoXP6DulyHfllpq+Eg00MWitZIbtPfoSEvqIHdl5gfcY6hYzDWnj0qD5tz52PI08u9qUvSVeUBeHw==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/node-releases\": {\r\n      \"version\": \"2.0.18\",\r\n      \"resolved\": \"https://registry.npmjs.org/node-releases/-/node-releases-2.0.18.tgz\",\r\n      \"integrity\": \"sha512-d9VeXT4SJ7ZeOqGX6R5EM022wpL+eWPooLI+5UpWn2jCT1aosUQEhQP214x33Wkwx3JQMvIm+tIoVOdodFS40g==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/nodemon\": {\r\n      \"version\": \"3.1.7\",\r\n      \"resolved\": \"https://registry.npmjs.org/nodemon/-/nodemon-3.1.7.tgz\",\r\n      \"integrity\": \"sha512-hLj7fuMow6f0lbB0cD14Lz2xNjwsyruH251Pk4t/yIitCFJbmY1myuLlHm/q06aST4jg6EgAh74PIBBrRqpVAQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"chokidar\": \"^3.5.2\",\r\n        \"debug\": \"^4\",\r\n        \"ignore-by-default\": \"^1.0.1\",\r\n        \"minimatch\": \"^3.1.2\",\r\n        \"pstree.remy\": \"^1.1.8\",\r\n        \"semver\": \"^7.5.3\",\r\n        \"simple-update-notifier\": \"^2.0.0\",\r\n        \"supports-color\": \"^5.5.0\",\r\n        \"touch\": \"^3.1.0\",\r\n        \"undefsafe\": \"^2.0.5\"\r\n      },\r\n      \"bin\": {\r\n        \"nodemon\": \"bin/nodemon.js\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      },\r\n      \"funding\": {\r\n        \"type\": \"opencollective\",\r\n        \"url\": \"https://opencollective.com/nodemon\"\r\n      }\r\n    },\r\n    \"node_modules/nodemon/node_modules/brace-expansion\": {\r\n      \"version\": \"1.1.11\",\r\n      \"resolved\": \"https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz\",\r\n      \"integrity\": \"sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"balanced-match\": \"^1.0.0\",\r\n        \"concat-map\": \"0.0.1\"\r\n      }\r\n    },\r\n    \"node_modules/nodemon/node_modules/has-flag\": {\r\n      \"version\": \"3.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz\",\r\n      \"integrity\": \"sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=4\"\r\n      }\r\n    },\r\n    \"node_modules/nodemon/node_modules/minimatch\": {\r\n      \"version\": \"3.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz\",\r\n      \"integrity\": \"sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"brace-expansion\": \"^1.1.7\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"*\"\r\n      }\r\n    },\r\n    \"node_modules/nodemon/node_modules/supports-color\": {\r\n      \"version\": \"5.5.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz\",\r\n      \"integrity\": \"sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"has-flag\": \"^3.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=4\"\r\n      }\r\n    },\r\n    \"node_modules/nopt\": {\r\n      \"version\": \"5.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/nopt/-/nopt-5.0.0.tgz\",\r\n      \"integrity\": \"sha512-Tbj67rffqceeLpcRXrT7vKAN8CwfPeIBgM7E6iBkmKLV7bEMwpGgYLGv0jACUsECaa/vuxP0IjEont6umdMgtQ==\",\r\n      \"dependencies\": {\r\n        \"abbrev\": \"1\"\r\n      },\r\n      \"bin\": {\r\n        \"nopt\": \"bin/nopt.js\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=6\"\r\n      }\r\n    },\r\n    \"node_modules/normalize-path\": {\r\n      \"version\": \"3.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz\",\r\n      \"integrity\": \"sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=0.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/npm-run-path\": {\r\n      \"version\": \"4.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/npm-run-path/-/npm-run-path-4.0.1.tgz\",\r\n      \"integrity\": \"sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"path-key\": \"^3.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/npmlog\": {\r\n      \"version\": \"5.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/npmlog/-/npmlog-5.0.1.tgz\",\r\n      \"integrity\": \"sha512-AqZtDUWOMKs1G/8lwylVjrdYgqA4d9nu8hc+0gzRxlDb1I10+FHBGMXs6aiQHFdCUUlqH99MUMuLfzWDNDtfxw==\",\r\n      \"deprecated\": \"This package is no longer supported.\",\r\n      \"dependencies\": {\r\n        \"are-we-there-yet\": \"^2.0.0\",\r\n        \"console-control-strings\": \"^1.1.0\",\r\n        \"gauge\": \"^3.0.0\",\r\n        \"set-blocking\": \"^2.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/object-assign\": {\r\n      \"version\": \"4.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz\",\r\n      \"integrity\": \"sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==\",\r\n      \"engines\": {\r\n        \"node\": \">=0.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/object-inspect\": {\r\n      \"version\": \"1.13.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.2.tgz\",\r\n      \"integrity\": \"sha512-IRZSRuzJiynemAXPYtPe5BoI/RESNYR7TYm50MC5Mqbd3Jmw5y790sErYw3V6SryFJD64b74qQQs9wn5Bg/k3g==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.4\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/ljharb\"\r\n      }\r\n    },\r\n    \"node_modules/on-finished\": {\r\n      \"version\": \"2.4.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz\",\r\n      \"integrity\": \"sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==\",\r\n      \"dependencies\": {\r\n        \"ee-first\": \"1.1.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\"\r\n      }\r\n    },\r\n    \"node_modules/once\": {\r\n      \"version\": \"1.4.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/once/-/once-1.4.0.tgz\",\r\n      \"integrity\": \"sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==\",\r\n      \"dependencies\": {\r\n        \"wrappy\": \"1\"\r\n      }\r\n    },\r\n    \"node_modules/onetime\": {\r\n      \"version\": \"5.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/onetime/-/onetime-5.1.2.tgz\",\r\n      \"integrity\": \"sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"mimic-fn\": \"^2.1.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=6\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/optionator\": {\r\n      \"version\": \"0.9.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz\",\r\n      \"integrity\": \"sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"deep-is\": \"^0.1.3\",\r\n        \"fast-levenshtein\": \"^2.0.6\",\r\n        \"levn\": \"^0.4.1\",\r\n        \"prelude-ls\": \"^1.2.1\",\r\n        \"type-check\": \"^0.4.0\",\r\n        \"word-wrap\": \"^1.2.5\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.8.0\"\r\n      }\r\n    },\r\n    \"node_modules/ora\": {\r\n      \"version\": \"5.4.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/ora/-/ora-5.4.1.tgz\",\r\n      \"integrity\": \"sha512-5b6Y85tPxZZ7QytO+BQzysW31HJku27cRIlkbAXaNx+BdcVi+LlRFmVXzeF6a7JCwJpyw5c4b+YSVImQIrBpuQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"bl\": \"^4.1.0\",\r\n        \"chalk\": \"^4.1.0\",\r\n        \"cli-cursor\": \"^3.1.0\",\r\n        \"cli-spinners\": \"^2.5.0\",\r\n        \"is-interactive\": \"^1.0.0\",\r\n        \"is-unicode-supported\": \"^0.1.0\",\r\n        \"log-symbols\": \"^4.1.0\",\r\n        \"strip-ansi\": \"^6.0.0\",\r\n        \"wcwidth\": \"^1.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/os-tmpdir\": {\r\n      \"version\": \"1.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/os-tmpdir/-/os-tmpdir-1.0.2.tgz\",\r\n      \"integrity\": \"sha512-D2FR03Vir7FIu45XBY20mTb+/ZSWB00sjU9jdQXt83gDrI4Ztz5Fs7/yy74g2N5SVQY4xY1qDr4rNddwYRVX0g==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=0.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/p-limit\": {\r\n      \"version\": \"3.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz\",\r\n      \"integrity\": \"sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"yocto-queue\": \"^0.1.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/p-locate\": {\r\n      \"version\": \"5.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz\",\r\n      \"integrity\": \"sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"p-limit\": \"^3.0.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/p-try\": {\r\n      \"version\": \"2.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz\",\r\n      \"integrity\": \"sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=6\"\r\n      }\r\n    },\r\n    \"node_modules/package-json-from-dist\": {\r\n      \"version\": \"1.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/package-json-from-dist/-/package-json-from-dist-1.0.1.tgz\",\r\n      \"integrity\": \"sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==\"\r\n    },\r\n    \"node_modules/parent-module\": {\r\n      \"version\": \"1.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz\",\r\n      \"integrity\": \"sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"callsites\": \"^3.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=6\"\r\n      }\r\n    },\r\n    \"node_modules/parse-json\": {\r\n      \"version\": \"5.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/parse-json/-/parse-json-5.2.0.tgz\",\r\n      \"integrity\": \"sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@babel/code-frame\": \"^7.0.0\",\r\n        \"error-ex\": \"^1.3.1\",\r\n        \"json-parse-even-better-errors\": \"^2.3.0\",\r\n        \"lines-and-columns\": \"^1.1.6\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/parse5\": {\r\n      \"version\": \"5.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/parse5/-/parse5-5.1.1.tgz\",\r\n      \"integrity\": \"sha512-ugq4DFI0Ptb+WWjAdOK16+u/nHfiIrcE+sh8kZMaM0WllQKLI9rOUq6c2b7cwPkXdzfQESqvoqK6ug7U/Yyzug==\"\r\n    },\r\n    \"node_modules/parse5-htmlparser2-tree-adapter\": {\r\n      \"version\": \"6.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/parse5-htmlparser2-tree-adapter/-/parse5-htmlparser2-tree-adapter-6.0.1.tgz\",\r\n      \"integrity\": \"sha512-qPuWvbLgvDGilKc5BoicRovlT4MtYT6JfJyBOMDsKoiT+GiuP5qyrPCnR9HcPECIJJmZh5jRndyNThnhhb/vlA==\",\r\n      \"dependencies\": {\r\n        \"parse5\": \"^6.0.1\"\r\n      }\r\n    },\r\n    \"node_modules/parse5-htmlparser2-tree-adapter/node_modules/parse5\": {\r\n      \"version\": \"6.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/parse5/-/parse5-6.0.1.tgz\",\r\n      \"integrity\": \"sha512-Ofn/CTFzRGTTxwpNEs9PP93gXShHcTq255nzRYSKe8AkVpZY7e1fpmTfOyoIvjP5HG7Z2ZM7VS9PPhQGW2pOpw==\"\r\n    },\r\n    \"node_modules/parseurl\": {\r\n      \"version\": \"1.3.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz\",\r\n      \"integrity\": \"sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\"\r\n      }\r\n    },\r\n    \"node_modules/passport\": {\r\n      \"version\": \"0.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/passport/-/passport-0.7.0.tgz\",\r\n      \"integrity\": \"sha512-cPLl+qZpSc+ireUvt+IzqbED1cHHkDoVYMo30jbJIdOOjQ1MQYZBPiNvmi8UM6lJuOpTPXJGZQk0DtC4y61MYQ==\",\r\n      \"dependencies\": {\r\n        \"passport-strategy\": \"1.x.x\",\r\n        \"pause\": \"0.0.1\",\r\n        \"utils-merge\": \"^1.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.4.0\"\r\n      },\r\n      \"funding\": {\r\n        \"type\": \"github\",\r\n        \"url\": \"https://github.com/sponsors/jaredhanson\"\r\n      }\r\n    },\r\n    \"node_modules/passport-jwt\": {\r\n      \"version\": \"4.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/passport-jwt/-/passport-jwt-4.0.1.tgz\",\r\n      \"integrity\": \"sha512-UCKMDYhNuGOBE9/9Ycuoyh7vP6jpeTp/+sfMJl7nLff/t6dps+iaeE0hhNkKN8/HZHcJ7lCdOyDxHdDoxoSvdQ==\",\r\n      \"dependencies\": {\r\n        \"jsonwebtoken\": \"^9.0.0\",\r\n        \"passport-strategy\": \"^1.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/passport-strategy\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/passport-strategy/-/passport-strategy-1.0.0.tgz\",\r\n      \"integrity\": \"sha512-CB97UUvDKJde2V0KDWWB3lyf6PC3FaZP7YxZ2G8OAtn9p4HI9j9JLP9qjOGZFvyl8uwNT8qM+hGnz/n16NI7oA==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.4.0\"\r\n      }\r\n    },\r\n    \"node_modules/path-exists\": {\r\n      \"version\": \"4.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz\",\r\n      \"integrity\": \"sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/path-is-absolute\": {\r\n      \"version\": \"1.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz\",\r\n      \"integrity\": \"sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==\",\r\n      \"engines\": {\r\n        \"node\": \">=0.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/path-key\": {\r\n      \"version\": \"3.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz\",\r\n      \"integrity\": \"sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==\",\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/path-parse\": {\r\n      \"version\": \"1.0.7\",\r\n      \"resolved\": \"https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz\",\r\n      \"integrity\": \"sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/path-scurry\": {\r\n      \"version\": \"1.11.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/path-scurry/-/path-scurry-1.11.1.tgz\",\r\n      \"integrity\": \"sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==\",\r\n      \"dependencies\": {\r\n        \"lru-cache\": \"^10.2.0\",\r\n        \"minipass\": \"^5.0.0 || ^6.0.2 || ^7.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=16 || 14 >=14.18\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/isaacs\"\r\n      }\r\n    },\r\n    \"node_modules/path-scurry/node_modules/lru-cache\": {\r\n      \"version\": \"10.4.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/lru-cache/-/lru-cache-10.4.3.tgz\",\r\n      \"integrity\": \"sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==\"\r\n    },\r\n    \"node_modules/path-to-regexp\": {\r\n      \"version\": \"3.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-3.3.0.tgz\",\r\n      \"integrity\": \"sha512-qyCH421YQPS2WFDxDjftfc1ZR5WKQzVzqsp4n9M2kQhVOo/ByahFoUNJfl58kOcEGfQ//7weFTDhm+ss8Ecxgw==\"\r\n    },\r\n    \"node_modules/path-type\": {\r\n      \"version\": \"4.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/path-type/-/path-type-4.0.0.tgz\",\r\n      \"integrity\": \"sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/pause\": {\r\n      \"version\": \"0.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/pause/-/pause-0.0.1.tgz\",\r\n      \"integrity\": \"sha512-KG8UEiEVkR3wGEb4m5yZkVCzigAD+cVEJck2CzYZO37ZGJfctvVptVO192MwrtPhzONn6go8ylnOdMhKqi4nfg==\"\r\n    },\r\n    \"node_modules/pg\": {\r\n      \"version\": \"8.13.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/pg/-/pg-8.13.1.tgz\",\r\n      \"integrity\": \"sha512-OUir1A0rPNZlX//c7ksiu7crsGZTKSOXJPgtNiHGIlC9H0lO+NC6ZDYksSgBYY/thSWhnSRBv8w1lieNNGATNQ==\",\r\n      \"dependencies\": {\r\n        \"pg-connection-string\": \"^2.7.0\",\r\n        \"pg-pool\": \"^3.7.0\",\r\n        \"pg-protocol\": \"^1.7.0\",\r\n        \"pg-types\": \"^2.1.0\",\r\n        \"pgpass\": \"1.x\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 8.0.0\"\r\n      },\r\n      \"optionalDependencies\": {\r\n        \"pg-cloudflare\": \"^1.1.1\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"pg-native\": \">=3.0.1\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"pg-native\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"node_modules/pg-cloudflare\": {\r\n      \"version\": \"1.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/pg-cloudflare/-/pg-cloudflare-1.1.1.tgz\",\r\n      \"integrity\": \"sha512-xWPagP/4B6BgFO+EKz3JONXv3YDgvkbVrGw2mTo3D6tVDQRh1e7cqVGvyR3BE+eQgAvx1XhW/iEASj4/jCWl3Q==\",\r\n      \"optional\": true\r\n    },\r\n    \"node_modules/pg-connection-string\": {\r\n      \"version\": \"2.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/pg-connection-string/-/pg-connection-string-2.7.0.tgz\",\r\n      \"integrity\": \"sha512-PI2W9mv53rXJQEOb8xNR8lH7Hr+EKa6oJa38zsK0S/ky2er16ios1wLKhZyxzD7jUReiWokc9WK5nxSnC7W1TA==\"\r\n    },\r\n    \"node_modules/pg-int8\": {\r\n      \"version\": \"1.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/pg-int8/-/pg-int8-1.0.1.tgz\",\r\n      \"integrity\": \"sha512-WCtabS6t3c8SkpDBUlb1kjOs7l66xsGdKpIPZsg4wR+B3+u9UAum2odSsF9tnvxg80h4ZxLWMy4pRjOsFIqQpw==\",\r\n      \"engines\": {\r\n        \"node\": \">=4.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/pg-pool\": {\r\n      \"version\": \"3.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/pg-pool/-/pg-pool-3.7.0.tgz\",\r\n      \"integrity\": \"sha512-ZOBQForurqh4zZWjrgSwwAtzJ7QiRX0ovFkZr2klsen3Nm0aoh33Ls0fzfv3imeH/nw/O27cjdz5kzYJfeGp/g==\",\r\n      \"peerDependencies\": {\r\n        \"pg\": \">=8.0\"\r\n      }\r\n    },\r\n    \"node_modules/pg-protocol\": {\r\n      \"version\": \"1.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/pg-protocol/-/pg-protocol-1.7.0.tgz\",\r\n      \"integrity\": \"sha512-hTK/mE36i8fDDhgDFjy6xNOG+LCorxLG3WO17tku+ij6sVHXh1jQUJ8hYAnRhNla4QVD2H8er/FOjc/+EgC6yQ==\"\r\n    },\r\n    \"node_modules/pg-types\": {\r\n      \"version\": \"2.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/pg-types/-/pg-types-2.2.0.tgz\",\r\n      \"integrity\": \"sha512-qTAAlrEsl8s4OiEQY69wDvcMIdQN6wdz5ojQiOy6YRMuynxenON0O5oCpJI6lshc6scgAY8qvJ2On/p+CXY0GA==\",\r\n      \"dependencies\": {\r\n        \"pg-int8\": \"1.0.1\",\r\n        \"postgres-array\": \"~2.0.0\",\r\n        \"postgres-bytea\": \"~1.0.0\",\r\n        \"postgres-date\": \"~1.0.4\",\r\n        \"postgres-interval\": \"^1.1.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=4\"\r\n      }\r\n    },\r\n    \"node_modules/pgpass\": {\r\n      \"version\": \"1.0.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/pgpass/-/pgpass-1.0.5.tgz\",\r\n      \"integrity\": \"sha512-FdW9r/jQZhSeohs1Z3sI1yxFQNFvMcnmfuj4WBMUTxOrAyLMaTcE1aAMBiTlbMNaXvBCQuVi0R7hd8udDSP7ug==\",\r\n      \"dependencies\": {\r\n        \"split2\": \"^4.1.0\"\r\n      }\r\n    },\r\n    \"node_modules/picocolors\": {\r\n      \"version\": \"1.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz\",\r\n      \"integrity\": \"sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/picomatch\": {\r\n      \"version\": \"4.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/picomatch/-/picomatch-4.0.1.tgz\",\r\n      \"integrity\": \"sha512-xUXwsxNjwTQ8K3GnT4pCJm+xq3RUPQbmkYJTP5aFIfNIvbcc/4MUxgBaaRSZJ6yGJZiGSyYlM6MzwTsRk8SYCg==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=12\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/jonschlinkert\"\r\n      }\r\n    },\r\n    \"node_modules/pirates\": {\r\n      \"version\": \"4.0.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/pirates/-/pirates-4.0.6.tgz\",\r\n      \"integrity\": \"sha512-saLsH7WeYYPiD25LDuLRRY/i+6HaPYr6G1OUlN39otzkSTxKnubR9RTxS3/Kk50s1g2JTgFwWQDQyplC5/SHZg==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">= 6\"\r\n      }\r\n    },\r\n    \"node_modules/pkg-dir\": {\r\n      \"version\": \"4.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/pkg-dir/-/pkg-dir-4.2.0.tgz\",\r\n      \"integrity\": \"sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"find-up\": \"^4.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/pkg-dir/node_modules/find-up\": {\r\n      \"version\": \"4.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz\",\r\n      \"integrity\": \"sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"locate-path\": \"^5.0.0\",\r\n        \"path-exists\": \"^4.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/pkg-dir/node_modules/locate-path\": {\r\n      \"version\": \"5.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz\",\r\n      \"integrity\": \"sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"p-locate\": \"^4.1.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/pkg-dir/node_modules/p-limit\": {\r\n      \"version\": \"2.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz\",\r\n      \"integrity\": \"sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"p-try\": \"^2.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=6\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/pkg-dir/node_modules/p-locate\": {\r\n      \"version\": \"4.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz\",\r\n      \"integrity\": \"sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"p-limit\": \"^2.2.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/pluralize\": {\r\n      \"version\": \"8.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/pluralize/-/pluralize-8.0.0.tgz\",\r\n      \"integrity\": \"sha512-Nc3IT5yHzflTfbjgqWcCPpo7DaKy4FnpB0l/zCAW0Tc7jxAiuqSxHasntB3D7887LSrA93kDJ9IXovxJYxyLCA==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=4\"\r\n      }\r\n    },\r\n    \"node_modules/postgres-array\": {\r\n      \"version\": \"2.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/postgres-array/-/postgres-array-2.0.0.tgz\",\r\n      \"integrity\": \"sha512-VpZrUqU5A69eQyW2c5CA1jtLecCsN2U/bD6VilrFDWq5+5UIEVO7nazS3TEcHf1zuPYO/sqGvUvW62g86RXZuA==\",\r\n      \"engines\": {\r\n        \"node\": \">=4\"\r\n      }\r\n    },\r\n    \"node_modules/postgres-bytea\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/postgres-bytea/-/postgres-bytea-1.0.0.tgz\",\r\n      \"integrity\": \"sha512-xy3pmLuQqRBZBXDULy7KbaitYqLcmxigw14Q5sj8QBVLqEwXfeybIKVWiqAXTlcvdvb0+xkOtDbfQMOf4lST1w==\",\r\n      \"engines\": {\r\n        \"node\": \">=0.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/postgres-date\": {\r\n      \"version\": \"1.0.7\",\r\n      \"resolved\": \"https://registry.npmjs.org/postgres-date/-/postgres-date-1.0.7.tgz\",\r\n      \"integrity\": \"sha512-suDmjLVQg78nMK2UZ454hAG+OAW+HQPZ6n++TNDUX+L0+uUlLywnoxJKDou51Zm+zTCjrCl0Nq6J9C5hP9vK/Q==\",\r\n      \"engines\": {\r\n        \"node\": \">=0.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/postgres-interval\": {\r\n      \"version\": \"1.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/postgres-interval/-/postgres-interval-1.2.0.tgz\",\r\n      \"integrity\": \"sha512-9ZhXKM/rw350N1ovuWHbGxnGh/SNJ4cnxHiM0rxE4VN41wsg8P8zWn9hv/buK00RP4WvlOyr/RBDiptyxVbkZQ==\",\r\n      \"dependencies\": {\r\n        \"xtend\": \"^4.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=0.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/prelude-ls\": {\r\n      \"version\": \"1.2.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz\",\r\n      \"integrity\": \"sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">= 0.8.0\"\r\n      }\r\n    },\r\n    \"node_modules/prettier\": {\r\n      \"version\": \"3.3.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/prettier/-/prettier-3.3.3.tgz\",\r\n      \"integrity\": \"sha512-i2tDNA0O5IrMO757lfrdQZCc2jPNDVntV0m/+4whiDfWaTKfMNgR7Qz0NAeGz/nRqF4m5/6CLzbP4/liHt12Ew==\",\r\n      \"dev\": true,\r\n      \"bin\": {\r\n        \"prettier\": \"bin/prettier.cjs\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=14\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/prettier/prettier?sponsor=1\"\r\n      }\r\n    },\r\n    \"node_modules/prettier-linter-helpers\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/prettier-linter-helpers/-/prettier-linter-helpers-1.0.0.tgz\",\r\n      \"integrity\": \"sha512-GbK2cP9nraSSUF9N2XwUwqfzlAFlMNYYl+ShE/V+H8a9uNl/oUqB1w2EL54Jh0OlyRSd8RfWYJ3coVS4TROP2w==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"fast-diff\": \"^1.1.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=6.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/pretty-format\": {\r\n      \"version\": \"29.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/pretty-format/-/pretty-format-29.7.0.tgz\",\r\n      \"integrity\": \"sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@jest/schemas\": \"^29.6.3\",\r\n        \"ansi-styles\": \"^5.0.0\",\r\n        \"react-is\": \"^18.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/pretty-format/node_modules/ansi-styles\": {\r\n      \"version\": \"5.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz\",\r\n      \"integrity\": \"sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/chalk/ansi-styles?sponsor=1\"\r\n      }\r\n    },\r\n    \"node_modules/prisma\": {\r\n      \"version\": \"6.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/prisma/-/prisma-6.0.1.tgz\",\r\n      \"integrity\": \"sha512-CaMNFHkf+DDq8zq3X/JJsQ4Koy7dyWwwtOKibkT/Am9j/tDxcfbg7+lB1Dzhx18G/+RQCMgjPYB61bhRqteNBQ==\",\r\n      \"devOptional\": true,\r\n      \"hasInstallScript\": true,\r\n      \"dependencies\": {\r\n        \"@prisma/engines\": \"6.0.1\"\r\n      },\r\n      \"bin\": {\r\n        \"prisma\": \"build/index.js\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=18.18\"\r\n      },\r\n      \"optionalDependencies\": {\r\n        \"fsevents\": \"2.3.3\"\r\n      }\r\n    },\r\n    \"node_modules/process-nextick-args\": {\r\n      \"version\": \"2.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz\",\r\n      \"integrity\": \"sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==\"\r\n    },\r\n    \"node_modules/prompts\": {\r\n      \"version\": \"2.4.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/prompts/-/prompts-2.4.2.tgz\",\r\n      \"integrity\": \"sha512-NxNv/kLguCA7p3jE8oL2aEBsrJWgAakBpgmgK6lpPWV+WuOmY6r2/zbAVnP+T8bQlA0nzHXSJSJW0Hq7ylaD2Q==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"kleur\": \"^3.0.3\",\r\n        \"sisteransi\": \"^1.0.5\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 6\"\r\n      }\r\n    },\r\n    \"node_modules/proxy-addr\": {\r\n      \"version\": \"2.0.7\",\r\n      \"resolved\": \"https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz\",\r\n      \"integrity\": \"sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==\",\r\n      \"dependencies\": {\r\n        \"forwarded\": \"0.2.0\",\r\n        \"ipaddr.js\": \"1.9.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.10\"\r\n      }\r\n    },\r\n    \"node_modules/proxy-from-env\": {\r\n      \"version\": \"1.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz\",\r\n      \"integrity\": \"sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==\"\r\n    },\r\n    \"node_modules/pstree.remy\": {\r\n      \"version\": \"1.1.8\",\r\n      \"resolved\": \"https://registry.npmjs.org/pstree.remy/-/pstree.remy-1.1.8.tgz\",\r\n      \"integrity\": \"sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/punycode\": {\r\n      \"version\": \"2.3.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz\",\r\n      \"integrity\": \"sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=6\"\r\n      }\r\n    },\r\n    \"node_modules/pure-rand\": {\r\n      \"version\": \"6.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/pure-rand/-/pure-rand-6.1.0.tgz\",\r\n      \"integrity\": \"sha512-bVWawvoZoBYpp6yIoQtQXHZjmz35RSVHnUOTefl8Vcjr8snTPY1wnpSPMWekcFwbxI6gtmT7rSYPFvz71ldiOA==\",\r\n      \"dev\": true,\r\n      \"funding\": [\r\n        {\r\n          \"type\": \"individual\",\r\n          \"url\": \"https://github.com/sponsors/dubzzz\"\r\n        },\r\n        {\r\n          \"type\": \"opencollective\",\r\n          \"url\": \"https://opencollective.com/fast-check\"\r\n        }\r\n      ]\r\n    },\r\n    \"node_modules/qs\": {\r\n      \"version\": \"6.13.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/qs/-/qs-6.13.0.tgz\",\r\n      \"integrity\": \"sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==\",\r\n      \"dependencies\": {\r\n        \"side-channel\": \"^1.0.6\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=0.6\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/ljharb\"\r\n      }\r\n    },\r\n    \"node_modules/queue-microtask\": {\r\n      \"version\": \"1.2.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz\",\r\n      \"integrity\": \"sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==\",\r\n      \"dev\": true,\r\n      \"funding\": [\r\n        {\r\n          \"type\": \"github\",\r\n          \"url\": \"https://github.com/sponsors/feross\"\r\n        },\r\n        {\r\n          \"type\": \"patreon\",\r\n          \"url\": \"https://www.patreon.com/feross\"\r\n        },\r\n        {\r\n          \"type\": \"consulting\",\r\n          \"url\": \"https://feross.org/support\"\r\n        }\r\n      ]\r\n    },\r\n    \"node_modules/randombytes\": {\r\n      \"version\": \"2.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/randombytes/-/randombytes-2.1.0.tgz\",\r\n      \"integrity\": \"sha512-vYl3iOX+4CKUWuxGi9Ukhie6fsqXqS9FE2Zaic4tNFD2N2QQaXOMFbuKK4QmDHC0JO6B1Zp41J0LpT0oR68amQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"safe-buffer\": \"^5.1.0\"\r\n      }\r\n    },\r\n    \"node_modules/range-parser\": {\r\n      \"version\": \"1.2.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz\",\r\n      \"integrity\": \"sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/raw-body\": {\r\n      \"version\": \"2.5.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz\",\r\n      \"integrity\": \"sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==\",\r\n      \"dependencies\": {\r\n        \"bytes\": \"3.1.2\",\r\n        \"http-errors\": \"2.0.0\",\r\n        \"iconv-lite\": \"0.4.24\",\r\n        \"unpipe\": \"1.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\"\r\n      }\r\n    },\r\n    \"node_modules/react-is\": {\r\n      \"version\": \"18.3.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz\",\r\n      \"integrity\": \"sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/readable-stream\": {\r\n      \"version\": \"2.3.8\",\r\n      \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.8.tgz\",\r\n      \"integrity\": \"sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==\",\r\n      \"dependencies\": {\r\n        \"core-util-is\": \"~1.0.0\",\r\n        \"inherits\": \"~2.0.3\",\r\n        \"isarray\": \"~1.0.0\",\r\n        \"process-nextick-args\": \"~2.0.0\",\r\n        \"safe-buffer\": \"~5.1.1\",\r\n        \"string_decoder\": \"~1.1.1\",\r\n        \"util-deprecate\": \"~1.0.1\"\r\n      }\r\n    },\r\n    \"node_modules/readable-stream/node_modules/safe-buffer\": {\r\n      \"version\": \"5.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz\",\r\n      \"integrity\": \"sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==\"\r\n    },\r\n    \"node_modules/readdirp\": {\r\n      \"version\": \"3.6.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz\",\r\n      \"integrity\": \"sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"picomatch\": \"^2.2.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/readdirp/node_modules/picomatch\": {\r\n      \"version\": \"2.3.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz\",\r\n      \"integrity\": \"sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=8.6\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/jonschlinkert\"\r\n      }\r\n    },\r\n    \"node_modules/reflect-metadata\": {\r\n      \"version\": \"0.2.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/reflect-metadata/-/reflect-metadata-0.2.2.tgz\",\r\n      \"integrity\": \"sha512-urBwgfrvVP/eAyXx4hluJivBKzuEbSQs9rKWCrCkbSxNv8mxPcUZKeuoF3Uy4mJl3Lwprp6yy5/39VWigZ4K6Q==\"\r\n    },\r\n    \"node_modules/repeat-string\": {\r\n      \"version\": \"1.6.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/repeat-string/-/repeat-string-1.6.1.tgz\",\r\n      \"integrity\": \"sha512-PV0dzCYDNfRi1jCDbJzpW7jNNDRuCOG/jI5ctQcGKt/clZD+YcPS3yIlWuTJMmESC8aevCFmWJy5wjAFgNqN6w==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=0.10\"\r\n      }\r\n    },\r\n    \"node_modules/require-directory\": {\r\n      \"version\": \"2.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz\",\r\n      \"integrity\": \"sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==\",\r\n      \"engines\": {\r\n        \"node\": \">=0.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/require-from-string\": {\r\n      \"version\": \"2.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/require-from-string/-/require-from-string-2.0.2.tgz\",\r\n      \"integrity\": \"sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=0.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/resolve\": {\r\n      \"version\": \"1.22.8\",\r\n      \"resolved\": \"https://registry.npmjs.org/resolve/-/resolve-1.22.8.tgz\",\r\n      \"integrity\": \"sha512-oKWePCxqpd6FlLvGV1VU0x7bkPmmCNolxzjMf4NczoDnQcIWrAF+cPtZn5i6n+RfD2d9i0tzpKnG6Yk168yIyw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"is-core-module\": \"^2.13.0\",\r\n        \"path-parse\": \"^1.0.7\",\r\n        \"supports-preserve-symlinks-flag\": \"^1.0.0\"\r\n      },\r\n      \"bin\": {\r\n        \"resolve\": \"bin/resolve\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/ljharb\"\r\n      }\r\n    },\r\n    \"node_modules/resolve-cwd\": {\r\n      \"version\": \"3.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/resolve-cwd/-/resolve-cwd-3.0.0.tgz\",\r\n      \"integrity\": \"sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"resolve-from\": \"^5.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/resolve-cwd/node_modules/resolve-from\": {\r\n      \"version\": \"5.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz\",\r\n      \"integrity\": \"sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/resolve-from\": {\r\n      \"version\": \"4.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz\",\r\n      \"integrity\": \"sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=4\"\r\n      }\r\n    },\r\n    \"node_modules/resolve.exports\": {\r\n      \"version\": \"2.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/resolve.exports/-/resolve.exports-2.0.2.tgz\",\r\n      \"integrity\": \"sha512-X2UW6Nw3n/aMgDVy+0rSqgHlv39WZAlZrXCdnbyEiKm17DSqHX4MmQMaST3FbeWR5FTuRcUwYAziZajji0Y7mg==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      }\r\n    },\r\n    \"node_modules/restore-cursor\": {\r\n      \"version\": \"3.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/restore-cursor/-/restore-cursor-3.1.0.tgz\",\r\n      \"integrity\": \"sha512-l+sSefzHpj5qimhFSE5a8nufZYAM3sBSVMAPtYkmC+4EH2anSGaEMXSD0izRQbu9nfyQ9y5JrVmp7E8oZrUjvA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"onetime\": \"^5.1.0\",\r\n        \"signal-exit\": \"^3.0.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/restore-cursor/node_modules/signal-exit\": {\r\n      \"version\": \"3.0.7\",\r\n      \"resolved\": \"https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz\",\r\n      \"integrity\": \"sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/reusify\": {\r\n      \"version\": \"1.0.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/reusify/-/reusify-1.0.4.tgz\",\r\n      \"integrity\": \"sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"iojs\": \">=1.0.0\",\r\n        \"node\": \">=0.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/rimraf\": {\r\n      \"version\": \"3.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz\",\r\n      \"integrity\": \"sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==\",\r\n      \"deprecated\": \"Rimraf versions prior to v4 are no longer supported\",\r\n      \"dependencies\": {\r\n        \"glob\": \"^7.1.3\"\r\n      },\r\n      \"bin\": {\r\n        \"rimraf\": \"bin.js\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/isaacs\"\r\n      }\r\n    },\r\n    \"node_modules/rimraf/node_modules/brace-expansion\": {\r\n      \"version\": \"1.1.11\",\r\n      \"resolved\": \"https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz\",\r\n      \"integrity\": \"sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==\",\r\n      \"dependencies\": {\r\n        \"balanced-match\": \"^1.0.0\",\r\n        \"concat-map\": \"0.0.1\"\r\n      }\r\n    },\r\n    \"node_modules/rimraf/node_modules/glob\": {\r\n      \"version\": \"7.2.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/glob/-/glob-7.2.3.tgz\",\r\n      \"integrity\": \"sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==\",\r\n      \"deprecated\": \"Glob versions prior to v9 are no longer supported\",\r\n      \"dependencies\": {\r\n        \"fs.realpath\": \"^1.0.0\",\r\n        \"inflight\": \"^1.0.4\",\r\n        \"inherits\": \"2\",\r\n        \"minimatch\": \"^3.1.1\",\r\n        \"once\": \"^1.3.0\",\r\n        \"path-is-absolute\": \"^1.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"*\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/isaacs\"\r\n      }\r\n    },\r\n    \"node_modules/rimraf/node_modules/minimatch\": {\r\n      \"version\": \"3.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz\",\r\n      \"integrity\": \"sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==\",\r\n      \"dependencies\": {\r\n        \"brace-expansion\": \"^1.1.7\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"*\"\r\n      }\r\n    },\r\n    \"node_modules/run-async\": {\r\n      \"version\": \"2.4.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/run-async/-/run-async-2.4.1.tgz\",\r\n      \"integrity\": \"sha512-tvVnVv01b8c1RrA6Ep7JkStj85Guv/YrMcwqYQnwjsAS2cTmmPGBBjAjpCW7RrSodNSoE2/qg9O4bceNvUuDgQ==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=0.12.0\"\r\n      }\r\n    },\r\n    \"node_modules/run-parallel\": {\r\n      \"version\": \"1.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz\",\r\n      \"integrity\": \"sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==\",\r\n      \"dev\": true,\r\n      \"funding\": [\r\n        {\r\n          \"type\": \"github\",\r\n          \"url\": \"https://github.com/sponsors/feross\"\r\n        },\r\n        {\r\n          \"type\": \"patreon\",\r\n          \"url\": \"https://www.patreon.com/feross\"\r\n        },\r\n        {\r\n          \"type\": \"consulting\",\r\n          \"url\": \"https://feross.org/support\"\r\n        }\r\n      ],\r\n      \"dependencies\": {\r\n        \"queue-microtask\": \"^1.2.2\"\r\n      }\r\n    },\r\n    \"node_modules/rxjs\": {\r\n      \"version\": \"7.8.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/rxjs/-/rxjs-7.8.1.tgz\",\r\n      \"integrity\": \"sha512-AA3TVj+0A2iuIoQkWEK/tqFjBq2j+6PO6Y0zJcvzLAFhEFIO3HL0vls9hWLncZbAAbK0mar7oZ4V079I/qPMxg==\",\r\n      \"dependencies\": {\r\n        \"tslib\": \"^2.1.0\"\r\n      }\r\n    },\r\n    \"node_modules/safe-buffer\": {\r\n      \"version\": \"5.2.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz\",\r\n      \"integrity\": \"sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==\",\r\n      \"funding\": [\r\n        {\r\n          \"type\": \"github\",\r\n          \"url\": \"https://github.com/sponsors/feross\"\r\n        },\r\n        {\r\n          \"type\": \"patreon\",\r\n          \"url\": \"https://www.patreon.com/feross\"\r\n        },\r\n        {\r\n          \"type\": \"consulting\",\r\n          \"url\": \"https://feross.org/support\"\r\n        }\r\n      ]\r\n    },\r\n    \"node_modules/safer-buffer\": {\r\n      \"version\": \"2.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz\",\r\n      \"integrity\": \"sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==\"\r\n    },\r\n    \"node_modules/schema-utils\": {\r\n      \"version\": \"3.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/schema-utils/-/schema-utils-3.3.0.tgz\",\r\n      \"integrity\": \"sha512-pN/yOAvcC+5rQ5nERGuwrjLlYvLTbCibnZ1I7B1LaiAz9BRBlE9GMgE/eqV30P7aJQUf7Ddimy/RsbYO/GrVGg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@types/json-schema\": \"^7.0.8\",\r\n        \"ajv\": \"^6.12.5\",\r\n        \"ajv-keywords\": \"^3.5.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 10.13.0\"\r\n      },\r\n      \"funding\": {\r\n        \"type\": \"opencollective\",\r\n        \"url\": \"https://opencollective.com/webpack\"\r\n      }\r\n    },\r\n    \"node_modules/schema-utils/node_modules/ajv\": {\r\n      \"version\": \"6.12.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz\",\r\n      \"integrity\": \"sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"fast-deep-equal\": \"^3.1.1\",\r\n        \"fast-json-stable-stringify\": \"^2.0.0\",\r\n        \"json-schema-traverse\": \"^0.4.1\",\r\n        \"uri-js\": \"^4.2.2\"\r\n      },\r\n      \"funding\": {\r\n        \"type\": \"github\",\r\n        \"url\": \"https://github.com/sponsors/epoberezkin\"\r\n      }\r\n    },\r\n    \"node_modules/schema-utils/node_modules/ajv-keywords\": {\r\n      \"version\": \"3.5.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-3.5.2.tgz\",\r\n      \"integrity\": \"sha512-5p6WTN0DdTGVQk6VjcEju19IgaHudalcfabD7yhDGeA6bcQnmL+CpveLJq/3hvfwd1aof6L386Ougkx6RfyMIQ==\",\r\n      \"dev\": true,\r\n      \"peerDependencies\": {\r\n        \"ajv\": \"^6.9.1\"\r\n      }\r\n    },\r\n    \"node_modules/schema-utils/node_modules/json-schema-traverse\": {\r\n      \"version\": \"0.4.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz\",\r\n      \"integrity\": \"sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/semver\": {\r\n      \"version\": \"7.6.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/semver/-/semver-7.6.3.tgz\",\r\n      \"integrity\": \"sha512-oVekP1cKtI+CTDvHWYFUcMtsK/00wmAEfyqKfNdARm8u1wNVhSgaX7A8d4UuIlUI5e84iEwOhs7ZPYRmzU9U6A==\",\r\n      \"bin\": {\r\n        \"semver\": \"bin/semver.js\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      }\r\n    },\r\n    \"node_modules/send\": {\r\n      \"version\": \"0.19.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/send/-/send-0.19.0.tgz\",\r\n      \"integrity\": \"sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==\",\r\n      \"dependencies\": {\r\n        \"debug\": \"2.6.9\",\r\n        \"depd\": \"2.0.0\",\r\n        \"destroy\": \"1.2.0\",\r\n        \"encodeurl\": \"~1.0.2\",\r\n        \"escape-html\": \"~1.0.3\",\r\n        \"etag\": \"~1.8.1\",\r\n        \"fresh\": \"0.5.2\",\r\n        \"http-errors\": \"2.0.0\",\r\n        \"mime\": \"1.6.0\",\r\n        \"ms\": \"2.1.3\",\r\n        \"on-finished\": \"2.4.1\",\r\n        \"range-parser\": \"~1.2.1\",\r\n        \"statuses\": \"2.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.8.0\"\r\n      }\r\n    },\r\n    \"node_modules/send/node_modules/debug\": {\r\n      \"version\": \"2.6.9\",\r\n      \"resolved\": \"https://registry.npmjs.org/debug/-/debug-2.6.9.tgz\",\r\n      \"integrity\": \"sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==\",\r\n      \"dependencies\": {\r\n        \"ms\": \"2.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/send/node_modules/debug/node_modules/ms\": {\r\n      \"version\": \"2.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.0.0.tgz\",\r\n      \"integrity\": \"sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==\"\r\n    },\r\n    \"node_modules/send/node_modules/encodeurl\": {\r\n      \"version\": \"1.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz\",\r\n      \"integrity\": \"sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\"\r\n      }\r\n    },\r\n    \"node_modules/seq-queue\": {\r\n      \"version\": \"0.0.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/seq-queue/-/seq-queue-0.0.5.tgz\",\r\n      \"integrity\": \"sha512-hr3Wtp/GZIc/6DAGPDcV4/9WoZhjrkXsi5B/07QgX8tsdc6ilr7BFM6PM6rbdAX1kFSDYeZGLipIZZKyQP0O5Q==\"\r\n    },\r\n    \"node_modules/serialize-javascript\": {\r\n      \"version\": \"6.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/serialize-javascript/-/serialize-javascript-6.0.2.tgz\",\r\n      \"integrity\": \"sha512-Saa1xPByTTq2gdeFZYLLo+RFE35NHZkAbqZeWNd3BpzppeVisAqpDjcp8dyf6uIvEqJRd46jemmyA4iFIeVk8g==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"randombytes\": \"^2.1.0\"\r\n      }\r\n    },\r\n    \"node_modules/serve-static\": {\r\n      \"version\": \"1.16.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/serve-static/-/serve-static-1.16.2.tgz\",\r\n      \"integrity\": \"sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==\",\r\n      \"dependencies\": {\r\n        \"encodeurl\": \"~2.0.0\",\r\n        \"escape-html\": \"~1.0.3\",\r\n        \"parseurl\": \"~1.3.3\",\r\n        \"send\": \"0.19.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.8.0\"\r\n      }\r\n    },\r\n    \"node_modules/set-blocking\": {\r\n      \"version\": \"2.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/set-blocking/-/set-blocking-2.0.0.tgz\",\r\n      \"integrity\": \"sha512-KiKBS8AnWGEyLzofFfmvKwpdPzqiy16LvQfK3yv/fVH7Bj13/wl3JSR1J+rfgRE9q7xUJK4qvgS8raSOeLUehw==\"\r\n    },\r\n    \"node_modules/set-function-length\": {\r\n      \"version\": \"1.2.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/set-function-length/-/set-function-length-1.2.2.tgz\",\r\n      \"integrity\": \"sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==\",\r\n      \"dependencies\": {\r\n        \"define-data-property\": \"^1.1.4\",\r\n        \"es-errors\": \"^1.3.0\",\r\n        \"function-bind\": \"^1.1.2\",\r\n        \"get-intrinsic\": \"^1.2.4\",\r\n        \"gopd\": \"^1.0.1\",\r\n        \"has-property-descriptors\": \"^1.0.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.4\"\r\n      }\r\n    },\r\n    \"node_modules/setprototypeof\": {\r\n      \"version\": \"1.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz\",\r\n      \"integrity\": \"sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==\"\r\n    },\r\n    \"node_modules/sha.js\": {\r\n      \"version\": \"2.4.11\",\r\n      \"resolved\": \"https://registry.npmjs.org/sha.js/-/sha.js-2.4.11.tgz\",\r\n      \"integrity\": \"sha512-QMEp5B7cftE7APOjk5Y6xgrbWu+WkLVQwk8JNjZ8nKRciZaByEW6MubieAiToS7+dwvrjGhH8jRXz3MVd0AYqQ==\",\r\n      \"dependencies\": {\r\n        \"inherits\": \"^2.0.1\",\r\n        \"safe-buffer\": \"^5.0.1\"\r\n      },\r\n      \"bin\": {\r\n        \"sha.js\": \"bin.js\"\r\n      }\r\n    },\r\n    \"node_modules/shebang-command\": {\r\n      \"version\": \"2.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz\",\r\n      \"integrity\": \"sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==\",\r\n      \"dependencies\": {\r\n        \"shebang-regex\": \"^3.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/shebang-regex\": {\r\n      \"version\": \"3.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz\",\r\n      \"integrity\": \"sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==\",\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/side-channel\": {\r\n      \"version\": \"1.0.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/side-channel/-/side-channel-1.0.6.tgz\",\r\n      \"integrity\": \"sha512-fDW/EZ6Q9RiO8eFG8Hj+7u/oW+XrPTIChwCOM2+th2A6OblDtYYIpve9m+KvI9Z4C9qSEXlaGR6bTEYHReuglA==\",\r\n      \"dependencies\": {\r\n        \"call-bind\": \"^1.0.7\",\r\n        \"es-errors\": \"^1.3.0\",\r\n        \"get-intrinsic\": \"^1.2.4\",\r\n        \"object-inspect\": \"^1.13.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.4\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/ljharb\"\r\n      }\r\n    },\r\n    \"node_modules/signal-exit\": {\r\n      \"version\": \"4.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz\",\r\n      \"integrity\": \"sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==\",\r\n      \"engines\": {\r\n        \"node\": \">=14\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/isaacs\"\r\n      }\r\n    },\r\n    \"node_modules/simple-update-notifier\": {\r\n      \"version\": \"2.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/simple-update-notifier/-/simple-update-notifier-2.0.0.tgz\",\r\n      \"integrity\": \"sha512-a2B9Y0KlNXl9u/vsW6sTIu9vGEpfKu2wRV6l1H3XEas/0gUIzGzBoP/IouTcUQbm9JWZLH3COxyn03TYlFax6w==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"semver\": \"^7.5.3\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      }\r\n    },\r\n    \"node_modules/sisteransi\": {\r\n      \"version\": \"1.0.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/sisteransi/-/sisteransi-1.0.5.tgz\",\r\n      \"integrity\": \"sha512-bLGGlR1QxBcynn2d5YmDX4MGjlZvy2MRBDRNHLJ8VI6l6+9FUiyTFNJ0IveOSP0bcXgVDPRcfGqA0pjaqUpfVg==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/slash\": {\r\n      \"version\": \"3.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/slash/-/slash-3.0.0.tgz\",\r\n      \"integrity\": \"sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/source-map\": {\r\n      \"version\": \"0.7.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.7.4.tgz\",\r\n      \"integrity\": \"sha512-l3BikUxvPOcn5E74dZiq5BGsTb5yEwhaTSzccU6t4sDOH8NWJCstKO5QT2CvtFoK6F0saL7p9xHAqHOlCPJygA==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">= 8\"\r\n      }\r\n    },\r\n    \"node_modules/source-map-support\": {\r\n      \"version\": \"0.5.21\",\r\n      \"resolved\": \"https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.21.tgz\",\r\n      \"integrity\": \"sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"buffer-from\": \"^1.0.0\",\r\n        \"source-map\": \"^0.6.0\"\r\n      }\r\n    },\r\n    \"node_modules/source-map-support/node_modules/source-map\": {\r\n      \"version\": \"0.6.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz\",\r\n      \"integrity\": \"sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=0.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/split2\": {\r\n      \"version\": \"4.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/split2/-/split2-4.2.0.tgz\",\r\n      \"integrity\": \"sha512-UcjcJOWknrNkF6PLX83qcHM6KHgVKNkV62Y8a5uYDVv9ydGQVwAHMKqHdJje1VTWpljG0WYpCDhrCdAOYH4TWg==\",\r\n      \"engines\": {\r\n        \"node\": \">= 10.x\"\r\n      }\r\n    },\r\n    \"node_modules/sprintf-js\": {\r\n      \"version\": \"1.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz\",\r\n      \"integrity\": \"sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/sqlstring\": {\r\n      \"version\": \"2.3.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/sqlstring/-/sqlstring-2.3.3.tgz\",\r\n      \"integrity\": \"sha512-qC9iz2FlN7DQl3+wjwn3802RTyjCx7sDvfQEXchwa6CWOx07/WVfh91gBmQ9fahw8snwGEWU3xGzOt4tFyHLxg==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/stack-utils\": {\r\n      \"version\": \"2.0.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/stack-utils/-/stack-utils-2.0.6.tgz\",\r\n      \"integrity\": \"sha512-XlkWvfIm6RmsWtNJx+uqtKLS8eqFbxUg0ZzLXqY0caEy9l7hruX8IpiDnjsLavoBgqCCR71TqWO8MaXYheJ3RQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"escape-string-regexp\": \"^2.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      }\r\n    },\r\n    \"node_modules/stack-utils/node_modules/escape-string-regexp\": {\r\n      \"version\": \"2.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-2.0.0.tgz\",\r\n      \"integrity\": \"sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/statuses\": {\r\n      \"version\": \"2.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz\",\r\n      \"integrity\": \"sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\"\r\n      }\r\n    },\r\n    \"node_modules/streamsearch\": {\r\n      \"version\": \"1.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/streamsearch/-/streamsearch-1.1.0.tgz\",\r\n      \"integrity\": \"sha512-Mcc5wHehp9aXz1ax6bZUyY5afg9u2rv5cqQI3mRrYkGC8rW2hM02jWuwjtL++LS5qinSyhj2QfLyNsuc+VsExg==\",\r\n      \"engines\": {\r\n        \"node\": \">=10.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/string_decoder\": {\r\n      \"version\": \"1.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz\",\r\n      \"integrity\": \"sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==\",\r\n      \"dependencies\": {\r\n        \"safe-buffer\": \"~5.1.0\"\r\n      }\r\n    },\r\n    \"node_modules/string_decoder/node_modules/safe-buffer\": {\r\n      \"version\": \"5.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz\",\r\n      \"integrity\": \"sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==\"\r\n    },\r\n    \"node_modules/string-length\": {\r\n      \"version\": \"4.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/string-length/-/string-length-4.0.2.tgz\",\r\n      \"integrity\": \"sha512-+l6rNN5fYHNhZZy41RXsYptCjA2Igmq4EG7kZAYFQI1E1VTXarr6ZPXBg6eq7Y6eK4FEhY6AJlyuFIb/v/S0VQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"char-regex\": \"^1.0.2\",\r\n        \"strip-ansi\": \"^6.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      }\r\n    },\r\n    \"node_modules/string-width\": {\r\n      \"version\": \"4.2.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz\",\r\n      \"integrity\": \"sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==\",\r\n      \"dependencies\": {\r\n        \"emoji-regex\": \"^8.0.0\",\r\n        \"is-fullwidth-code-point\": \"^3.0.0\",\r\n        \"strip-ansi\": \"^6.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/string-width-cjs\": {\r\n      \"name\": \"string-width\",\r\n      \"version\": \"4.2.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz\",\r\n      \"integrity\": \"sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==\",\r\n      \"dependencies\": {\r\n        \"emoji-regex\": \"^8.0.0\",\r\n        \"is-fullwidth-code-point\": \"^3.0.0\",\r\n        \"strip-ansi\": \"^6.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/strip-ansi\": {\r\n      \"version\": \"6.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz\",\r\n      \"integrity\": \"sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==\",\r\n      \"dependencies\": {\r\n        \"ansi-regex\": \"^5.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/strip-ansi-cjs\": {\r\n      \"name\": \"strip-ansi\",\r\n      \"version\": \"6.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz\",\r\n      \"integrity\": \"sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==\",\r\n      \"dependencies\": {\r\n        \"ansi-regex\": \"^5.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/strip-bom\": {\r\n      \"version\": \"4.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/strip-bom/-/strip-bom-4.0.0.tgz\",\r\n      \"integrity\": \"sha512-3xurFv5tEgii33Zi8Jtp55wEIILR9eh34FAW00PZf+JnSsTmV/ioewSgQl97JHvgjoRGwPShsWm+IdrxB35d0w==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/strip-final-newline\": {\r\n      \"version\": \"2.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-2.0.0.tgz\",\r\n      \"integrity\": \"sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=6\"\r\n      }\r\n    },\r\n    \"node_modules/strip-json-comments\": {\r\n      \"version\": \"3.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz\",\r\n      \"integrity\": \"sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/superagent\": {\r\n      \"version\": \"8.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/superagent/-/superagent-8.1.2.tgz\",\r\n      \"integrity\": \"sha512-6WTxW1EB6yCxV5VFOIPQruWGHqc3yI7hEmZK6h+pyk69Lk/Ut7rLUY6W/ONF2MjBuGjvmMiIpsrVJ2vjrHlslA==\",\r\n      \"deprecated\": \"Please upgrade to v9.0.0+ as we have fixed a public vulnerability with formidable dependency. Note that v9.0.0+ requires Node.js v14.18.0+. See https://github.com/ladjs/superagent/pull/1800 for insight. This project is supported and maintained by the team at Forward Email @ https://forwardemail.net\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"component-emitter\": \"^1.3.0\",\r\n        \"cookiejar\": \"^2.1.4\",\r\n        \"debug\": \"^4.3.4\",\r\n        \"fast-safe-stringify\": \"^2.1.1\",\r\n        \"form-data\": \"^4.0.0\",\r\n        \"formidable\": \"^2.1.2\",\r\n        \"methods\": \"^1.1.2\",\r\n        \"mime\": \"2.6.0\",\r\n        \"qs\": \"^6.11.0\",\r\n        \"semver\": \"^7.3.8\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=6.4.0 <13 || >=14\"\r\n      }\r\n    },\r\n    \"node_modules/superagent/node_modules/mime\": {\r\n      \"version\": \"2.6.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/mime/-/mime-2.6.0.tgz\",\r\n      \"integrity\": \"sha512-USPkMeET31rOMiarsBNIHZKLGgvKc/LrjofAnBlOttf5ajRvqiRA8QsenbcooctK6d6Ts6aqZXBA+XbkKthiQg==\",\r\n      \"dev\": true,\r\n      \"bin\": {\r\n        \"mime\": \"cli.js\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=4.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/supertest\": {\r\n      \"version\": \"6.3.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/supertest/-/supertest-6.3.4.tgz\",\r\n      \"integrity\": \"sha512-erY3HFDG0dPnhw4U+udPfrzXa4xhSG+n4rxfRuZWCUvjFWwKl+OxWf/7zk50s84/fAAs7vf5QAb9uRa0cCykxw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"methods\": \"^1.1.2\",\r\n        \"superagent\": \"^8.1.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=6.4.0\"\r\n      }\r\n    },\r\n    \"node_modules/supports-color\": {\r\n      \"version\": \"7.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz\",\r\n      \"integrity\": \"sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==\",\r\n      \"dependencies\": {\r\n        \"has-flag\": \"^4.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/supports-preserve-symlinks-flag\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz\",\r\n      \"integrity\": \"sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">= 0.4\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/ljharb\"\r\n      }\r\n    },\r\n    \"node_modules/swagger-ui-dist\": {\r\n      \"version\": \"5.17.14\",\r\n      \"resolved\": \"https://registry.npmjs.org/swagger-ui-dist/-/swagger-ui-dist-5.17.14.tgz\",\r\n      \"integrity\": \"sha512-CVbSfaLpstV65OnSjbXfVd6Sta3q3F7Cj/yYuvHMp1P90LztOLs6PfUnKEVAeiIVQt9u2SaPwv0LiH/OyMjHRw==\"\r\n    },\r\n    \"node_modules/swagger-ui-express\": {\r\n      \"version\": \"5.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/swagger-ui-express/-/swagger-ui-express-5.0.1.tgz\",\r\n      \"integrity\": \"sha512-SrNU3RiBGTLLmFU8GIJdOdanJTl4TOmT27tt3bWWHppqYmAZ6IDuEuBvMU6nZq0zLEe6b/1rACXCgLZqO6ZfrA==\",\r\n      \"dependencies\": {\r\n        \"swagger-ui-dist\": \">=5.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= v0.10.32\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"express\": \">=4.0.0 || >=5.0.0-beta\"\r\n      }\r\n    },\r\n    \"node_modules/symbol-observable\": {\r\n      \"version\": \"4.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/symbol-observable/-/symbol-observable-4.0.0.tgz\",\r\n      \"integrity\": \"sha512-b19dMThMV4HVFynSAM1++gBHAbk2Tc/osgLIBZMKsyqh34jb2e8Os7T6ZW/Bt3pJFdBTd2JwAnAAEQV7rSNvcQ==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=0.10\"\r\n      }\r\n    },\r\n    \"node_modules/synckit\": {\r\n      \"version\": \"0.9.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/synckit/-/synckit-0.9.2.tgz\",\r\n      \"integrity\": \"sha512-vrozgXDQwYO72vHjUb/HnFbQx1exDjoKzqx23aXEg2a9VIg2TSFZ8FmeZpTjUCFMYw7mpX4BE2SFu8wI7asYsw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@pkgr/core\": \"^0.1.0\",\r\n        \"tslib\": \"^2.6.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.18.0 || >=16.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/unts\"\r\n      }\r\n    },\r\n    \"node_modules/tapable\": {\r\n      \"version\": \"2.2.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/tapable/-/tapable-2.2.1.tgz\",\r\n      \"integrity\": \"sha512-GNzQvQTOIP6RyTfE2Qxb8ZVlNmw0n88vp1szwWRimP02mnTsx3Wtn5qRdqY9w2XduFNUgvOwhNnQsjwCp+kqaQ==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=6\"\r\n      }\r\n    },\r\n    \"node_modules/tar\": {\r\n      \"version\": \"6.2.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/tar/-/tar-6.2.1.tgz\",\r\n      \"integrity\": \"sha512-DZ4yORTwrbTj/7MZYq2w+/ZFdI6OZ/f9SFHR+71gIVUZhOQPHzVCLpvRnPgyaMpfWxxk/4ONva3GQSyNIKRv6A==\",\r\n      \"dependencies\": {\r\n        \"chownr\": \"^2.0.0\",\r\n        \"fs-minipass\": \"^2.0.0\",\r\n        \"minipass\": \"^5.0.0\",\r\n        \"minizlib\": \"^2.1.1\",\r\n        \"mkdirp\": \"^1.0.3\",\r\n        \"yallist\": \"^4.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      }\r\n    },\r\n    \"node_modules/tar/node_modules/minipass\": {\r\n      \"version\": \"5.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/minipass/-/minipass-5.0.0.tgz\",\r\n      \"integrity\": \"sha512-3FnjYuehv9k6ovOEbyOswadCDPX1piCfhV8ncmYtHOjuPwylVWsghTLo7rabjC3Rx5xD4HDx8Wm1xnMF7S5qFQ==\",\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/tar/node_modules/mkdirp\": {\r\n      \"version\": \"1.0.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz\",\r\n      \"integrity\": \"sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==\",\r\n      \"bin\": {\r\n        \"mkdirp\": \"bin/cmd.js\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      }\r\n    },\r\n    \"node_modules/tar/node_modules/yallist\": {\r\n      \"version\": \"4.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz\",\r\n      \"integrity\": \"sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==\"\r\n    },\r\n    \"node_modules/terser\": {\r\n      \"version\": \"5.36.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/terser/-/terser-5.36.0.tgz\",\r\n      \"integrity\": \"sha512-IYV9eNMuFAV4THUspIRXkLakHnV6XO7FEdtKjf/mDyrnqUg9LnlOn6/RwRvM9SZjR4GUq8Nk8zj67FzVARr74w==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@jridgewell/source-map\": \"^0.3.3\",\r\n        \"acorn\": \"^8.8.2\",\r\n        \"commander\": \"^2.20.0\",\r\n        \"source-map-support\": \"~0.5.20\"\r\n      },\r\n      \"bin\": {\r\n        \"terser\": \"bin/terser\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      }\r\n    },\r\n    \"node_modules/terser-webpack-plugin\": {\r\n      \"version\": \"5.3.10\",\r\n      \"resolved\": \"https://registry.npmjs.org/terser-webpack-plugin/-/terser-webpack-plugin-5.3.10.tgz\",\r\n      \"integrity\": \"sha512-BKFPWlPDndPs+NGGCr1U59t0XScL5317Y0UReNrHaw9/FwhPENlq6bfgs+4yPfyP51vqC1bQ4rp1EfXW5ZSH9w==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@jridgewell/trace-mapping\": \"^0.3.20\",\r\n        \"jest-worker\": \"^27.4.5\",\r\n        \"schema-utils\": \"^3.1.1\",\r\n        \"serialize-javascript\": \"^6.0.1\",\r\n        \"terser\": \"^5.26.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 10.13.0\"\r\n      },\r\n      \"funding\": {\r\n        \"type\": \"opencollective\",\r\n        \"url\": \"https://opencollective.com/webpack\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"webpack\": \"^5.1.0\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"@swc/core\": {\r\n          \"optional\": true\r\n        },\r\n        \"esbuild\": {\r\n          \"optional\": true\r\n        },\r\n        \"uglify-js\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"node_modules/terser-webpack-plugin/node_modules/jest-worker\": {\r\n      \"version\": \"27.5.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/jest-worker/-/jest-worker-27.5.1.tgz\",\r\n      \"integrity\": \"sha512-7vuh85V5cdDofPyxn58nrPjBktZo0u9x1g8WtjQol+jZDaE+fhN+cIvTj11GndBnMnyfrUOG1sZQxCdjKh+DKg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@types/node\": \"*\",\r\n        \"merge-stream\": \"^2.0.0\",\r\n        \"supports-color\": \"^8.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 10.13.0\"\r\n      }\r\n    },\r\n    \"node_modules/terser-webpack-plugin/node_modules/supports-color\": {\r\n      \"version\": \"8.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz\",\r\n      \"integrity\": \"sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"has-flag\": \"^4.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/chalk/supports-color?sponsor=1\"\r\n      }\r\n    },\r\n    \"node_modules/terser/node_modules/commander\": {\r\n      \"version\": \"2.20.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/commander/-/commander-2.20.3.tgz\",\r\n      \"integrity\": \"sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/test-exclude\": {\r\n      \"version\": \"6.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/test-exclude/-/test-exclude-6.0.0.tgz\",\r\n      \"integrity\": \"sha512-cAGWPIyOHU6zlmg88jwm7VRyXnMN7iV68OGAbYDk/Mh/xC/pzVPlQtY6ngoIH/5/tciuhGfvESU8GrHrcxD56w==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@istanbuljs/schema\": \"^0.1.2\",\r\n        \"glob\": \"^7.1.4\",\r\n        \"minimatch\": \"^3.0.4\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/test-exclude/node_modules/brace-expansion\": {\r\n      \"version\": \"1.1.11\",\r\n      \"resolved\": \"https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz\",\r\n      \"integrity\": \"sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"balanced-match\": \"^1.0.0\",\r\n        \"concat-map\": \"0.0.1\"\r\n      }\r\n    },\r\n    \"node_modules/test-exclude/node_modules/glob\": {\r\n      \"version\": \"7.2.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/glob/-/glob-7.2.3.tgz\",\r\n      \"integrity\": \"sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==\",\r\n      \"deprecated\": \"Glob versions prior to v9 are no longer supported\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"fs.realpath\": \"^1.0.0\",\r\n        \"inflight\": \"^1.0.4\",\r\n        \"inherits\": \"2\",\r\n        \"minimatch\": \"^3.1.1\",\r\n        \"once\": \"^1.3.0\",\r\n        \"path-is-absolute\": \"^1.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"*\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/isaacs\"\r\n      }\r\n    },\r\n    \"node_modules/test-exclude/node_modules/minimatch\": {\r\n      \"version\": \"3.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz\",\r\n      \"integrity\": \"sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"brace-expansion\": \"^1.1.7\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"*\"\r\n      }\r\n    },\r\n    \"node_modules/text-table\": {\r\n      \"version\": \"0.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/text-table/-/text-table-0.2.0.tgz\",\r\n      \"integrity\": \"sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/thenify\": {\r\n      \"version\": \"3.3.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/thenify/-/thenify-3.3.1.tgz\",\r\n      \"integrity\": \"sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==\",\r\n      \"dependencies\": {\r\n        \"any-promise\": \"^1.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/thenify-all\": {\r\n      \"version\": \"1.6.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/thenify-all/-/thenify-all-1.6.0.tgz\",\r\n      \"integrity\": \"sha512-RNxQH/qI8/t3thXJDwcstUO4zeqo64+Uy/+sNVRBx4Xn2OX+OZ9oP+iJnNFqplFra2ZUVeKCSa2oVWi3T4uVmA==\",\r\n      \"dependencies\": {\r\n        \"thenify\": \">= 3.1.0 < 4\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=0.8\"\r\n      }\r\n    },\r\n    \"node_modules/through\": {\r\n      \"version\": \"2.3.8\",\r\n      \"resolved\": \"https://registry.npmjs.org/through/-/through-2.3.8.tgz\",\r\n      \"integrity\": \"sha512-w89qg7PI8wAdvX60bMDP+bFoD5Dvhm9oLheFp5O4a2QF0cSBGsBX4qZmadPMvVqlLJBBci+WqGGOAPvcDeNSVg==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/tmp\": {\r\n      \"version\": \"0.0.33\",\r\n      \"resolved\": \"https://registry.npmjs.org/tmp/-/tmp-0.0.33.tgz\",\r\n      \"integrity\": \"sha512-jRCJlojKnZ3addtTOjdIqoRuPEKBvNXcGYqzO6zWZX8KfKEpnGY5jfggJQ3EjKuu8D4bJRr0y+cYJFmYbImXGw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"os-tmpdir\": \"~1.0.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=0.6.0\"\r\n      }\r\n    },\r\n    \"node_modules/tmpl\": {\r\n      \"version\": \"1.0.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/tmpl/-/tmpl-1.0.5.tgz\",\r\n      \"integrity\": \"sha512-3f0uOEAQwIqGuWW2MVzYg8fV/QNnc/IpuJNG837rLuczAaLVHslWHZQj4IGiEl5Hs3kkbhwL9Ab7Hrsmuj+Smw==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/to-regex-range\": {\r\n      \"version\": \"5.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz\",\r\n      \"integrity\": \"sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"is-number\": \"^7.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8.0\"\r\n      }\r\n    },\r\n    \"node_modules/toidentifier\": {\r\n      \"version\": \"1.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz\",\r\n      \"integrity\": \"sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==\",\r\n      \"engines\": {\r\n        \"node\": \">=0.6\"\r\n      }\r\n    },\r\n    \"node_modules/touch\": {\r\n      \"version\": \"3.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/touch/-/touch-3.1.1.tgz\",\r\n      \"integrity\": \"sha512-r0eojU4bI8MnHr8c5bNo7lJDdI2qXlWWJk6a9EAFG7vbhTjElYhBVS3/miuE0uOuoLdb8Mc/rVfsmm6eo5o9GA==\",\r\n      \"dev\": true,\r\n      \"bin\": {\r\n        \"nodetouch\": \"bin/nodetouch.js\"\r\n      }\r\n    },\r\n    \"node_modules/tr46\": {\r\n      \"version\": \"0.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz\",\r\n      \"integrity\": \"sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==\"\r\n    },\r\n    \"node_modules/tree-kill\": {\r\n      \"version\": \"1.2.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/tree-kill/-/tree-kill-1.2.2.tgz\",\r\n      \"integrity\": \"sha512-L0Orpi8qGpRG//Nd+H90vFB+3iHnue1zSSGmNOOCh1GLJ7rUKVwV2HvijphGQS2UmhUZewS9VgvxYIdgr+fG1A==\",\r\n      \"dev\": true,\r\n      \"bin\": {\r\n        \"tree-kill\": \"cli.js\"\r\n      }\r\n    },\r\n    \"node_modules/ts-api-utils\": {\r\n      \"version\": \"1.4.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/ts-api-utils/-/ts-api-utils-1.4.0.tgz\",\r\n      \"integrity\": \"sha512-032cPxaEKwM+GT3vA5JXNzIaizx388rhsSW79vGRNGXfRRAdEAn2mvk36PvK5HnOchyWZ7afLEXqYCvPCrzuzQ==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=16\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"typescript\": \">=4.2.0\"\r\n      }\r\n    },\r\n    \"node_modules/ts-jest\": {\r\n      \"version\": \"29.2.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/ts-jest/-/ts-jest-29.2.5.tgz\",\r\n      \"integrity\": \"sha512-KD8zB2aAZrcKIdGk4OwpJggeLcH1FgrICqDSROWqlnJXGCXK4Mn6FcdK2B6670Xr73lHMG1kHw8R87A0ecZ+vA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"bs-logger\": \"^0.2.6\",\r\n        \"ejs\": \"^3.1.10\",\r\n        \"fast-json-stable-stringify\": \"^2.1.0\",\r\n        \"jest-util\": \"^29.0.0\",\r\n        \"json5\": \"^2.2.3\",\r\n        \"lodash.memoize\": \"^4.1.2\",\r\n        \"make-error\": \"^1.3.6\",\r\n        \"semver\": \"^7.6.3\",\r\n        \"yargs-parser\": \"^21.1.1\"\r\n      },\r\n      \"bin\": {\r\n        \"ts-jest\": \"cli.js\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^14.15.0 || ^16.10.0 || ^18.0.0 || >=20.0.0\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@babel/core\": \">=7.0.0-beta.0 <8\",\r\n        \"@jest/transform\": \"^29.0.0\",\r\n        \"@jest/types\": \"^29.0.0\",\r\n        \"babel-jest\": \"^29.0.0\",\r\n        \"jest\": \"^29.0.0\",\r\n        \"typescript\": \">=4.3 <6\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"@babel/core\": {\r\n          \"optional\": true\r\n        },\r\n        \"@jest/transform\": {\r\n          \"optional\": true\r\n        },\r\n        \"@jest/types\": {\r\n          \"optional\": true\r\n        },\r\n        \"babel-jest\": {\r\n          \"optional\": true\r\n        },\r\n        \"esbuild\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"node_modules/ts-loader\": {\r\n      \"version\": \"9.5.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/ts-loader/-/ts-loader-9.5.1.tgz\",\r\n      \"integrity\": \"sha512-rNH3sK9kGZcH9dYzC7CewQm4NtxJTjSEVRJ2DyBZR7f8/wcta+iV44UPCXc5+nzDzivKtlzV6c9P4e+oFhDLYg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"chalk\": \"^4.1.0\",\r\n        \"enhanced-resolve\": \"^5.0.0\",\r\n        \"micromatch\": \"^4.0.0\",\r\n        \"semver\": \"^7.3.4\",\r\n        \"source-map\": \"^0.7.4\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=12.0.0\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"typescript\": \"*\",\r\n        \"webpack\": \"^5.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/ts-node\": {\r\n      \"version\": \"10.9.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/ts-node/-/ts-node-10.9.2.tgz\",\r\n      \"integrity\": \"sha512-f0FFpIdcHgn8zcPSbf1dRevwt047YMnaiJM3u2w2RewrB+fob/zePZcrOyQoLMMO7aBIddLcQIEK5dYjkLnGrQ==\",\r\n      \"devOptional\": true,\r\n      \"dependencies\": {\r\n        \"@cspotcode/source-map-support\": \"^0.8.0\",\r\n        \"@tsconfig/node10\": \"^1.0.7\",\r\n        \"@tsconfig/node12\": \"^1.0.7\",\r\n        \"@tsconfig/node14\": \"^1.0.0\",\r\n        \"@tsconfig/node16\": \"^1.0.2\",\r\n        \"acorn\": \"^8.4.1\",\r\n        \"acorn-walk\": \"^8.1.1\",\r\n        \"arg\": \"^4.1.0\",\r\n        \"create-require\": \"^1.1.0\",\r\n        \"diff\": \"^4.0.1\",\r\n        \"make-error\": \"^1.1.1\",\r\n        \"v8-compile-cache-lib\": \"^3.0.1\",\r\n        \"yn\": \"3.1.1\"\r\n      },\r\n      \"bin\": {\r\n        \"ts-node\": \"dist/bin.js\",\r\n        \"ts-node-cwd\": \"dist/bin-cwd.js\",\r\n        \"ts-node-esm\": \"dist/bin-esm.js\",\r\n        \"ts-node-script\": \"dist/bin-script.js\",\r\n        \"ts-node-transpile-only\": \"dist/bin-transpile.js\",\r\n        \"ts-script\": \"dist/bin-script-deprecated.js\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@swc/core\": \">=1.2.50\",\r\n        \"@swc/wasm\": \">=1.2.50\",\r\n        \"@types/node\": \"*\",\r\n        \"typescript\": \">=2.7\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"@swc/core\": {\r\n          \"optional\": true\r\n        },\r\n        \"@swc/wasm\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"node_modules/tsconfig-paths\": {\r\n      \"version\": \"4.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/tsconfig-paths/-/tsconfig-paths-4.2.0.tgz\",\r\n      \"integrity\": \"sha512-NoZ4roiN7LnbKn9QqE1amc9DJfzvZXxF4xDavcOWt1BPkdx+m+0gJuPM+S0vCe7zTJMYUP0R8pO2XMr+Y8oLIg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"json5\": \"^2.2.2\",\r\n        \"minimist\": \"^1.2.6\",\r\n        \"strip-bom\": \"^3.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=6\"\r\n      }\r\n    },\r\n    \"node_modules/tsconfig-paths-webpack-plugin\": {\r\n      \"version\": \"4.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/tsconfig-paths-webpack-plugin/-/tsconfig-paths-webpack-plugin-4.1.0.tgz\",\r\n      \"integrity\": \"sha512-xWFISjviPydmtmgeUAuXp4N1fky+VCtfhOkDUFIv5ea7p4wuTomI4QTrXvFBX2S4jZsmyTSrStQl+E+4w+RzxA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"chalk\": \"^4.1.0\",\r\n        \"enhanced-resolve\": \"^5.7.0\",\r\n        \"tsconfig-paths\": \"^4.1.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10.13.0\"\r\n      }\r\n    },\r\n    \"node_modules/tsconfig-paths/node_modules/strip-bom\": {\r\n      \"version\": \"3.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/strip-bom/-/strip-bom-3.0.0.tgz\",\r\n      \"integrity\": \"sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=4\"\r\n      }\r\n    },\r\n    \"node_modules/tslib\": {\r\n      \"version\": \"2.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/tslib/-/tslib-2.7.0.tgz\",\r\n      \"integrity\": \"sha512-gLXCKdN1/j47AiHiOkJN69hJmcbGTHI0ImLmbYLHykhgeN0jVGola9yVjFgzCUklsZQMW55o+dW7IXv3RCXDzA==\"\r\n    },\r\n    \"node_modules/type-check\": {\r\n      \"version\": \"0.4.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz\",\r\n      \"integrity\": \"sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"prelude-ls\": \"^1.2.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.8.0\"\r\n      }\r\n    },\r\n    \"node_modules/type-detect\": {\r\n      \"version\": \"4.0.8\",\r\n      \"resolved\": \"https://registry.npmjs.org/type-detect/-/type-detect-4.0.8.tgz\",\r\n      \"integrity\": \"sha512-0fr/mIH1dlO+x7TlcMy+bIDqKPsw/70tVyeHW787goQjhmqaZe10uwLujubK9q9Lg6Fiho1KUKDYz0Z7k7g5/g==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=4\"\r\n      }\r\n    },\r\n    \"node_modules/type-fest\": {\r\n      \"version\": \"0.20.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/type-fest/-/type-fest-0.20.2.tgz\",\r\n      \"integrity\": \"sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/type-is\": {\r\n      \"version\": \"1.6.18\",\r\n      \"resolved\": \"https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz\",\r\n      \"integrity\": \"sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==\",\r\n      \"dependencies\": {\r\n        \"media-typer\": \"0.3.0\",\r\n        \"mime-types\": \"~2.1.24\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.6\"\r\n      }\r\n    },\r\n    \"node_modules/typedarray\": {\r\n      \"version\": \"0.0.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/typedarray/-/typedarray-0.0.6.tgz\",\r\n      \"integrity\": \"sha512-/aCDEGatGvZ2BIk+HmLf4ifCJFwvKFNb9/JeZPMulfgFracn9QFcAf5GO8B/mweUjSoblS5In0cWhqpfs/5PQA==\"\r\n    },\r\n    \"node_modules/typeorm\": {\r\n      \"version\": \"0.3.20\",\r\n      \"resolved\": \"https://registry.npmjs.org/typeorm/-/typeorm-0.3.20.tgz\",\r\n      \"integrity\": \"sha512-sJ0T08dV5eoZroaq9uPKBoNcGslHBR4E4y+EBHs//SiGbblGe7IeduP/IH4ddCcj0qp3PHwDwGnuvqEAnKlq/Q==\",\r\n      \"dependencies\": {\r\n        \"@sqltools/formatter\": \"^1.2.5\",\r\n        \"app-root-path\": \"^3.1.0\",\r\n        \"buffer\": \"^6.0.3\",\r\n        \"chalk\": \"^4.1.2\",\r\n        \"cli-highlight\": \"^2.1.11\",\r\n        \"dayjs\": \"^1.11.9\",\r\n        \"debug\": \"^4.3.4\",\r\n        \"dotenv\": \"^16.0.3\",\r\n        \"glob\": \"^10.3.10\",\r\n        \"mkdirp\": \"^2.1.3\",\r\n        \"reflect-metadata\": \"^0.2.1\",\r\n        \"sha.js\": \"^2.4.11\",\r\n        \"tslib\": \"^2.5.0\",\r\n        \"uuid\": \"^9.0.0\",\r\n        \"yargs\": \"^17.6.2\"\r\n      },\r\n      \"bin\": {\r\n        \"typeorm\": \"cli.js\",\r\n        \"typeorm-ts-node-commonjs\": \"cli-ts-node-commonjs.js\",\r\n        \"typeorm-ts-node-esm\": \"cli-ts-node-esm.js\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=16.13.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://opencollective.com/typeorm\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"@google-cloud/spanner\": \"^5.18.0\",\r\n        \"@sap/hana-client\": \"^2.12.25\",\r\n        \"better-sqlite3\": \"^7.1.2 || ^8.0.0 || ^9.0.0\",\r\n        \"hdb-pool\": \"^0.1.6\",\r\n        \"ioredis\": \"^5.0.4\",\r\n        \"mongodb\": \"^5.8.0\",\r\n        \"mssql\": \"^9.1.1 || ^10.0.1\",\r\n        \"mysql2\": \"^2.2.5 || ^3.0.1\",\r\n        \"oracledb\": \"^6.3.0\",\r\n        \"pg\": \"^8.5.1\",\r\n        \"pg-native\": \"^3.0.0\",\r\n        \"pg-query-stream\": \"^4.0.0\",\r\n        \"redis\": \"^3.1.1 || ^4.0.0\",\r\n        \"sql.js\": \"^1.4.0\",\r\n        \"sqlite3\": \"^5.0.3\",\r\n        \"ts-node\": \"^10.7.0\",\r\n        \"typeorm-aurora-data-api-driver\": \"^2.0.0\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"@google-cloud/spanner\": {\r\n          \"optional\": true\r\n        },\r\n        \"@sap/hana-client\": {\r\n          \"optional\": true\r\n        },\r\n        \"better-sqlite3\": {\r\n          \"optional\": true\r\n        },\r\n        \"hdb-pool\": {\r\n          \"optional\": true\r\n        },\r\n        \"ioredis\": {\r\n          \"optional\": true\r\n        },\r\n        \"mongodb\": {\r\n          \"optional\": true\r\n        },\r\n        \"mssql\": {\r\n          \"optional\": true\r\n        },\r\n        \"mysql2\": {\r\n          \"optional\": true\r\n        },\r\n        \"oracledb\": {\r\n          \"optional\": true\r\n        },\r\n        \"pg\": {\r\n          \"optional\": true\r\n        },\r\n        \"pg-native\": {\r\n          \"optional\": true\r\n        },\r\n        \"pg-query-stream\": {\r\n          \"optional\": true\r\n        },\r\n        \"redis\": {\r\n          \"optional\": true\r\n        },\r\n        \"sql.js\": {\r\n          \"optional\": true\r\n        },\r\n        \"sqlite3\": {\r\n          \"optional\": true\r\n        },\r\n        \"ts-node\": {\r\n          \"optional\": true\r\n        },\r\n        \"typeorm-aurora-data-api-driver\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"node_modules/typeorm/node_modules/buffer\": {\r\n      \"version\": \"6.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/buffer/-/buffer-6.0.3.tgz\",\r\n      \"integrity\": \"sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==\",\r\n      \"funding\": [\r\n        {\r\n          \"type\": \"github\",\r\n          \"url\": \"https://github.com/sponsors/feross\"\r\n        },\r\n        {\r\n          \"type\": \"patreon\",\r\n          \"url\": \"https://www.patreon.com/feross\"\r\n        },\r\n        {\r\n          \"type\": \"consulting\",\r\n          \"url\": \"https://feross.org/support\"\r\n        }\r\n      ],\r\n      \"dependencies\": {\r\n        \"base64-js\": \"^1.3.1\",\r\n        \"ieee754\": \"^1.2.1\"\r\n      }\r\n    },\r\n    \"node_modules/typeorm/node_modules/mkdirp\": {\r\n      \"version\": \"2.1.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/mkdirp/-/mkdirp-2.1.6.tgz\",\r\n      \"integrity\": \"sha512-+hEnITedc8LAtIP9u3HJDFIdcLV2vXP33sqLLIzkv1Db1zO/1OxbvYf0Y1OC/S/Qo5dxHXepofhmxL02PsKe+A==\",\r\n      \"bin\": {\r\n        \"mkdirp\": \"dist/cjs/src/bin.js\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/isaacs\"\r\n      }\r\n    },\r\n    \"node_modules/typescript\": {\r\n      \"version\": \"5.6.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/typescript/-/typescript-5.6.3.tgz\",\r\n      \"integrity\": \"sha512-hjcS1mhfuyi4WW8IWtjP7brDrG2cuDZukyrYrSauoXGNgx0S7zceP07adYkJycEr56BOUTNPzbInooiN3fn1qw==\",\r\n      \"devOptional\": true,\r\n      \"bin\": {\r\n        \"tsc\": \"bin/tsc\",\r\n        \"tsserver\": \"bin/tsserver\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=14.17\"\r\n      }\r\n    },\r\n    \"node_modules/uid\": {\r\n      \"version\": \"2.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/uid/-/uid-2.0.2.tgz\",\r\n      \"integrity\": \"sha512-u3xV3X7uzvi5b1MncmZo3i2Aw222Zk1keqLA1YkHldREkAhAqi65wuPfe7lHx8H/Wzy+8CE7S7uS3jekIM5s8g==\",\r\n      \"dependencies\": {\r\n        \"@lukeed/csprng\": \"^1.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/ulid\": {\r\n      \"version\": \"2.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/ulid/-/ulid-2.3.0.tgz\",\r\n      \"integrity\": \"sha512-keqHubrlpvT6G2wH0OEfSW4mquYRcbe/J8NMmveoQOjUqmo+hXtO+ORCpWhdbZ7k72UtY61BL7haGxW6enBnjw==\",\r\n      \"bin\": {\r\n        \"ulid\": \"bin/cli.js\"\r\n      }\r\n    },\r\n    \"node_modules/undefsafe\": {\r\n      \"version\": \"2.0.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.5.tgz\",\r\n      \"integrity\": \"sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/undici-types\": {\r\n      \"version\": \"6.19.8\",\r\n      \"resolved\": \"https://registry.npmjs.org/undici-types/-/undici-types-6.19.8.tgz\",\r\n      \"integrity\": \"sha512-ve2KP6f/JnbPBFyobGHuerC9g1FYGn/F8n1LWTwNxCEzd6IfqTwUQcNXgEtmmQ6DlRrC1hrSrBnCZPokRrDHjw==\"\r\n    },\r\n    \"node_modules/universalify\": {\r\n      \"version\": \"2.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz\",\r\n      \"integrity\": \"sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">= 10.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/unpipe\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz\",\r\n      \"integrity\": \"sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\"\r\n      }\r\n    },\r\n    \"node_modules/update-browserslist-db\": {\r\n      \"version\": \"1.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.1.tgz\",\r\n      \"integrity\": \"sha512-R8UzCaa9Az+38REPiJ1tXlImTJXlVfgHZsglwBD/k6nj76ctsH1E3q4doGrukiLQd3sGQYu56r5+lo5r94l29A==\",\r\n      \"dev\": true,\r\n      \"funding\": [\r\n        {\r\n          \"type\": \"opencollective\",\r\n          \"url\": \"https://opencollective.com/browserslist\"\r\n        },\r\n        {\r\n          \"type\": \"tidelift\",\r\n          \"url\": \"https://tidelift.com/funding/github/npm/browserslist\"\r\n        },\r\n        {\r\n          \"type\": \"github\",\r\n          \"url\": \"https://github.com/sponsors/ai\"\r\n        }\r\n      ],\r\n      \"dependencies\": {\r\n        \"escalade\": \"^3.2.0\",\r\n        \"picocolors\": \"^1.1.0\"\r\n      },\r\n      \"bin\": {\r\n        \"update-browserslist-db\": \"cli.js\"\r\n      },\r\n      \"peerDependencies\": {\r\n        \"browserslist\": \">= 4.21.0\"\r\n      }\r\n    },\r\n    \"node_modules/uri-js\": {\r\n      \"version\": \"4.4.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz\",\r\n      \"integrity\": \"sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"punycode\": \"^2.1.0\"\r\n      }\r\n    },\r\n    \"node_modules/util-deprecate\": {\r\n      \"version\": \"1.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz\",\r\n      \"integrity\": \"sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==\"\r\n    },\r\n    \"node_modules/utils-merge\": {\r\n      \"version\": \"1.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz\",\r\n      \"integrity\": \"sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.4.0\"\r\n      }\r\n    },\r\n    \"node_modules/uuid\": {\r\n      \"version\": \"9.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/uuid/-/uuid-9.0.1.tgz\",\r\n      \"integrity\": \"sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==\",\r\n      \"funding\": [\r\n        \"https://github.com/sponsors/broofa\",\r\n        \"https://github.com/sponsors/ctavan\"\r\n      ],\r\n      \"bin\": {\r\n        \"uuid\": \"dist/bin/uuid\"\r\n      }\r\n    },\r\n    \"node_modules/v8-compile-cache-lib\": {\r\n      \"version\": \"3.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/v8-compile-cache-lib/-/v8-compile-cache-lib-3.0.1.tgz\",\r\n      \"integrity\": \"sha512-wa7YjyUGfNZngI/vtK0UHAN+lgDCxBPCylVXGp0zu59Fz5aiGtNXaq3DhIov063MorB+VfufLh3JlF2KdTK3xg==\",\r\n      \"devOptional\": true\r\n    },\r\n    \"node_modules/v8-to-istanbul\": {\r\n      \"version\": \"9.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/v8-to-istanbul/-/v8-to-istanbul-9.3.0.tgz\",\r\n      \"integrity\": \"sha512-kiGUalWN+rgBJ/1OHZsBtU4rXZOfj/7rKQxULKlIzwzQSvMJUUNgPwJEEh7gU6xEVxC0ahoOBvN2YI8GH6FNgA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"@jridgewell/trace-mapping\": \"^0.3.12\",\r\n        \"@types/istanbul-lib-coverage\": \"^2.0.1\",\r\n        \"convert-source-map\": \"^2.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10.12.0\"\r\n      }\r\n    },\r\n    \"node_modules/validator\": {\r\n      \"version\": \"13.12.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/validator/-/validator-13.12.0.tgz\",\r\n      \"integrity\": \"sha512-c1Q0mCiPlgdTVVVIJIrBuxNicYE+t/7oKeI9MWLj3fh/uq2Pxh/3eeWbVZ4OcGW1TUf53At0njHw5SMdA3tmMg==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.10\"\r\n      }\r\n    },\r\n    \"node_modules/vary\": {\r\n      \"version\": \"1.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/vary/-/vary-1.1.2.tgz\",\r\n      \"integrity\": \"sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==\",\r\n      \"engines\": {\r\n        \"node\": \">= 0.8\"\r\n      }\r\n    },\r\n    \"node_modules/walker\": {\r\n      \"version\": \"1.0.8\",\r\n      \"resolved\": \"https://registry.npmjs.org/walker/-/walker-1.0.8.tgz\",\r\n      \"integrity\": \"sha512-ts/8E8l5b7kY0vlWLewOkDXMmPdLcVV4GmOQLyxuSswIJsweeFZtAsMF7k1Nszz+TYBQrlYRmzOnr398y1JemQ==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"makeerror\": \"1.0.12\"\r\n      }\r\n    },\r\n    \"node_modules/watchpack\": {\r\n      \"version\": \"2.4.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/watchpack/-/watchpack-2.4.2.tgz\",\r\n      \"integrity\": \"sha512-TnbFSbcOCcDgjZ4piURLCbJ3nJhznVh9kw6F6iokjiFPl8ONxe9A6nMDVXDiNbrSfLILs6vB07F7wLBrwPYzJw==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"glob-to-regexp\": \"^0.4.1\",\r\n        \"graceful-fs\": \"^4.1.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10.13.0\"\r\n      }\r\n    },\r\n    \"node_modules/wcwidth\": {\r\n      \"version\": \"1.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/wcwidth/-/wcwidth-1.0.1.tgz\",\r\n      \"integrity\": \"sha512-XHPEwS0q6TaxcvG85+8EYkbiCux2XtWG2mkc47Ng2A77BQu9+DqIOJldST4HgPkuea7dvKSj5VgX3P1d4rW8Tg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"defaults\": \"^1.0.3\"\r\n      }\r\n    },\r\n    \"node_modules/webidl-conversions\": {\r\n      \"version\": \"3.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz\",\r\n      \"integrity\": \"sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==\"\r\n    },\r\n    \"node_modules/webpack\": {\r\n      \"version\": \"5.96.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/webpack/-/webpack-5.96.1.tgz\",\r\n      \"integrity\": \"sha512-l2LlBSvVZGhL4ZrPwyr8+37AunkcYj5qh8o6u2/2rzoPc8gxFJkLj1WxNgooi9pnoc06jh0BjuXnamM4qlujZA==\",\r\n      \"dev\": true,\r\n      \"peer\": true,\r\n      \"dependencies\": {\r\n        \"@types/eslint-scope\": \"^3.7.7\",\r\n        \"@types/estree\": \"^1.0.6\",\r\n        \"@webassemblyjs/ast\": \"^1.12.1\",\r\n        \"@webassemblyjs/wasm-edit\": \"^1.12.1\",\r\n        \"@webassemblyjs/wasm-parser\": \"^1.12.1\",\r\n        \"acorn\": \"^8.14.0\",\r\n        \"browserslist\": \"^4.24.0\",\r\n        \"chrome-trace-event\": \"^1.0.2\",\r\n        \"enhanced-resolve\": \"^5.17.1\",\r\n        \"es-module-lexer\": \"^1.2.1\",\r\n        \"eslint-scope\": \"5.1.1\",\r\n        \"events\": \"^3.2.0\",\r\n        \"glob-to-regexp\": \"^0.4.1\",\r\n        \"graceful-fs\": \"^4.2.11\",\r\n        \"json-parse-even-better-errors\": \"^2.3.1\",\r\n        \"loader-runner\": \"^4.2.0\",\r\n        \"mime-types\": \"^2.1.27\",\r\n        \"neo-async\": \"^2.6.2\",\r\n        \"schema-utils\": \"^3.2.0\",\r\n        \"tapable\": \"^2.1.1\",\r\n        \"terser-webpack-plugin\": \"^5.3.10\",\r\n        \"watchpack\": \"^2.4.1\",\r\n        \"webpack-sources\": \"^3.2.3\"\r\n      },\r\n      \"bin\": {\r\n        \"webpack\": \"bin/webpack.js\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10.13.0\"\r\n      },\r\n      \"funding\": {\r\n        \"type\": \"opencollective\",\r\n        \"url\": \"https://opencollective.com/webpack\"\r\n      },\r\n      \"peerDependenciesMeta\": {\r\n        \"webpack-cli\": {\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"node_modules/webpack-node-externals\": {\r\n      \"version\": \"3.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/webpack-node-externals/-/webpack-node-externals-3.0.0.tgz\",\r\n      \"integrity\": \"sha512-LnL6Z3GGDPht/AigwRh2dvL9PQPFQ8skEpVrWZXLWBYmqcaojHNN0onvHzie6rq7EWKrrBfPYqNEzTJgiwEQDQ==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=6\"\r\n      }\r\n    },\r\n    \"node_modules/webpack-sources\": {\r\n      \"version\": \"3.2.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/webpack-sources/-/webpack-sources-3.2.3.tgz\",\r\n      \"integrity\": \"sha512-/DyMEOrDgLKKIG0fmvtz+4dUX/3Ghozwgm6iPp8KRhvn+eQf9+Q7GWxVNMk3+uCPWfdXYC4ExGBckIXdFEfH1w==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=10.13.0\"\r\n      }\r\n    },\r\n    \"node_modules/webpack/node_modules/eslint-scope\": {\r\n      \"version\": \"5.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/eslint-scope/-/eslint-scope-5.1.1.tgz\",\r\n      \"integrity\": \"sha512-2NxwbF/hZ0KpepYN0cNbo+FN6XoK7GaHlQhgx/hIZl6Va0bF45RQOOwhLIy8lQDbuCiadSLCBnH2CFYquit5bw==\",\r\n      \"dev\": true,\r\n      \"peer\": true,\r\n      \"dependencies\": {\r\n        \"esrecurse\": \"^4.3.0\",\r\n        \"estraverse\": \"^4.1.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/webpack/node_modules/estraverse\": {\r\n      \"version\": \"4.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/estraverse/-/estraverse-4.3.0.tgz\",\r\n      \"integrity\": \"sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==\",\r\n      \"dev\": true,\r\n      \"peer\": true,\r\n      \"engines\": {\r\n        \"node\": \">=4.0\"\r\n      }\r\n    },\r\n    \"node_modules/whatwg-url\": {\r\n      \"version\": \"5.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz\",\r\n      \"integrity\": \"sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==\",\r\n      \"dependencies\": {\r\n        \"tr46\": \"~0.0.3\",\r\n        \"webidl-conversions\": \"^3.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/which\": {\r\n      \"version\": \"2.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/which/-/which-2.0.2.tgz\",\r\n      \"integrity\": \"sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==\",\r\n      \"dependencies\": {\r\n        \"isexe\": \"^2.0.0\"\r\n      },\r\n      \"bin\": {\r\n        \"node-which\": \"bin/node-which\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 8\"\r\n      }\r\n    },\r\n    \"node_modules/wide-align\": {\r\n      \"version\": \"1.1.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/wide-align/-/wide-align-1.1.5.tgz\",\r\n      \"integrity\": \"sha512-eDMORYaPNZ4sQIuuYPDHdQvf4gyCF9rEEV/yPxGfwPkRodwEgiMUUXTx/dex+Me0wxx53S+NgUHaP7y3MGlDmg==\",\r\n      \"dependencies\": {\r\n        \"string-width\": \"^1.0.2 || 2 || 3 || 4\"\r\n      }\r\n    },\r\n    \"node_modules/word-wrap\": {\r\n      \"version\": \"1.2.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz\",\r\n      \"integrity\": \"sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=0.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/wrap-ansi\": {\r\n      \"version\": \"6.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-6.2.0.tgz\",\r\n      \"integrity\": \"sha512-r6lPcBGxZXlIcymEu7InxDMhdW0KDxpLgoFLcguasxCaJ/SOIZwINatK9KY/tf+ZrlywOKU0UDj3ATXUBfxJXA==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"ansi-styles\": \"^4.0.0\",\r\n        \"string-width\": \"^4.1.0\",\r\n        \"strip-ansi\": \"^6.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/wrap-ansi-cjs\": {\r\n      \"name\": \"wrap-ansi\",\r\n      \"version\": \"7.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz\",\r\n      \"integrity\": \"sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==\",\r\n      \"dependencies\": {\r\n        \"ansi-styles\": \"^4.0.0\",\r\n        \"string-width\": \"^4.1.0\",\r\n        \"strip-ansi\": \"^6.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/chalk/wrap-ansi?sponsor=1\"\r\n      }\r\n    },\r\n    \"node_modules/wrappy\": {\r\n      \"version\": \"1.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz\",\r\n      \"integrity\": \"sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==\"\r\n    },\r\n    \"node_modules/write-file-atomic\": {\r\n      \"version\": \"4.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-4.0.2.tgz\",\r\n      \"integrity\": \"sha512-7KxauUdBmSdWnmpaGFg+ppNjKF8uNLry8LyzjauQDOVONfFLNKrKvQOxZ/VuTIcS/gge/YNahf5RIIQWTSarlg==\",\r\n      \"dev\": true,\r\n      \"dependencies\": {\r\n        \"imurmurhash\": \"^0.1.4\",\r\n        \"signal-exit\": \"^3.0.7\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^12.13.0 || ^14.15.0 || >=16.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/write-file-atomic/node_modules/signal-exit\": {\r\n      \"version\": \"3.0.7\",\r\n      \"resolved\": \"https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz\",\r\n      \"integrity\": \"sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/xtend\": {\r\n      \"version\": \"4.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/xtend/-/xtend-4.0.2.tgz\",\r\n      \"integrity\": \"sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==\",\r\n      \"engines\": {\r\n        \"node\": \">=0.4\"\r\n      }\r\n    },\r\n    \"node_modules/y18n\": {\r\n      \"version\": \"5.0.8\",\r\n      \"resolved\": \"https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz\",\r\n      \"integrity\": \"sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==\",\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      }\r\n    },\r\n    \"node_modules/yallist\": {\r\n      \"version\": \"3.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz\",\r\n      \"integrity\": \"sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==\",\r\n      \"dev\": true\r\n    },\r\n    \"node_modules/yargs\": {\r\n      \"version\": \"17.7.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz\",\r\n      \"integrity\": \"sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==\",\r\n      \"dependencies\": {\r\n        \"cliui\": \"^8.0.1\",\r\n        \"escalade\": \"^3.1.1\",\r\n        \"get-caller-file\": \"^2.0.5\",\r\n        \"require-directory\": \"^2.1.1\",\r\n        \"string-width\": \"^4.2.3\",\r\n        \"y18n\": \"^5.0.5\",\r\n        \"yargs-parser\": \"^21.1.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=12\"\r\n      }\r\n    },\r\n    \"node_modules/yargs-parser\": {\r\n      \"version\": \"21.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz\",\r\n      \"integrity\": \"sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==\",\r\n      \"engines\": {\r\n        \"node\": \">=12\"\r\n      }\r\n    },\r\n    \"node_modules/yn\": {\r\n      \"version\": \"3.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/yn/-/yn-3.1.1.tgz\",\r\n      \"integrity\": \"sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q==\",\r\n      \"devOptional\": true,\r\n      \"engines\": {\r\n        \"node\": \">=6\"\r\n      }\r\n    },\r\n    \"node_modules/yocto-queue\": {\r\n      \"version\": \"0.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz\",\r\n      \"integrity\": \"sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==\",\r\n      \"dev\": true,\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    }\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/package-lock.json b/api/package-lock.json
--- a/api/package-lock.json	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/package-lock.json	(date 1736262295595)
@@ -16,7 +16,7 @@
         "@nestjs/jwt": "^10.2.0",
         "@nestjs/passport": "^10.0.3",
         "@nestjs/platform-express": "^10.3.9",
-        "@nestjs/swagger": "^7.3.1",
+        "@nestjs/swagger": "^8.1.0",
         "@nestjs/typeorm": "^10.0.2",
         "@prisma/client": "^6.0.1",
         "@types/passport-jwt": "^4.0.1",
@@ -1727,9 +1727,10 @@
       }
     },
     "node_modules/@nestjs/mapped-types": {
-      "version": "2.0.5",
-      "resolved": "https://registry.npmjs.org/@nestjs/mapped-types/-/mapped-types-2.0.5.tgz",
-      "integrity": "sha512-bSJv4pd6EY99NX9CjBIyn4TVDoSit82DUZlL4I3bqNfy5Gt+gXTa86i3I/i0iIV9P4hntcGM5GyO+FhZAhxtyg==",
+      "version": "2.0.6",
+      "resolved": "https://registry.npmjs.org/@nestjs/mapped-types/-/mapped-types-2.0.6.tgz",
+      "integrity": "sha512-84ze+CPfp1OWdpRi1/lOu59hOhTz38eVzJvRKrg9ykRFwDz+XleKfMsG0gUqNZYFa6v53XYzeD+xItt8uDW7NQ==",
+      "license": "MIT",
       "peerDependencies": {
         "@nestjs/common": "^8.0.0 || ^9.0.0 || ^10.0.0",
         "class-transformer": "^0.4.0 || ^0.5.0",
@@ -1854,16 +1855,17 @@
       "dev": true
     },
     "node_modules/@nestjs/swagger": {
-      "version": "7.4.2",
-      "resolved": "https://registry.npmjs.org/@nestjs/swagger/-/swagger-7.4.2.tgz",
-      "integrity": "sha512-Mu6TEn1M/owIvAx2B4DUQObQXqo2028R2s9rSZ/hJEgBK95+doTwS0DjmVA2wTeZTyVtXOoN7CsoM5pONBzvKQ==",
+      "version": "8.1.0",
+      "resolved": "https://registry.npmjs.org/@nestjs/swagger/-/swagger-8.1.0.tgz",
+      "integrity": "sha512-8hzH+r/31XshzXHC9vww4T0xjDAxMzvOaT1xAOvvY1LtXTWyNRCUP2iQsCYJOnnMrR+vydWjvRZiuB3hdvaHxA==",
+      "license": "MIT",
       "dependencies": {
         "@microsoft/tsdoc": "^0.15.0",
-        "@nestjs/mapped-types": "2.0.5",
+        "@nestjs/mapped-types": "2.0.6",
         "js-yaml": "4.1.0",
         "lodash": "4.17.21",
         "path-to-regexp": "3.3.0",
-        "swagger-ui-dist": "5.17.14"
+        "swagger-ui-dist": "5.18.2"
       },
       "peerDependencies": {
         "@fastify/static": "^6.0.0 || ^7.0.0",
@@ -2062,6 +2064,13 @@
         "@prisma/debug": "6.0.1"
       }
     },
+    "node_modules/@scarf/scarf": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/@scarf/scarf/-/scarf-1.4.0.tgz",
+      "integrity": "sha512-xxeapPiUXdZAE3che6f3xogoJPeZgig6omHEy1rIY5WVsB3H2BHNnZH+gHG6x91SCWyQCzWGsuL2Hh3ClO5/qQ==",
+      "hasInstallScript": true,
+      "license": "Apache-2.0"
+    },
     "node_modules/@sinclair/typebox": {
       "version": "0.27.8",
       "resolved": "https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.27.8.tgz",
@@ -8915,14 +8924,19 @@
       }
     },
     "node_modules/swagger-ui-dist": {
-      "version": "5.17.14",
-      "resolved": "https://registry.npmjs.org/swagger-ui-dist/-/swagger-ui-dist-5.17.14.tgz",
-      "integrity": "sha512-CVbSfaLpstV65OnSjbXfVd6Sta3q3F7Cj/yYuvHMp1P90LztOLs6PfUnKEVAeiIVQt9u2SaPwv0LiH/OyMjHRw=="
+      "version": "5.18.2",
+      "resolved": "https://registry.npmjs.org/swagger-ui-dist/-/swagger-ui-dist-5.18.2.tgz",
+      "integrity": "sha512-J+y4mCw/zXh1FOj5wGJvnAajq6XgHOyywsa9yITmwxIlJbMqITq3gYRZHaeqLVH/eV/HOPphE6NjF+nbSNC5Zw==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@scarf/scarf": "=1.4.0"
+      }
     },
     "node_modules/swagger-ui-express": {
       "version": "5.0.1",
       "resolved": "https://registry.npmjs.org/swagger-ui-express/-/swagger-ui-express-5.0.1.tgz",
       "integrity": "sha512-SrNU3RiBGTLLmFU8GIJdOdanJTl4TOmT27tt3bWWHppqYmAZ6IDuEuBvMU6nZq0zLEe6b/1rACXCgLZqO6ZfrA==",
+      "license": "MIT",
       "dependencies": {
         "swagger-ui-dist": ">=5.0.0"
       },
Index: api/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"name\": \"api\",\r\n  \"version\": \"0.0.1\",\r\n  \"description\": \"\",\r\n  \"author\": \"\",\r\n  \"private\": true,\r\n  \"license\": \"UNLICENSED\",\r\n  \"scripts\": {\r\n    \"typeorm\": \"ts-node -r tsconfig-paths/register ./node_modules/typeorm/cli.js\",\r\n    \"migration:create\": \"npm run typeorm migration:create\",\r\n    \"migration:generate\": \"npm run typeorm migration:generate\",\r\n    \"migration:run\": \"npm run typeorm migration:run\",\r\n    \"migration:revert\": \"npm run typeorm migration:revert\",\r\n    \"build\": \"nest build\",\r\n    \"format\": \"prettier --write \\\"src/**/*.ts\\\" \\\"test/**/*.ts\\\"\",\r\n    \"start\": \"nest start\",\r\n    \"watch\": \"ng build --watch --configuration development\",\r\n    \"start:dev\": \"nest start --watch\",\r\n    \"start:debug\": \"nest start --debug --watch\",\r\n    \"start:prod\": \"node dist/main\",\r\n    \"lint\": \"eslint \\\"{src,apps,libs,test}/**/*.ts\\\" --fix\",\r\n    \"test\": \"jest\",\r\n    \"test:watch\": \"jest --watch\",\r\n    \"test:cov\": \"jest --coverage\",\r\n    \"test:debug\": \"node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand\",\r\n    \"test:e2e\": \"jest --config ./test/jest-e2e.json\"\r\n  },\r\n  \"dependencies\": {\r\n    \"@nestjs/axios\": \"^3.1.3\",\r\n    \"@nestjs/common\": \"^10.3.9\",\r\n    \"@nestjs/config\": \"^3.3.0\",\r\n    \"@nestjs/core\": \"^10.3.9\",\r\n    \"@nestjs/jwt\": \"^10.2.0\",\r\n    \"@nestjs/passport\": \"^10.0.3\",\r\n    \"@nestjs/platform-express\": \"^10.3.9\",\r\n    \"@nestjs/swagger\": \"^7.3.1\",\r\n    \"@nestjs/typeorm\": \"^10.0.2\",\r\n    \"@prisma/client\": \"^6.0.1\",\r\n    \"@types/passport-jwt\": \"^4.0.1\",\r\n    \"@types/paypal-rest-sdk\": \"^1.7.9\",\r\n    \"axios\": \"^1.7.9\",\r\n    \"bcrypt\": \"^5.1.1\",\r\n    \"builder-pattern\": \"^2.2.0\",\r\n    \"class-transformer\": \"^0.5.1\",\r\n    \"class-validator\": \"^0.14.1\",\r\n    \"mysql2\": \"^3.10.1\",\r\n    \"passport\": \"^0.7.0\",\r\n    \"passport-jwt\": \"^4.0.1\",\r\n    \"pg\": \"^8.13.1\",\r\n    \"reflect-metadata\": \"^0.2.0\",\r\n    \"swagger-ui-express\": \"^5.0.1\",\r\n    \"typeorm\": \"^0.3.20\",\r\n    \"ulid\": \"^2.3.0\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@nestjs/cli\": \"^10.0.0\",\r\n    \"@nestjs/schematics\": \"^10.0.0\",\r\n    \"@nestjs/testing\": \"^10.0.0\",\r\n    \"@types/bcrypt\": \"^5.0.2\",\r\n    \"@types/express\": \"^4.17.17\",\r\n    \"@types/jest\": \"^29.5.2\",\r\n    \"@types/node\": \"^20.3.1\",\r\n    \"@types/supertest\": \"^6.0.0\",\r\n    \"@types/swagger-ui-express\": \"^4.1.6\",\r\n    \"@typescript-eslint/eslint-plugin\": \"^6.0.0\",\r\n    \"@typescript-eslint/parser\": \"^6.0.0\",\r\n    \"eslint\": \"^8.42.0\",\r\n    \"eslint-config-prettier\": \"^9.0.0\",\r\n    \"eslint-plugin-prettier\": \"^5.0.0\",\r\n    \"jest\": \"^29.5.0\",\r\n    \"nodemon\": \"^3.1.3\",\r\n    \"prettier\": \"^3.0.0\",\r\n    \"prisma\": \"^6.0.1\",\r\n    \"source-map-support\": \"^0.5.21\",\r\n    \"supertest\": \"^6.3.3\",\r\n    \"ts-jest\": \"^29.1.0\",\r\n    \"ts-loader\": \"^9.4.3\",\r\n    \"ts-node\": \"^10.9.1\",\r\n    \"tsconfig-paths\": \"^4.2.0\",\r\n    \"typescript\": \"^5.1.3\"\r\n  },\r\n  \"jest\": {\r\n    \"moduleFileExtensions\": [\r\n      \"js\",\r\n      \"json\",\r\n      \"ts\"\r\n    ],\r\n    \"rootDir\": \"src\",\r\n    \"testRegex\": \".*\\\\.spec\\\\.ts$\",\r\n    \"transform\": {\r\n      \"^.+\\\\.(t|j)s$\": \"ts-jest\"\r\n    },\r\n    \"collectCoverageFrom\": [\r\n      \"**/*.(t|j)s\"\r\n    ],\r\n    \"coverageDirectory\": \"../coverage\",\r\n    \"testEnvironment\": \"node\",\r\n    \"scripts\": {\r\n      \"start:dev\": \"nodemon --watch 'dist/**/*.js' --exec 'node' dist/main.js\"\r\n    }\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/package.json b/api/package.json
--- a/api/package.json	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/package.json	(date 1736261827617)
@@ -33,7 +33,7 @@
     "@nestjs/jwt": "^10.2.0",
     "@nestjs/passport": "^10.0.3",
     "@nestjs/platform-express": "^10.3.9",
-    "@nestjs/swagger": "^7.3.1",
+    "@nestjs/swagger": "^8.1.0",
     "@nestjs/typeorm": "^10.0.2",
     "@prisma/client": "^6.0.1",
     "@types/passport-jwt": "^4.0.1",
Index: api/src/main.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { NestFactory } from '@nestjs/core';\r\nimport { ApiInterceptor, HttpExceptionFilter, swaggerConfiguration } from '@common/config';\r\nimport { ValidationPipe, Logger, BadRequestException } from '@nestjs/common';\r\nimport { configManager } from '@common/config';\r\nimport { ConfigKey } from '@common/config/enum';\r\nimport { AppModule } from './feature';\r\n\r\nconst bootstrap = async () => {\r\n  const app = await NestFactory.create(AppModule);\r\n\r\n  // Ajout de CORS ici\r\n  app.enableCors({\r\n    origin: 'http://localhost:4200', // Autorise le frontend à accéder au backend\r\n    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\r\n    credentials: true, // Si vous utilisez des cookies ou de l'authentification\r\n  });\r\n\r\n  app.useGlobalFilters(new HttpExceptionFilter());\r\n  app.setGlobalPrefix('api');\r\n  app.setGlobalPrefix(configManager.getValue(ConfigKey.APP_BASE_URL));\r\n  app.enableCors({\r\n    origin: 'http://localhost:4200', // URL de votre frontend Angular\r\n    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\r\n    credentials: true,\r\n  });\r\n  app.useGlobalPipes(\r\n    new ValidationPipe({\r\n      exceptionFactory: (validationErrors = []) => {\r\n        const messages = validationErrors.map(error => error.toString()).join(', ');\r\n        throw new BadRequestException(messages);\r\n      }\r\n    })\r\n  );\r\n\r\n  // Swagger configuration\r\n  swaggerConfiguration.config(app);\r\n\r\n  await app.listen(configManager.getValue(ConfigKey.APP_PORT));\r\n  const logger: Logger = new Logger('Main Logger');\r\n  logger.log('Server is started!');\r\n};\r\n\r\nbootstrap().catch((error) => {\r\n  console.error(error);\r\n  process.exit(1);\r\n});\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/main.ts b/api/src/main.ts
--- a/api/src/main.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/main.ts	(date 1736262015380)
@@ -1,5 +1,9 @@
 import { NestFactory } from '@nestjs/core';
-import { ApiInterceptor, HttpExceptionFilter, swaggerConfiguration } from '@common/config';
+import {
+  ApiInterceptor,
+  HttpExceptionFilter,
+  swaggerConfiguration,
+} from '@common/config';
 import { ValidationPipe, Logger, BadRequestException } from '@nestjs/common';
 import { configManager } from '@common/config';
 import { ConfigKey } from '@common/config/enum';
@@ -26,10 +30,12 @@
   app.useGlobalPipes(
     new ValidationPipe({
       exceptionFactory: (validationErrors = []) => {
-        const messages = validationErrors.map(error => error.toString()).join(', ');
+        const messages = validationErrors
+          .map((error) => error.toString())
+          .join(', ');
         throw new BadRequestException(messages);
-      }
-    })
+      },
+    }),
   );
 
   // Swagger configuration
Index: api/src/model/Cart/cart.controller.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/Cart/cart.controller.ts\r\nimport { Controller, Post, Body, UseGuards, Req, Get, Put, Delete, Param, Logger } from '@nestjs/common';\r\nimport { CartService } from './cart.service';\r\nimport { UpdateCartDto } from './dto/update-cart.dto';\r\nimport { CreateCartDto } from './dto/create-cart.dto';\r\nimport { JwtGuard } from '@feature/security';\r\n\r\n@Controller('cart')\r\nexport class CartController {\r\n  private readonly logger = new Logger(CartController.name);\r\n\r\n  constructor(private readonly cartService: CartService) {}\r\n\r\n  // Ajouter au panier\r\n  @Post()\r\n  @UseGuards(JwtGuard)\r\n  async addToCart(@Req() request, @Body() createCartDto: CreateCartDto) {\r\n    this.logger.debug(`Adding to cart - User: ${JSON.stringify(request.user)}`);\r\n    this.logger.debug(`CreateCartDto: ${JSON.stringify(createCartDto)}`);\r\n\r\n    const clientId = request.user.clientId;\r\n    try {\r\n      const result = await this.cartService.addToCart(clientId, createCartDto);\r\n      this.logger.debug(`Add to cart result: ${JSON.stringify(result)}`);\r\n      return result;\r\n    } catch (error) {\r\n      this.logger.error(`Error adding to cart: ${error.message}`);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Récupérer le panier\r\n  @Get()\r\n  @UseGuards(JwtGuard)\r\n  async getCart(@Req() request) {\r\n    const clientId = request.user.clientId;\r\n    this.logger.debug(`Getting cart for client: ${clientId}`);\r\n\r\n    try {\r\n      const cart = await this.cartService.getCartByClient(clientId);\r\n      this.logger.debug(`Cart items found: ${cart.length}`);\r\n      return cart;\r\n    } catch (error) {\r\n      this.logger.error(`Error getting cart: ${error.message}`);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Mettre à jour la quantité\r\n  @Put(':id/quantity')\r\n  @UseGuards(JwtGuard)\r\n  async updateQuantity(\r\n    @Param('id') id: string,\r\n    @Body() updateCartDto: UpdateCartDto\r\n  ) {\r\n    return this.cartService.updateQuantity(\r\n      parseInt(id, 10),\r\n      updateCartDto.quantity\r\n    );\r\n  }\r\n\r\n  // Supprimer du panier\r\n  @Delete(':id')\r\n  @UseGuards(JwtGuard)\r\n  async removeFromCart(@Param('id') id: number) {\r\n    return this.cartService.removeFromCart(id);\r\n  }\r\n\r\n  // Vider le panier\r\n  @Delete('clear/:clientId')\r\n  async clearCart(@Param('clientId') clientId: number) {\r\n    return this.cartService.clearCart(clientId);\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Cart/cart.controller.ts b/api/src/model/Cart/cart.controller.ts
--- a/api/src/model/Cart/cart.controller.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Cart/cart.controller.ts	(date 1736262015380)
@@ -1,5 +1,16 @@
 // src/model/Cart/cart.controller.ts
-import { Controller, Post, Body, UseGuards, Req, Get, Put, Delete, Param, Logger } from '@nestjs/common';
+import {
+  Controller,
+  Post,
+  Body,
+  UseGuards,
+  Req,
+  Get,
+  Put,
+  Delete,
+  Param,
+  Logger,
+} from '@nestjs/common';
 import { CartService } from './cart.service';
 import { UpdateCartDto } from './dto/update-cart.dto';
 import { CreateCartDto } from './dto/create-cart.dto';
@@ -51,11 +62,11 @@
   @UseGuards(JwtGuard)
   async updateQuantity(
     @Param('id') id: string,
-    @Body() updateCartDto: UpdateCartDto
+    @Body() updateCartDto: UpdateCartDto,
   ) {
     return this.cartService.updateQuantity(
       parseInt(id, 10),
-      updateCartDto.quantity
+      updateCartDto.quantity,
     );
   }
 
@@ -71,4 +82,4 @@
   async clearCart(@Param('clientId') clientId: number) {
     return this.cartService.clearCart(clientId);
   }
-}
\ No newline at end of file
+}
Index: api/src/model/Cart/cart.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { BadRequestException, Injectable, Logger, NotFoundException } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { Cart } from './cart.entity';\r\nimport { Client } from '../Client/client.entity';\r\nimport { Product } from '../Product/product.entity';\r\nimport { CreateCartDto } from './dto/create-cart.dto';\r\n\r\n@Injectable()\r\nexport class CartService {\r\n  private readonly logger = new Logger(CartService.name); // Logger pour suivre les événements\r\n\r\n  constructor(\r\n    @InjectRepository(Cart)\r\n    private readonly cartRepository: Repository<Cart>, // Repository pour gérer les entités Cart\r\n    @InjectRepository(Product)\r\n    private readonly productRepository: Repository<Product>, // Repository pour gérer les entités Product\r\n    @InjectRepository(Client)\r\n    private readonly clientRepository: Repository<Client> // Repository pour gérer les entités Client\r\n  ) {}\r\n\r\n  /**\r\n   * Récupérer le panier d'un client\r\n   * @param clientId - ID du client\r\n   * @returns Liste des articles du panier\r\n   */\r\n  async getCartByClient(clientId: number): Promise<Cart[]> {\r\n    this.logger.debug(`Getting cart for client ${clientId}`);\r\n\r\n    // Récupère le panier avec les relations associées (produits et promotions)\r\n    const cart = await this.cartRepository\r\n      .createQueryBuilder('cart')\r\n      .leftJoinAndSelect('cart.product', 'product')\r\n      .leftJoinAndSelect('product.promotion', 'promotion')\r\n      .where('cart.clientId = :clientId', { clientId })\r\n      .orderBy('cart.created_at', 'DESC')\r\n      .getMany();\r\n\r\n    // Applique les promotions si elles sont actives\r\n    const cartWithPromotions = cart.map(item => {\r\n      const hasPromotion = item.product.promotion &&\r\n        this.isPromotionActive(item.product.promotion);\r\n\r\n      if (hasPromotion) {\r\n        item.appliedPromotionId = item.product.promotion.id_promotion;\r\n      }\r\n\r\n      return item;\r\n    });\r\n\r\n    this.logger.debug(`Cart items found: ${JSON.stringify(cartWithPromotions)}`);\r\n    return cartWithPromotions;\r\n  }\r\n\r\n  /**\r\n   * Ajouter un produit au panier\r\n   * @param clientId - ID du client\r\n   * @param dto - Détails du produit à ajouter (DTO)\r\n   * @returns L'article ajouté au panier\r\n   */\r\n  async addToCart(clientId: number, dto: CreateCartDto): Promise<Cart> {\r\n    this.logger.debug(`Adding to cart - clientId: ${clientId}, dto: ${JSON.stringify(dto)}`);\r\n\r\n    // Vérifie que le produit existe\r\n    const product = await this.productRepository.findOne({\r\n      where: { id_product: dto.productId },\r\n      relations: ['promotion'] // Inclut les promotions liées\r\n    });\r\n\r\n    if (!product) {\r\n      throw new NotFoundException('Product not found');\r\n    }\r\n\r\n    // Calcule le prix final avec la promotion si applicable\r\n    let finalPrice = product.price;\r\n    let appliedPromotionId = null;\r\n\r\n    if (product.promotion && this.isPromotionActive(product.promotion)) {\r\n      finalPrice = product.price * (1 - product.promotion.discountPercentage / 100);\r\n      appliedPromotionId = product.promotion.id_promotion;\r\n    }\r\n\r\n    // Crée un nouvel article dans le panier\r\n    const cartItem = this.cartRepository.create({\r\n      clientId,\r\n      product,\r\n      quantity: dto.quantity,\r\n      price: finalPrice,\r\n      appliedPromotionId\r\n    });\r\n\r\n    const savedItem = await this.cartRepository.save(cartItem);\r\n    this.logger.debug(`Saved cart item: ${JSON.stringify(savedItem)}`);\r\n    return savedItem;\r\n  }\r\n\r\n  /**\r\n   * Mettre à jour la quantité d'un article\r\n   * @param cartItemId - ID de l'article du panier\r\n   * @param quantity - Nouvelle quantité\r\n   * @returns L'article mis à jour\r\n   */\r\n  async updateQuantity(cartItemId: number, quantity: number): Promise<Cart> {\r\n    // Vérifie si l'article existe\r\n    const cartItem = await this.cartRepository.findOne({\r\n      where: { id: cartItemId },\r\n      relations: ['product']\r\n    });\r\n\r\n    if (!cartItem) {\r\n      throw new NotFoundException('Cart item not found');\r\n    }\r\n\r\n    // Vérifie la validité de la quantité\r\n    if (quantity <= 0) {\r\n      throw new BadRequestException('Quantity must be greater than 0');\r\n    }\r\n\r\n    if (quantity > cartItem.product.stock) {\r\n      throw new BadRequestException('Requested quantity exceeds available stock');\r\n    }\r\n\r\n    cartItem.quantity = quantity;\r\n    return this.cartRepository.save(cartItem); // Sauvegarde l'article mis à jour\r\n  }\r\n\r\n  /**\r\n   * Supprimer un article du panier\r\n   * @param cartItemId - ID de l'article à supprimer\r\n   */\r\n  async removeFromCart(cartItemId: number): Promise<void> {\r\n    const result = await this.cartRepository.delete(cartItemId);\r\n    if (result.affected === 0) {\r\n      throw new NotFoundException('Cart item not found');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Vider le panier d'un client\r\n   * @param clientId - ID du client\r\n   */\r\n  async clearCart(clientId: number): Promise<void> {\r\n    const client = await this.clientRepository.findOne({\r\n      where: { clientId }\r\n    });\r\n\r\n    if (!client) {\r\n      throw new NotFoundException('Client not found');\r\n    }\r\n\r\n    await this.cartRepository.delete({ clientId }); // Supprime tous les articles du panier\r\n  }\r\n\r\n  /**\r\n   * Vérifie si une promotion est active\r\n   * @param promotion - Détails de la promotion\r\n   * @returns True si la promotion est active, sinon False\r\n   */\r\n  private isPromotionActive(promotion: any): boolean {\r\n    if (!promotion) return false;\r\n    const now = new Date();\r\n    const startDate = new Date(promotion.startDate);\r\n    const endDate = new Date(promotion.endDate);\r\n    return now >= startDate && now <= endDate;\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Cart/cart.service.ts b/api/src/model/Cart/cart.service.ts
--- a/api/src/model/Cart/cart.service.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Cart/cart.service.ts	(date 1736262015380)
@@ -1,4 +1,9 @@
-import { BadRequestException, Injectable, Logger, NotFoundException } from '@nestjs/common';
+import {
+  BadRequestException,
+  Injectable,
+  Logger,
+  NotFoundException,
+} from '@nestjs/common';
 import { InjectRepository } from '@nestjs/typeorm';
 import { Repository } from 'typeorm';
 import { Cart } from './cart.entity';
@@ -16,7 +21,7 @@
     @InjectRepository(Product)
     private readonly productRepository: Repository<Product>, // Repository pour gérer les entités Product
     @InjectRepository(Client)
-    private readonly clientRepository: Repository<Client> // Repository pour gérer les entités Client
+    private readonly clientRepository: Repository<Client>, // Repository pour gérer les entités Client
   ) {}
 
   /**
@@ -37,8 +42,9 @@
       .getMany();
 
     // Applique les promotions si elles sont actives
-    const cartWithPromotions = cart.map(item => {
-      const hasPromotion = item.product.promotion &&
+    const cartWithPromotions = cart.map((item) => {
+      const hasPromotion =
+        item.product.promotion &&
         this.isPromotionActive(item.product.promotion);
 
       if (hasPromotion) {
@@ -48,7 +54,9 @@
       return item;
     });
 
-    this.logger.debug(`Cart items found: ${JSON.stringify(cartWithPromotions)}`);
+    this.logger.debug(
+      `Cart items found: ${JSON.stringify(cartWithPromotions)}`,
+    );
     return cartWithPromotions;
   }
 
@@ -59,12 +67,14 @@
    * @returns L'article ajouté au panier
    */
   async addToCart(clientId: number, dto: CreateCartDto): Promise<Cart> {
-    this.logger.debug(`Adding to cart - clientId: ${clientId}, dto: ${JSON.stringify(dto)}`);
+    this.logger.debug(
+      `Adding to cart - clientId: ${clientId}, dto: ${JSON.stringify(dto)}`,
+    );
 
     // Vérifie que le produit existe
     const product = await this.productRepository.findOne({
       where: { id_product: dto.productId },
-      relations: ['promotion'] // Inclut les promotions liées
+      relations: ['promotion'], // Inclut les promotions liées
     });
 
     if (!product) {
@@ -76,7 +86,8 @@
     let appliedPromotionId = null;
 
     if (product.promotion && this.isPromotionActive(product.promotion)) {
-      finalPrice = product.price * (1 - product.promotion.discountPercentage / 100);
+      finalPrice =
+        product.price * (1 - product.promotion.discountPercentage / 100);
       appliedPromotionId = product.promotion.id_promotion;
     }
 
@@ -86,7 +97,7 @@
       product,
       quantity: dto.quantity,
       price: finalPrice,
-      appliedPromotionId
+      appliedPromotionId,
     });
 
     const savedItem = await this.cartRepository.save(cartItem);
@@ -104,7 +115,7 @@
     // Vérifie si l'article existe
     const cartItem = await this.cartRepository.findOne({
       where: { id: cartItemId },
-      relations: ['product']
+      relations: ['product'],
     });
 
     if (!cartItem) {
@@ -117,7 +128,9 @@
     }
 
     if (quantity > cartItem.product.stock) {
-      throw new BadRequestException('Requested quantity exceeds available stock');
+      throw new BadRequestException(
+        'Requested quantity exceeds available stock',
+      );
     }
 
     cartItem.quantity = quantity;
@@ -141,7 +154,7 @@
    */
   async clearCart(clientId: number): Promise<void> {
     const client = await this.clientRepository.findOne({
-      where: { clientId }
+      where: { clientId },
     });
 
     if (!client) {
Index: api/src/model/Cart/dto/create-cart.dto.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { IsNotEmpty, IsNumber, Min } from 'class-validator';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class CreateCartDto {\r\n  @ApiProperty()\r\n  @IsNumber()\r\n  @IsNotEmpty()\r\n  clientId: number;\r\n\r\n  @ApiProperty()\r\n  @IsNumber()\r\n  @IsNotEmpty()\r\n  productId: number;\r\n\r\n  @ApiProperty()\r\n  @IsNumber()\r\n  @Min(1)\r\n  quantity: number;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Cart/dto/create-cart.dto.ts b/api/src/model/Cart/dto/create-cart.dto.ts
--- a/api/src/model/Cart/dto/create-cart.dto.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Cart/dto/create-cart.dto.ts	(date 1736262015380)
@@ -16,4 +16,4 @@
   @IsNumber()
   @Min(1)
   quantity: number;
-}
\ No newline at end of file
+}
Index: api/src/model/Cart/cart.entity.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Entity, Column, PrimaryGeneratedColumn, ManyToOne, JoinColumn } from 'typeorm';\r\nimport { Product } from '../Product/product.entity';\r\nimport { Client } from '../Client/client.entity';\r\n\r\n@Entity('cart')\r\nexport class Cart {\r\n  @PrimaryGeneratedColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  clientId: number;\r\n\r\n  @ManyToOne(() => Client, client => client.carts)\r\n  @JoinColumn({ name: 'clientId' })\r\n  client: Client;\r\n\r\n  @ManyToOne(() => Product, { eager: true })\r\n  @JoinColumn({ name: 'productId' })\r\n  product: Product;\r\n\r\n  @Column('decimal', { precision: 10, scale: 2 })\r\n  price: number;\r\n\r\n  @Column()\r\n  quantity: number;\r\n\r\n  @Column({ nullable: true })\r\n  appliedPromotionId: number;\r\n\r\n  @Column('timestamp', { default: () => 'CURRENT_TIMESTAMP' })\r\n  created_at: Date;\r\n\r\n  @Column('timestamp', { default: () => 'CURRENT_TIMESTAMP', onUpdate: 'CURRENT_TIMESTAMP' })\r\n  updated_at: Date;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Cart/cart.entity.ts b/api/src/model/Cart/cart.entity.ts
--- a/api/src/model/Cart/cart.entity.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Cart/cart.entity.ts	(date 1736262015380)
@@ -1,4 +1,10 @@
-import { Entity, Column, PrimaryGeneratedColumn, ManyToOne, JoinColumn } from 'typeorm';
+import {
+  Entity,
+  Column,
+  PrimaryGeneratedColumn,
+  ManyToOne,
+  JoinColumn,
+} from 'typeorm';
 import { Product } from '../Product/product.entity';
 import { Client } from '../Client/client.entity';
 
@@ -10,7 +16,7 @@
   @Column()
   clientId: number;
 
-  @ManyToOne(() => Client, client => client.carts)
+  @ManyToOne(() => Client, (client) => client.carts)
   @JoinColumn({ name: 'clientId' })
   client: Client;
 
@@ -30,6 +36,9 @@
   @Column('timestamp', { default: () => 'CURRENT_TIMESTAMP' })
   created_at: Date;
 
-  @Column('timestamp', { default: () => 'CURRENT_TIMESTAMP', onUpdate: 'CURRENT_TIMESTAMP' })
+  @Column('timestamp', {
+    default: () => 'CURRENT_TIMESTAMP',
+    onUpdate: 'CURRENT_TIMESTAMP',
+  })
   updated_at: Date;
-}
\ No newline at end of file
+}
Index: api/src/model/Type/type.controller.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/controllers/type.controller.ts\r\nimport { Controller, Get, Post, Body, Param, Put, Delete, ParseIntPipe, HttpStatus, BadRequestException } from '@nestjs/common';\r\nimport { TypeService } from './type.service';\r\nimport { CreateTypeDto } from './dto/create-type.dto';\r\nimport { UpdateTypeDto } from './dto/update-type.dto';\r\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\r\n\r\n@ApiTags('types')\r\n@ApiBearerAuth('access-token') // Indique que ce contrôleur nécessite un token d'accès\r\n@Controller('types')\r\nexport class TypeController {\r\n  constructor(private readonly typeService: TypeService) {}\r\n\r\n  @Post()\r\n  create(@Body() createTypeDto: CreateTypeDto) {\r\n    return this.typeService.create(createTypeDto);\r\n  }\r\n\r\n  @Get()\r\n  findAll() {\r\n    return this.typeService.findAll();\r\n  }\r\n\r\n  @Get(':id')\r\n  findOne(@Param('id') id: string) {\r\n    return this.typeService.findOne(+id);\r\n  }\r\n\r\n  @Put(':id')\r\n  update(@Param('id') id: string, @Body() updateTypeDto: UpdateTypeDto) {\r\n    return this.typeService.update(+id, updateTypeDto);\r\n  }\r\n\r\n// Dans le backend (NestJS)\r\n  @Delete(':id')\r\n  async remove(@Param('id', new ParseIntPipe({\r\n    errorHttpStatusCode: HttpStatus.BAD_REQUEST,\r\n    exceptionFactory: () => new BadRequestException('ID invalide')\r\n  })) id: number) {\r\n    return this.typeService.remove(id);\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Type/type.controller.ts b/api/src/model/Type/type.controller.ts
--- a/api/src/model/Type/type.controller.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Type/type.controller.ts	(date 1736262015382)
@@ -1,5 +1,16 @@
 // src/controllers/type.controller.ts
-import { Controller, Get, Post, Body, Param, Put, Delete, ParseIntPipe, HttpStatus, BadRequestException } from '@nestjs/common';
+import {
+  Controller,
+  Get,
+  Post,
+  Body,
+  Param,
+  Put,
+  Delete,
+  ParseIntPipe,
+  HttpStatus,
+  BadRequestException,
+} from '@nestjs/common';
 import { TypeService } from './type.service';
 import { CreateTypeDto } from './dto/create-type.dto';
 import { UpdateTypeDto } from './dto/update-type.dto';
@@ -31,12 +42,18 @@
     return this.typeService.update(+id, updateTypeDto);
   }
 
-// Dans le backend (NestJS)
+  // Dans le backend (NestJS)
   @Delete(':id')
-  async remove(@Param('id', new ParseIntPipe({
-    errorHttpStatusCode: HttpStatus.BAD_REQUEST,
-    exceptionFactory: () => new BadRequestException('ID invalide')
-  })) id: number) {
+  async remove(
+    @Param(
+      'id',
+      new ParseIntPipe({
+        errorHttpStatusCode: HttpStatus.BAD_REQUEST,
+        exceptionFactory: () => new BadRequestException('ID invalide'),
+      }),
+    )
+    id: number,
+  ) {
     return this.typeService.remove(id);
   }
 }
Index: api/src/model/Cart/dto/update-cart.dto.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/dto/update-cart.dto.ts\r\nimport { ApiProperty } from '@nestjs/swagger';\r\nimport { IsNotEmpty, IsPositive, IsOptional, IsInt, Min, IsNumber } from 'class-validator';\r\n\r\nexport class UpdateCartDto {\r\n  @IsNotEmpty()\r\n  @IsNumber()\r\n  @Min(1)\r\n  @ApiProperty({ description: \"La nouvelle quantité\" })\r\n  quantity: number;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Cart/dto/update-cart.dto.ts b/api/src/model/Cart/dto/update-cart.dto.ts
--- a/api/src/model/Cart/dto/update-cart.dto.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Cart/dto/update-cart.dto.ts	(date 1736262015380)
@@ -1,11 +1,18 @@
 // src/dto/update-cart.dto.ts
 import { ApiProperty } from '@nestjs/swagger';
-import { IsNotEmpty, IsPositive, IsOptional, IsInt, Min, IsNumber } from 'class-validator';
+import {
+  IsNotEmpty,
+  IsPositive,
+  IsOptional,
+  IsInt,
+  Min,
+  IsNumber,
+} from 'class-validator';
 
 export class UpdateCartDto {
   @IsNotEmpty()
   @IsNumber()
   @Min(1)
-  @ApiProperty({ description: "La nouvelle quantité" })
+  @ApiProperty({ description: 'La nouvelle quantité' })
   quantity: number;
 }
Index: api/src/model/Type/type.module.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/modules/type.module.ts\r\nimport { Module } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { TypeService } from './type.service';\r\nimport { TypeController } from './type.controller';\r\nimport { Type } from './type.entity';\r\n\r\n@Module({\r\n  imports: [TypeOrmModule.forFeature([Type])],\r\n  providers: [TypeService],\r\n  controllers: [TypeController],\r\n  exports: [TypeOrmModule.forFeature([Type])], // Export the TypeRepository\r\n\r\n})\r\nexport class TypeModule {}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Type/type.module.ts b/api/src/model/Type/type.module.ts
--- a/api/src/model/Type/type.module.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Type/type.module.ts	(date 1736262015382)
@@ -10,6 +10,5 @@
   providers: [TypeService],
   controllers: [TypeController],
   exports: [TypeOrmModule.forFeature([Type])], // Export the TypeRepository
-
 })
 export class TypeModule {}
Index: api/src/model/Type/type.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/services/type.service.ts\r\nimport { Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { Type } from './type.entity';\r\nimport { CreateTypeDto } from './dto/create-type.dto';\r\nimport { UpdateTypeDto } from './dto/update-type.dto';\r\n\r\n\r\n@Injectable()\r\nexport class TypeService {\r\n  constructor(\r\n    @InjectRepository(Type)\r\n    private readonly typeRepository: Repository<Type>,\r\n  ) {}\r\n\r\n  async create(createTypeDto: CreateTypeDto): Promise<Type> {\r\n    const type = this.typeRepository.create(createTypeDto);\r\n    return this.typeRepository.save(type);\r\n  }\r\n\r\n  async findAll(): Promise<Type[]> {\r\n    return this.typeRepository.find({ relations: ['products'] });\r\n  }\r\n\r\n  async findOne(id: number): Promise<Type> {\r\n    const type = await this.typeRepository.findOne({\r\n      where: { id_type: id },\r\n      relations: ['products'],\r\n    });\r\n    if (!type) {\r\n      throw new NotFoundException(`Type with ID ${id} not found`);\r\n    }\r\n    return type;\r\n  }\r\n\r\n  async update(id: number, updateTypeDto: UpdateTypeDto): Promise<Type> {\r\n    const type = await this.findOne(id);\r\n    Object.assign(type, updateTypeDto);\r\n    return this.typeRepository.save(type);\r\n  }\r\n\r\n  async remove(id: number): Promise<void> {\r\n    const type = await this.findOne(id);\r\n    await this.typeRepository.remove(type);\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Type/type.service.ts b/api/src/model/Type/type.service.ts
--- a/api/src/model/Type/type.service.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Type/type.service.ts	(date 1736262015382)
@@ -6,7 +6,6 @@
 import { CreateTypeDto } from './dto/create-type.dto';
 import { UpdateTypeDto } from './dto/update-type.dto';
 
-
 @Injectable()
 export class TypeService {
   constructor(
Index: api/src/model/User/user.module.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/User/user.module.ts\r\nimport { Module, forwardRef } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { User } from './user.entity';\r\n\r\nimport { ClientController } from '../Client/client.controller';\r\nimport { UserController } from './user.controller';\r\nimport { AdministratorModule } from 'model/Administrator/administrator.module';\r\nimport { SecurityModule } from '@feature/security';\r\nimport { ClientService } from '../Client/client.service';\r\nimport { ClientModule } from 'model/Client/client.module';\r\nimport { UserService } from './user.service';\r\n\r\n@Module({\r\n  imports: [TypeOrmModule.forFeature([User]),forwardRef(() => AdministratorModule),SecurityModule, ClientModule,],\r\n  controllers: [UserController],\r\n  providers: [UserService],\r\n  exports: [UserService, TypeOrmModule,], // Assurez-vous d'exporter TypeOrmModule\r\n})\r\nexport class UserModule {}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/User/user.module.ts b/api/src/model/User/user.module.ts
--- a/api/src/model/User/user.module.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/User/user.module.ts	(date 1736262015382)
@@ -12,9 +12,14 @@
 import { UserService } from './user.service';
 
 @Module({
-  imports: [TypeOrmModule.forFeature([User]),forwardRef(() => AdministratorModule),SecurityModule, ClientModule,],
+  imports: [
+    TypeOrmModule.forFeature([User]),
+    forwardRef(() => AdministratorModule),
+    SecurityModule,
+    ClientModule,
+  ],
   controllers: [UserController],
   providers: [UserService],
-  exports: [UserService, TypeOrmModule,], // Assurez-vous d'exporter TypeOrmModule
+  exports: [UserService, TypeOrmModule], // Assurez-vous d'exporter TypeOrmModule
 })
 export class UserModule {}
Index: api/src/model/User/dto/createUser.dto.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/dto/create-user.dto.ts\r\nimport { ApiProperty} from '@nestjs/swagger';\r\nimport { IsNotEmpty, IsString, IsEmail, IsNumber, IsOptional } from 'class-validator';\r\nimport { Column } from 'typeorm';\r\n\r\nexport class CreateUserDto {\r\n  @ApiProperty()\r\n  @IsNotEmpty()\r\n\r\n  firstName: string;\r\n  @ApiProperty()\r\n  lastName: string;\r\n  @ApiProperty()\r\n  email: string;\r\n  @ApiProperty()\r\n  password: string;// Le mot de passe normal, il sera haché dans le service\r\n  @Column({ default: false }) // par défaut, l'utilisateur n'est pas admin\r\n  @ApiProperty()\r\n  isAdmin: boolean;\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/User/dto/createUser.dto.ts b/api/src/model/User/dto/createUser.dto.ts
--- a/api/src/model/User/dto/createUser.dto.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/User/dto/createUser.dto.ts	(date 1736262015382)
@@ -1,21 +1,25 @@
 // src/dto/create-user.dto.ts
-import { ApiProperty} from '@nestjs/swagger';
-import { IsNotEmpty, IsString, IsEmail, IsNumber, IsOptional } from 'class-validator';
+import { ApiProperty } from '@nestjs/swagger';
+import {
+  IsNotEmpty,
+  IsString,
+  IsEmail,
+  IsNumber,
+  IsOptional,
+} from 'class-validator';
 import { Column } from 'typeorm';
 
 export class CreateUserDto {
   @ApiProperty()
   @IsNotEmpty()
-
   firstName: string;
   @ApiProperty()
   lastName: string;
   @ApiProperty()
   email: string;
   @ApiProperty()
-  password: string;// Le mot de passe normal, il sera haché dans le service
+  password: string; // Le mot de passe normal, il sera haché dans le service
   @Column({ default: false }) // par défaut, l'utilisateur n'est pas admin
   @ApiProperty()
   isAdmin: boolean;
 }
-
Index: api/src/model/Order/order.entity.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/Order/order.entity.ts\r\nimport { Entity, PrimaryGeneratedColumn, Column, ManyToOne, OneToMany, JoinColumn } from 'typeorm';\r\nimport { Client } from '../Client/client.entity';\r\nimport { OrderStatusEntity } from '../OrderStatus/orderStatus.entity';\r\nimport { Invoice } from '../Invoice/invoice.entity';\r\nimport { OrderDetail } from './OrderDetail/order-detail.entity';\r\nimport { Payment } from '../Payment/payment.entity';\r\n\r\n@Entity('orders')\r\nexport class Order {\r\n  @PrimaryGeneratedColumn()\r\n  id_order: number;\r\n\r\n  @Column({ name: 'id_client' })\r\n  id_client: number;\r\n\r\n  @Column({ name: 'id_statut' })\r\n  id_statut: number;\r\n\r\n  @Column({ type: 'timestamp' })\r\n  date_order: Date;\r\n\r\n  @Column('decimal', { precision: 10, scale: 2 })\r\n  montant_total: number;\r\n\r\n  @ManyToOne(() => Client)\r\n  @JoinColumn({ name: 'id_client' })\r\n  client: Client;\r\n\r\n  @ManyToOne(() => OrderStatusEntity)\r\n  @JoinColumn({ name: 'id_statut' })\r\n  status: OrderStatusEntity;\r\n\r\n  @OneToMany(() => OrderDetail, (orderDetail) => orderDetail.order)\r\n  orderDetails: OrderDetail[];\r\n\r\n  @OneToMany(() => Invoice, (invoice) => invoice.order)\r\n  invoices: Invoice[];\r\n\r\n  @OneToMany(() => Payment, (payment) => payment.order)\r\n  payments: Payment[];\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Order/order.entity.ts b/api/src/model/Order/order.entity.ts
--- a/api/src/model/Order/order.entity.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Order/order.entity.ts	(date 1736262015380)
@@ -1,5 +1,12 @@
 // src/model/Order/order.entity.ts
-import { Entity, PrimaryGeneratedColumn, Column, ManyToOne, OneToMany, JoinColumn } from 'typeorm';
+import {
+  Entity,
+  PrimaryGeneratedColumn,
+  Column,
+  ManyToOne,
+  OneToMany,
+  JoinColumn,
+} from 'typeorm';
 import { Client } from '../Client/client.entity';
 import { OrderStatusEntity } from '../OrderStatus/orderStatus.entity';
 import { Invoice } from '../Invoice/invoice.entity';
Index: api/src/model/User/user.controller.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Controller, Get, Post, Body, Param, Put, Delete, UseGuards } from '@nestjs/common';\r\n\r\nimport { User } from './user.entity';\r\n\r\nimport { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';\r\nimport { CreateUserDto } from './dto/createUser.dto';\r\nimport { UpdateUserDto } from './dto/updateUser.dto';\r\n\r\nimport { JwtGuard } from '@feature/security';\r\nimport { UserService } from './user.service';\r\n@UseGuards(JwtGuard) // Protège cette route avec JWT\r\n@ApiTags('user')\r\n@ApiBearerAuth('access-token') // Indique que ce contrôleur nécessite un token d'accès\r\n@Controller('user')\r\n\r\nexport class UserController {\r\n  constructor(private readonly userService: UserService) {}\r\n\r\n  @Post()\r\n  async create(@Body() createUserDto: CreateUserDto): Promise<User> {\r\n    return this.userService.create(createUserDto);\r\n  }\r\n\r\n  @Get()\r\n  @ApiResponse({ status: 200, description: 'List of all users.', type: [User] })\r\n  async findAll(): Promise<User[]> {\r\n    return this.userService.findAll();\r\n  }\r\n\r\n  @Get(':id')\r\n  @ApiResponse({ status: 200, description: 'User found.', type: User })\r\n  @ApiResponse({ status: 404, description: 'User not found.' })\r\n  async findOne(@Param('id') id: string): Promise<User> {\r\n    return this.userService.findOne(+id);\r\n  }\r\n\r\n  @Put(':id')\r\n  @ApiResponse({ status: 200, description: 'The user has been successfully updated.', type: User })\r\n  @ApiResponse({ status: 404, description: 'User not found.' })\r\n  async update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto): Promise<User> {\r\n    return this.userService.update(+id, updateUserDto);\r\n  }\r\n\r\n  @Delete(':id')\r\n  @ApiResponse({ status: 204, description: 'The user has been successfully deleted.' })\r\n  @ApiResponse({ status: 404, description: 'User not found.' })\r\n  async remove(@Param('id') id: string): Promise<void> {\r\n    return this.userService.remove(+id);\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/User/user.controller.ts b/api/src/model/User/user.controller.ts
--- a/api/src/model/User/user.controller.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/User/user.controller.ts	(date 1736262015382)
@@ -1,4 +1,13 @@
-import { Controller, Get, Post, Body, Param, Put, Delete, UseGuards } from '@nestjs/common';
+import {
+  Controller,
+  Get,
+  Post,
+  Body,
+  Param,
+  Put,
+  Delete,
+  UseGuards,
+} from '@nestjs/common';
 
 import { User } from './user.entity';
 
@@ -12,7 +21,6 @@
 @ApiTags('user')
 @ApiBearerAuth('access-token') // Indique que ce contrôleur nécessite un token d'accès
 @Controller('user')
-
 export class UserController {
   constructor(private readonly userService: UserService) {}
 
@@ -35,14 +43,24 @@
   }
 
   @Put(':id')
-  @ApiResponse({ status: 200, description: 'The user has been successfully updated.', type: User })
+  @ApiResponse({
+    status: 200,
+    description: 'The user has been successfully updated.',
+    type: User,
+  })
   @ApiResponse({ status: 404, description: 'User not found.' })
-  async update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto): Promise<User> {
+  async update(
+    @Param('id') id: string,
+    @Body() updateUserDto: UpdateUserDto,
+  ): Promise<User> {
     return this.userService.update(+id, updateUserDto);
   }
 
   @Delete(':id')
-  @ApiResponse({ status: 204, description: 'The user has been successfully deleted.' })
+  @ApiResponse({
+    status: 204,
+    description: 'The user has been successfully deleted.',
+  })
   @ApiResponse({ status: 404, description: 'User not found.' })
   async remove(@Param('id') id: string): Promise<void> {
     return this.userService.remove(+id);
Index: api/src/model/Order/order.module.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/Order/order.module.ts\r\nimport { Module } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { OrderService } from './order.service';\r\nimport { OrderController } from './order.controller';\r\nimport { Order } from './order.entity';\r\nimport { Client } from '../Client/client.entity'; // Importer l'entité Client\r\nimport { OrderDetail } from './OrderDetail/order-detail.entity';\r\nimport { Product } from 'model/Product/product.entity';\r\nimport { Cart } from 'model/Cart/cart.entity';\r\nimport { ProductPromotion } from 'model/ProductPromotion/productPromotion.entity';\r\nimport { OrderStatus } from 'model/OrderStatus/dto/order-status.enum';\r\nimport { OrderStatusEntity } from 'model/OrderStatus/orderStatus.entity';\r\n\r\n@Module({\r\n  imports: [\r\n    TypeOrmModule.forFeature([\r\n      Order,\r\n      OrderDetail,\r\n      Client,\r\n      OrderStatusEntity,\r\n      Product,\r\n      Cart,\r\n      ProductPromotion\r\n    ]),\r\n  ],\r\n  controllers: [OrderController],\r\n  providers: [OrderService],\r\n  exports: [OrderService]\r\n})\r\nexport class OrderModule {}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Order/order.module.ts b/api/src/model/Order/order.module.ts
--- a/api/src/model/Order/order.module.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Order/order.module.ts	(date 1736262015380)
@@ -21,11 +21,11 @@
       OrderStatusEntity,
       Product,
       Cart,
-      ProductPromotion
+      ProductPromotion,
     ]),
   ],
   controllers: [OrderController],
   providers: [OrderService],
-  exports: [OrderService]
+  exports: [OrderService],
 })
 export class OrderModule {}
Index: api/src/model/Order/order.controller.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {\r\n  Controller,\r\n  Get,\r\n  Post,\r\n  Put,\r\n  Delete,\r\n  Body,\r\n  Param,\r\n  UseGuards,\r\n  BadRequestException,\r\n  HttpStatus,\r\n  Logger\r\n} from '@nestjs/common';\r\nimport { OrderService } from './order.service';\r\nimport { ApiBearerAuth, ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';\r\nimport { User } from '@common/decorators';\r\nimport { Order } from './order.entity';\r\nimport { JwtAuthGuard } from '@feature/security/guard/jwt-auth.guard';\r\nimport { UpdateOrderDto } from './dto/update-order-.dto';\r\nimport { CreateOrderDto } from './dto/create-order.dto';\r\n\r\n\r\n@ApiTags('orders')\r\n@ApiBearerAuth('access-token')\r\n@Controller('orders')\r\n@UseGuards(JwtAuthGuard)\r\nexport class OrderController {\r\n\r\n  private readonly logger = new Logger(OrderController.name);\r\n  constructor(private readonly orderService: OrderService) {}\r\n\r\n  // IMPORTANT: Route admin doit être AVANT les routes avec paramètres\r\n  @Get('admin/all')\r\n  @ApiOperation({ summary: \"Récupérer toutes les commandes (Admin uniquement)\" })\r\n  @ApiResponse({ status: HttpStatus.OK, description: 'Liste des commandes récupérée avec succès', type: [Order] })\r\n  @ApiOperation({ summary: \"Récupérer toutes les commandes (Admin uniquement)\" })\r\n  @ApiResponse({ status: HttpStatus.OK, description: 'Liste des commandes récupérée avec succès', type: [Order] })\r\n  async findAllOrders(@User('isAdmin') isAdmin: boolean) {\r\n    this.logger.debug('Tentative de récupération de toutes les commandes');\r\n\r\n    if (!isAdmin) {\r\n      this.logger.warn('Tentative d\\'accès non autorisé à la liste des commandes');\r\n      throw new BadRequestException('Accès réservé aux administrateurs');\r\n    }\r\n\r\n    try {\r\n      const orders = await this.orderService.findAllOrders(); // Utiliser findAllOrders au lieu de findAll\r\n      this.logger.debug(`${orders.length} commandes récupérées`);\r\n      return orders;\r\n    } catch (error) {\r\n      this.logger.error('Erreur lors de la récupération des commandes:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Créer une commande\r\n  @Post()\r\n  @ApiOperation({ summary: \"Créer une nouvelle commande\" })\r\n  async create(\r\n    @User('clientId') clientId: number,\r\n    @Body() createOrderDto: CreateOrderDto\r\n  ) {\r\n    // Vérifier que l'utilisateur crée une commande pour lui-même\r\n    if (createOrderDto.clientId !== clientId) {\r\n      throw new BadRequestException('Vous ne pouvez créer une commande que pour vous-même');\r\n    }\r\n    return this.orderService.createOrder(createOrderDto);\r\n  }\r\n\r\n  // Récupérer une commande spécifique\r\n  @Get(':id')\r\n  @ApiOperation({ summary: \"Récupérer une commande par son ID\" })\r\n  async findOne(\r\n    @User('clientId') clientId: number,\r\n    @User('isAdmin') isAdmin: boolean,\r\n    @Param('id') id: string\r\n  ) {\r\n    const order = await this.orderService.getOrderById(+id);\r\n\r\n    // Vérification des droits d'accès\r\n    if (!isAdmin && order.id_client !== clientId) {\r\n      throw new BadRequestException('Vous ne pouvez accéder qu\\'à vos propres commandes');\r\n    }\r\n\r\n    return order;\r\n  }\r\n\r\n  // Récupérer toutes les commandes d'un client\r\n  @Get('client/:clientId')\r\n  @ApiOperation({ summary: \"Récupérer toutes les commandes d'un client\" })\r\n  async findAllByClient(\r\n    @User('clientId') currentClientId: number,\r\n    @User('isAdmin') isAdmin: boolean,\r\n    @Param('clientId') requestedClientId: string\r\n  ) {\r\n    // Vérification des droits d'accès\r\n    if (!isAdmin && currentClientId !== +requestedClientId) {\r\n      throw new BadRequestException('Vous ne pouvez accéder qu\\'à vos propres commandes');\r\n    }\r\n\r\n    return this.orderService.findAllByClient(+requestedClientId);\r\n  }\r\n\r\n  // Mettre à jour une commande\r\n  @Put(':id')\r\n  @ApiOperation({ summary: \"Mettre à jour une commande\" })\r\n  async update(\r\n    @User('clientId') clientId: number,\r\n    @User('isAdmin') isAdmin: boolean,\r\n    @Param('id') id: string,\r\n    @Body() updateOrderDto: UpdateOrderDto\r\n  ) {\r\n    const order = await this.orderService.getOrderById(+id);\r\n\r\n    // Vérification des droits d'accès\r\n    if (!isAdmin && order.id_client !== clientId) {\r\n      throw new BadRequestException('Vous ne pouvez modifier que vos propres commandes');\r\n    }\r\n\r\n    return this.orderService.updateOrder(+id, updateOrderDto);\r\n  }\r\n\r\n  // Supprimer une commande (admin uniquement)\r\n  @Delete(':id')\r\n  @ApiOperation({ summary: \"Supprimer une commande\" })\r\n  async remove(\r\n    @User('isAdmin') isAdmin: boolean,\r\n    @Param('id') id: string\r\n  ) {\r\n    if (!isAdmin) {\r\n      throw new BadRequestException('Seul un administrateur peut supprimer une commande');\r\n    }\r\n\r\n    return this.orderService.deleteOrder(+id);\r\n  }\r\n\r\n  // Mettre à jour le statut d'une commande (admin uniquement)\r\n\r\n  // Valider le paiement d'une commande\r\n  @Post(':id/payment')\r\n  @ApiOperation({ summary: \"Valider le paiement d'une commande\" })\r\n  async validatePayment(\r\n    @User('clientId') clientId: number,\r\n    @Param('id') orderId: string,\r\n    @Body() paymentInfo: { paymentMethod: string }\r\n  ) {\r\n    return this.orderService.validatePayment(+orderId, clientId, paymentInfo);\r\n  }\r\n  @Delete('details/:detailId')\r\n  @ApiOperation({ summary: \"Supprimer un détail de commande\" })\r\n  async deleteOrderDetail(\r\n    @User('isAdmin') isAdmin: boolean,\r\n    @Param('detailId') detailId: string\r\n  ) {\r\n    if (!isAdmin) {\r\n      throw new BadRequestException('Seul un administrateur peut supprimer un détail de commande');\r\n    }\r\n    return this.orderService.deleteOrderDetail(+detailId);\r\n  }\r\n\r\n  @Put('details/:detailId')\r\n  @ApiOperation({ summary: \"Mettre à jour un détail de commande\" })\r\n  async updateOrderDetail(\r\n    @User('isAdmin') isAdmin: boolean,\r\n    @Param('detailId') detailId: string,\r\n    @Body() updateData: { quantity: number }\r\n  ) {\r\n    if (!isAdmin) {\r\n      throw new BadRequestException('Seul un administrateur peut modifier un détail de commande');\r\n    }\r\n    return this.orderService.updateOrderDetail(+detailId, updateData.quantity);\r\n  }\r\n  @Put(':id/status')\r\n  async updateStatus(\r\n    @User('isAdmin') isAdmin: boolean,\r\n    @Param('id') orderId: string,\r\n    @Body() statusInfo: { statusId: number }\r\n  ): Promise<any> {\r\n    if (!isAdmin) {\r\n      throw new BadRequestException('Seul un administrateur peut modifier le statut commande');\r\n    }\r\n\r\n    try {\r\n      const updatedOrder = await this.orderService.updateOrderStatus(\r\n        +orderId,\r\n        statusInfo.statusId\r\n      );\r\n\r\n      this.logger.debug(`Statut de la commande ${orderId} mis à jour avec succès`);\r\n      return updatedOrder;\r\n    } catch (error) {\r\n      this.logger.error(`Erreur lors de la mise à jour du statut de la commande ${orderId}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Order/order.controller.ts b/api/src/model/Order/order.controller.ts
--- a/api/src/model/Order/order.controller.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Order/order.controller.ts	(date 1736262015380)
@@ -9,37 +9,54 @@
   UseGuards,
   BadRequestException,
   HttpStatus,
-  Logger
+  Logger,
 } from '@nestjs/common';
 import { OrderService } from './order.service';
-import { ApiBearerAuth, ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';
+import {
+  ApiBearerAuth,
+  ApiTags,
+  ApiOperation,
+  ApiResponse,
+} from '@nestjs/swagger';
 import { User } from '@common/decorators';
 import { Order } from './order.entity';
 import { JwtAuthGuard } from '@feature/security/guard/jwt-auth.guard';
 import { UpdateOrderDto } from './dto/update-order-.dto';
 import { CreateOrderDto } from './dto/create-order.dto';
 
-
 @ApiTags('orders')
 @ApiBearerAuth('access-token')
 @Controller('orders')
 @UseGuards(JwtAuthGuard)
 export class OrderController {
-
   private readonly logger = new Logger(OrderController.name);
   constructor(private readonly orderService: OrderService) {}
 
   // IMPORTANT: Route admin doit être AVANT les routes avec paramètres
   @Get('admin/all')
-  @ApiOperation({ summary: "Récupérer toutes les commandes (Admin uniquement)" })
-  @ApiResponse({ status: HttpStatus.OK, description: 'Liste des commandes récupérée avec succès', type: [Order] })
-  @ApiOperation({ summary: "Récupérer toutes les commandes (Admin uniquement)" })
-  @ApiResponse({ status: HttpStatus.OK, description: 'Liste des commandes récupérée avec succès', type: [Order] })
+  @ApiOperation({
+    summary: 'Récupérer toutes les commandes (Admin uniquement)',
+  })
+  @ApiResponse({
+    status: HttpStatus.OK,
+    description: 'Liste des commandes récupérée avec succès',
+    type: [Order],
+  })
+  @ApiOperation({
+    summary: 'Récupérer toutes les commandes (Admin uniquement)',
+  })
+  @ApiResponse({
+    status: HttpStatus.OK,
+    description: 'Liste des commandes récupérée avec succès',
+    type: [Order],
+  })
   async findAllOrders(@User('isAdmin') isAdmin: boolean) {
     this.logger.debug('Tentative de récupération de toutes les commandes');
 
     if (!isAdmin) {
-      this.logger.warn('Tentative d\'accès non autorisé à la liste des commandes');
+      this.logger.warn(
+        "Tentative d'accès non autorisé à la liste des commandes",
+      );
       throw new BadRequestException('Accès réservé aux administrateurs');
     }
 
@@ -55,31 +72,35 @@
 
   // Créer une commande
   @Post()
-  @ApiOperation({ summary: "Créer une nouvelle commande" })
+  @ApiOperation({ summary: 'Créer une nouvelle commande' })
   async create(
     @User('clientId') clientId: number,
-    @Body() createOrderDto: CreateOrderDto
+    @Body() createOrderDto: CreateOrderDto,
   ) {
     // Vérifier que l'utilisateur crée une commande pour lui-même
     if (createOrderDto.clientId !== clientId) {
-      throw new BadRequestException('Vous ne pouvez créer une commande que pour vous-même');
+      throw new BadRequestException(
+        'Vous ne pouvez créer une commande que pour vous-même',
+      );
     }
     return this.orderService.createOrder(createOrderDto);
   }
 
   // Récupérer une commande spécifique
   @Get(':id')
-  @ApiOperation({ summary: "Récupérer une commande par son ID" })
+  @ApiOperation({ summary: 'Récupérer une commande par son ID' })
   async findOne(
     @User('clientId') clientId: number,
     @User('isAdmin') isAdmin: boolean,
-    @Param('id') id: string
+    @Param('id') id: string,
   ) {
     const order = await this.orderService.getOrderById(+id);
 
     // Vérification des droits d'accès
     if (!isAdmin && order.id_client !== clientId) {
-      throw new BadRequestException('Vous ne pouvez accéder qu\'à vos propres commandes');
+      throw new BadRequestException(
+        "Vous ne pouvez accéder qu'à vos propres commandes",
+      );
     }
 
     return order;
@@ -91,11 +112,13 @@
   async findAllByClient(
     @User('clientId') currentClientId: number,
     @User('isAdmin') isAdmin: boolean,
-    @Param('clientId') requestedClientId: string
+    @Param('clientId') requestedClientId: string,
   ) {
     // Vérification des droits d'accès
     if (!isAdmin && currentClientId !== +requestedClientId) {
-      throw new BadRequestException('Vous ne pouvez accéder qu\'à vos propres commandes');
+      throw new BadRequestException(
+        "Vous ne pouvez accéder qu'à vos propres commandes",
+      );
     }
 
     return this.orderService.findAllByClient(+requestedClientId);
@@ -103,18 +126,20 @@
 
   // Mettre à jour une commande
   @Put(':id')
-  @ApiOperation({ summary: "Mettre à jour une commande" })
+  @ApiOperation({ summary: 'Mettre à jour une commande' })
   async update(
     @User('clientId') clientId: number,
     @User('isAdmin') isAdmin: boolean,
     @Param('id') id: string,
-    @Body() updateOrderDto: UpdateOrderDto
+    @Body() updateOrderDto: UpdateOrderDto,
   ) {
     const order = await this.orderService.getOrderById(+id);
 
     // Vérification des droits d'accès
     if (!isAdmin && order.id_client !== clientId) {
-      throw new BadRequestException('Vous ne pouvez modifier que vos propres commandes');
+      throw new BadRequestException(
+        'Vous ne pouvez modifier que vos propres commandes',
+      );
     }
 
     return this.orderService.updateOrder(+id, updateOrderDto);
@@ -122,13 +147,12 @@
 
   // Supprimer une commande (admin uniquement)
   @Delete(':id')
-  @ApiOperation({ summary: "Supprimer une commande" })
-  async remove(
-    @User('isAdmin') isAdmin: boolean,
-    @Param('id') id: string
-  ) {
+  @ApiOperation({ summary: 'Supprimer une commande' })
+  async remove(@User('isAdmin') isAdmin: boolean, @Param('id') id: string) {
     if (!isAdmin) {
-      throw new BadRequestException('Seul un administrateur peut supprimer une commande');
+      throw new BadRequestException(
+        'Seul un administrateur peut supprimer une commande',
+      );
     }
 
     return this.orderService.deleteOrder(+id);
@@ -142,31 +166,35 @@
   async validatePayment(
     @User('clientId') clientId: number,
     @Param('id') orderId: string,
-    @Body() paymentInfo: { paymentMethod: string }
+    @Body() paymentInfo: { paymentMethod: string },
   ) {
     return this.orderService.validatePayment(+orderId, clientId, paymentInfo);
   }
   @Delete('details/:detailId')
-  @ApiOperation({ summary: "Supprimer un détail de commande" })
+  @ApiOperation({ summary: 'Supprimer un détail de commande' })
   async deleteOrderDetail(
     @User('isAdmin') isAdmin: boolean,
-    @Param('detailId') detailId: string
+    @Param('detailId') detailId: string,
   ) {
     if (!isAdmin) {
-      throw new BadRequestException('Seul un administrateur peut supprimer un détail de commande');
+      throw new BadRequestException(
+        'Seul un administrateur peut supprimer un détail de commande',
+      );
     }
     return this.orderService.deleteOrderDetail(+detailId);
   }
 
   @Put('details/:detailId')
-  @ApiOperation({ summary: "Mettre à jour un détail de commande" })
+  @ApiOperation({ summary: 'Mettre à jour un détail de commande' })
   async updateOrderDetail(
     @User('isAdmin') isAdmin: boolean,
     @Param('detailId') detailId: string,
-    @Body() updateData: { quantity: number }
+    @Body() updateData: { quantity: number },
   ) {
     if (!isAdmin) {
-      throw new BadRequestException('Seul un administrateur peut modifier un détail de commande');
+      throw new BadRequestException(
+        'Seul un administrateur peut modifier un détail de commande',
+      );
     }
     return this.orderService.updateOrderDetail(+detailId, updateData.quantity);
   }
@@ -174,23 +202,30 @@
   async updateStatus(
     @User('isAdmin') isAdmin: boolean,
     @Param('id') orderId: string,
-    @Body() statusInfo: { statusId: number }
+    @Body() statusInfo: { statusId: number },
   ): Promise<any> {
     if (!isAdmin) {
-      throw new BadRequestException('Seul un administrateur peut modifier le statut commande');
+      throw new BadRequestException(
+        'Seul un administrateur peut modifier le statut commande',
+      );
     }
 
     try {
       const updatedOrder = await this.orderService.updateOrderStatus(
         +orderId,
-        statusInfo.statusId
+        statusInfo.statusId,
       );
 
-      this.logger.debug(`Statut de la commande ${orderId} mis à jour avec succès`);
+      this.logger.debug(
+        `Statut de la commande ${orderId} mis à jour avec succès`,
+      );
       return updatedOrder;
     } catch (error) {
-      this.logger.error(`Erreur lors de la mise à jour du statut de la commande ${orderId}:`, error);
+      this.logger.error(
+        `Erreur lors de la mise à jour du statut de la commande ${orderId}:`,
+        error,
+      );
       throw error;
     }
   }
-}
\ No newline at end of file
+}
Index: api/src/model/Order/dto/update-order-.dto.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/dto/update-order.dto.ts\r\nimport { IsArray, IsDate, IsNotEmpty, IsNumber, IsOptional, ValidateNested } from 'class-validator';\r\nimport { PartialType } from '@nestjs/mapped-types';\r\nimport { CreateOrderDto } from './create-order.dto';\r\nimport { Type } from 'class-transformer';\r\nimport { OrderLineDto } from './order-line.dto';\r\n\r\nexport class UpdateOrderDto {\r\n  @IsOptional()\r\n  @IsDate()\r\n  @Type(() => Date)\r\n  date_order?: Date;\r\n\r\n  @IsOptional()\r\n  @IsNumber()\r\n  id_statut?: number;\r\n\r\n  @IsOptional()\r\n  @IsArray()\r\n  @ValidateNested({ each: true })\r\n  @Type(() => OrderLineDto)\r\n  orderLines?: OrderLineDto[];\r\n\r\n  @IsOptional()\r\n  @IsNumber()\r\n  montant_total?: number;\r\n\r\n  // Si vous avez besoin d'autres champs optionnels\r\n  @IsOptional()\r\n  @IsNumber()\r\n  clientId?: number;\r\n\r\n  @IsOptional()\r\n  paymentInfo?: any;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Order/dto/update-order-.dto.ts b/api/src/model/Order/dto/update-order-.dto.ts
--- a/api/src/model/Order/dto/update-order-.dto.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Order/dto/update-order-.dto.ts	(date 1736262015380)
@@ -1,5 +1,12 @@
 // src/dto/update-order.dto.ts
-import { IsArray, IsDate, IsNotEmpty, IsNumber, IsOptional, ValidateNested } from 'class-validator';
+import {
+  IsArray,
+  IsDate,
+  IsNotEmpty,
+  IsNumber,
+  IsOptional,
+  ValidateNested,
+} from 'class-validator';
 import { PartialType } from '@nestjs/mapped-types';
 import { CreateOrderDto } from './create-order.dto';
 import { Type } from 'class-transformer';
@@ -32,4 +39,4 @@
 
   @IsOptional()
   paymentInfo?: any;
-}
\ No newline at end of file
+}
Index: api/src/model/Order/dto/order-line.dto.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { IsNumber, IsOptional, Min } from \"class-validator\";\r\n\r\n// DTO pour chaque ligne de commande\r\nexport class OrderLineDto {\r\n  @IsNumber()\r\n  id_product: number;\r\n\r\n  @IsNumber()\r\n  @Min(1)\r\n  quantity: number;\r\n\r\n  @IsNumber()\r\n  @IsOptional()\r\n  unit_price?: number;\r\n\r\n  @IsNumber()\r\n  @IsOptional()\r\n  original_price?: number;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Order/dto/order-line.dto.ts b/api/src/model/Order/dto/order-line.dto.ts
--- a/api/src/model/Order/dto/order-line.dto.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Order/dto/order-line.dto.ts	(date 1736262015380)
@@ -1,4 +1,4 @@
-import { IsNumber, IsOptional, Min } from "class-validator";
+import { IsNumber, IsOptional, Min } from 'class-validator';
 
 // DTO pour chaque ligne de commande
 export class OrderLineDto {
@@ -16,4 +16,4 @@
   @IsNumber()
   @IsOptional()
   original_price?: number;
-}
\ No newline at end of file
+}
Index: api/src/model/Order/order.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Injectable, Logger, NotFoundException, BadRequestException } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository, DataSource } from 'typeorm';\r\nimport { Order } from './order.entity';\r\nimport { CreateOrderDto } from './dto/create-order.dto';\r\nimport { UpdateOrderDto } from './dto/update-order-.dto';\r\nimport { OrderDetail } from './OrderDetail/order-detail.entity';\r\nimport { Cart } from '../Cart/cart.entity';\r\nimport { Product } from '../Product/product.entity';\r\n  import { Client} from '../Client/client.entity';\r\n\r\n@Injectable()\r\nexport class OrderService {\r\n  private readonly logger = new Logger(OrderService.name);\r\n\r\n  constructor(\r\n    @InjectRepository(Order)\r\n    private readonly orderRepository: Repository<Order>,\r\n    @InjectRepository(OrderDetail)\r\n    private readonly orderDetailRepository: Repository<OrderDetail>,\r\n    @InjectRepository(Cart)\r\n    private readonly cartRepository: Repository<Cart>,\r\n    @InjectRepository(Product)\r\n    private readonly productRepository: Repository<Product>,\r\n    @InjectRepository(Client)  // Ajout du ClientRepository\r\n    private readonly clientRepository: Repository<Client>,\r\n    private readonly dataSource: DataSource\r\n  ) {}\r\n\r\n\r\n// Modifier aussi la méthode getOrderById pour inclure le client\r\n  async getOrderById(id: number): Promise<Order> {\r\n    const order = await this.orderRepository.findOne({\r\n      where: { id_order: id },\r\n      relations: [\r\n        'client',\r\n        'orderDetails',\r\n        'orderDetails.product'\r\n      ]\r\n    });\r\n\r\n    if (!order) {\r\n      throw new NotFoundException(`Commande ${id} non trouvée`);\r\n    }\r\n\r\n    return order;\r\n  }\r\n  // Lors de la création d'une commande, sauvegarder les deux prix\r\n  async createOrderDetail(orderDetail: Partial<OrderDetail>): Promise<OrderDetail> {\r\n    const product = await this.productRepository.findOne({\r\n      where: { id_product: orderDetail.product_id }\r\n    });\r\n\r\n    const newOrderDetail = this.orderDetailRepository.create({\r\n      ...orderDetail,\r\n      original_price: product.price,\r\n      unit_price: orderDetail.unit_price // Prix avec promotion si applicable\r\n    });\r\n\r\n    return this.orderDetailRepository.save(newOrderDetail);\r\n  }\r\n\r\n  async updateOrder(id: number, updateOrderDto: UpdateOrderDto): Promise<Order> {\r\n    const queryRunner = this.dataSource.createQueryRunner();\r\n    await queryRunner.connect();\r\n    await queryRunner.startTransaction();\r\n\r\n    try {\r\n      const order = await this.getOrderById(id);\r\n\r\n      Object.assign(order, {\r\n        date_order: updateOrderDto.date_order || order.date_order,\r\n        id_statut: updateOrderDto.id_statut || order.id_statut\r\n      });\r\n\r\n      if (updateOrderDto.orderLines?.length) {\r\n        // Restaurer les stocks\r\n        for (const detail of order.orderDetails) {\r\n          const product = await this.productRepository.findOne({\r\n            where: { id_product: detail.product.id_product }\r\n          });\r\n          if (product) {\r\n            product.stock += detail.quantity;\r\n            await queryRunner.manager.save(Product, product);\r\n          }\r\n        }\r\n\r\n        // Supprimer les anciennes lignes\r\n        await queryRunner.manager.delete(OrderDetail, { order: { id_order: id } });\r\n\r\n        // Créer les nouvelles lignes\r\n        const newDetails = await Promise.all(\r\n          updateOrderDto.orderLines.map(async (line) => {\r\n            const product = await this.productRepository.findOne({\r\n              where: { id_product: line.id_product }\r\n            });\r\n\r\n            if (!product) {\r\n              throw new NotFoundException(`Produit ${line.id_product} non trouvé`);\r\n            }\r\n\r\n            if (product.stock < line.quantity) {\r\n              throw new BadRequestException(\r\n                `Stock insuffisant pour ${product.name}. Disponible: ${product.stock}`\r\n              );\r\n            }\r\n\r\n            product.stock -= line.quantity;\r\n            await queryRunner.manager.save(Product, product);\r\n\r\n            return this.orderDetailRepository.create({\r\n              order,\r\n              product,\r\n              quantity: line.quantity,\r\n              unit_price: line.unit_price || product.price\r\n            });\r\n          })\r\n        );\r\n\r\n        await queryRunner.manager.save(OrderDetail, newDetails);\r\n\r\n        order.montant_total = newDetails.reduce(\r\n          (sum, detail) => sum + (detail.quantity * detail.unit_price),\r\n          0\r\n        );\r\n      }\r\n\r\n      const updatedOrder = await queryRunner.manager.save(Order, order);\r\n      await queryRunner.commitTransaction();\r\n      return this.getOrderById(updatedOrder.id_order);\r\n\r\n    } catch (error) {\r\n      await queryRunner.rollbackTransaction();\r\n      throw error;\r\n    } finally {\r\n      await queryRunner.release();\r\n    }\r\n  }\r\n\r\n  async deleteOrder(id: number): Promise<void> {\r\n    const queryRunner = this.dataSource.createQueryRunner();\r\n    await queryRunner.connect();\r\n    await queryRunner.startTransaction();\r\n\r\n    try {\r\n      const order = await this.getOrderById(id);\r\n\r\n      // Restaurer les stocks\r\n      for (const detail of order.orderDetails) {\r\n        const product = await this.productRepository.findOne({\r\n          where: { id_product: detail.product.id_product }\r\n        });\r\n        if (product) {\r\n          product.stock += detail.quantity;\r\n          await queryRunner.manager.save(Product, product);\r\n        }\r\n      }\r\n\r\n      await queryRunner.manager.delete(OrderDetail, { order: { id_order: id } });\r\n      await queryRunner.manager.remove(Order, order);\r\n\r\n      await queryRunner.commitTransaction();\r\n    } catch (error) {\r\n      await queryRunner.rollbackTransaction();\r\n      throw error;\r\n    } finally {\r\n      await queryRunner.release();\r\n    }\r\n  }\r\n\r\n  async findAllByClient(clientId: number): Promise<Order[]> {\r\n    return this.orderRepository.find({\r\n      where: { id_client: clientId },\r\n      relations: ['orderDetails', 'orderDetails.product', 'status'],\r\n      order: { date_order: 'DESC' }\r\n    });\r\n  }\r\n// Ajouter la validation des transitions de statut\r\n\r\n  async validatePayment(orderId: number, clientId: number, paymentInfo: any): Promise<Order> {\r\n    const queryRunner = this.dataSource.createQueryRunner();\r\n    await queryRunner.connect();\r\n    await queryRunner.startTransaction();\r\n\r\n    try {\r\n      const order = await this.getOrderById(orderId);\r\n\r\n      if (order.id_client !== clientId) {\r\n        throw new BadRequestException('Cette commande ne vous appartient pas');\r\n      }\r\n\r\n      if (order.id_statut !== 1) {\r\n        throw new BadRequestException('Cette commande ne peut pas être payée');\r\n      }\r\n\r\n      order.id_statut = 2; // Statut \"payée\"\r\n      const updatedOrder = await queryRunner.manager.save(Order, order);\r\n\r\n      await queryRunner.commitTransaction();\r\n      return updatedOrder;\r\n    } catch (error) {\r\n      await queryRunner.rollbackTransaction();\r\n      throw error;\r\n    } finally {\r\n      await queryRunner.release();\r\n    }\r\n  }\r\n\r\n\r\n  async createOrderFromCart(clientId: number): Promise<Order> {\r\n    const queryRunner = this.dataSource.createQueryRunner();\r\n    await queryRunner.connect();\r\n    await queryRunner.startTransaction();\r\n\r\n    try {\r\n      // 1. Récupérer les éléments du panier\r\n      const cartItems = await this.cartRepository.find({\r\n        where: { clientId },\r\n        relations: ['product', 'product.promotion'] // Ajout de la relation promotion\r\n      });\r\n\r\n      if (!cartItems.length) {\r\n        throw new BadRequestException('Le panier est vide');\r\n      }\r\n\r\n      // 2. Créer la commande\r\n      const order = this.orderRepository.create({\r\n        id_client: clientId,\r\n        id_statut: 1,\r\n        date_order: new Date(),\r\n        montant_total: 0\r\n      });\r\n\r\n      const savedOrder = await queryRunner.manager.save(Order, order);\r\n\r\n      // 3. Créer les détails de commande avec original_price\r\n      const orderDetails = await Promise.all(\r\n        cartItems.map(async (item) => {\r\n          // Vérifier le stock\r\n          if (item.product.stock < item.quantity) {\r\n            throw new BadRequestException(\r\n              `Stock insuffisant pour ${item.product.name}. Disponible: ${item.product.stock}`\r\n            );\r\n          }\r\n\r\n          // Créer le détail de commande avec original_price\r\n          const detail = this.orderDetailRepository.create({\r\n            order: savedOrder,\r\n            product: item.product,\r\n            quantity: item.quantity,\r\n            unit_price: item.price, // Prix avec promotion si applicable\r\n            original_price: item.product.price // Prix original du produit\r\n          });\r\n\r\n          // Mettre à jour le stock\r\n          item.product.stock -= item.quantity;\r\n          await queryRunner.manager.save(Product, item.product);\r\n\r\n          return detail;\r\n        })\r\n      );\r\n\r\n      await queryRunner.manager.save(OrderDetail, orderDetails);\r\n\r\n      // 4. Calculer le montant total\r\n      savedOrder.montant_total = orderDetails.reduce(\r\n        (sum, detail) => sum + (detail.quantity * detail.unit_price),\r\n        0\r\n      );\r\n      await queryRunner.manager.save(Order, savedOrder);\r\n\r\n      // 5. Vider le panier\r\n      await queryRunner.manager.delete(Cart, { clientId });\r\n\r\n      await queryRunner.commitTransaction();\r\n\r\n      // Retourner la commande avec ses détails\r\n      return this.getOrderById(savedOrder.id_order);\r\n\r\n    } catch (error) {\r\n      this.logger.error(`Erreur lors de la création de la commande: ${error.message}`);\r\n      await queryRunner.rollbackTransaction();\r\n      throw error;\r\n    } finally {\r\n      await queryRunner.release();\r\n    }\r\n  }\r\n  async findAllOrders(): Promise<Order[]> {\r\n    return this.orderRepository.find({\r\n      relations: [\r\n        'orderDetails',\r\n        'orderDetails.product',\r\n        'status',\r\n        'client'  // Pour avoir les informations du client\r\n      ],\r\n      order: {\r\n        date_order: 'DESC'  // Les plus récentes en premier\r\n      }\r\n    });\r\n  }\r\n  // Nouvelle méthode pour récupérer toutes les commandes\r\n  async findAll(): Promise<Order[]> {\r\n    // Remplacer la méthode existante par celle-ci\r\n    return this.orderRepository.find({\r\n      relations: [\r\n        'client',\r\n        'orderDetails',\r\n        'orderDetails.product'\r\n      ],\r\n      order: {\r\n        date_order: 'DESC'\r\n      }\r\n    });\r\n  }\r\n  // src/model/Order/order.service.ts\r\n  async updateOrderDetail(detailId: number, quantity: number): Promise<OrderDetail> {\r\n    // Utiliser id_detail_commande au lieu de id\r\n    const detail = await this.orderDetailRepository.findOne({\r\n      where: { id_detail_commande: detailId },\r\n      relations: ['product']\r\n    });\r\n\r\n    if (!detail) {\r\n      throw new NotFoundException('Détail de commande non trouvé');\r\n    }\r\n\r\n    // Vérifier le stock\r\n    if (quantity > detail.product.stock) {\r\n      throw new BadRequestException('Stock insuffisant');\r\n    }\r\n\r\n    detail.quantity = quantity;\r\n    return this.orderDetailRepository.save(detail);\r\n  }\r\n  async deleteOrderDetail(detailId: number): Promise<void> {\r\n    const result = await this.orderDetailRepository.delete(detailId);\r\n    if (result.affected === 0) {\r\n      throw new NotFoundException('Détail de commande non trouvé');\r\n    }\r\n  }\r\n  async getOrdersByClientId(clientId: number): Promise<any[]> {\r\n    return this.orderRepository.query(\r\n      'SELECT * FROM get_order_details_with_prices($1)',\r\n      [clientId]\r\n    );\r\n  }\r\n\r\n  async createOrder(orderData: CreateOrderDto): Promise<any> {\r\n    return this.orderRepository.query(\r\n      'SELECT * FROM create_order_with_prices($1, $2, $3, $4)',\r\n      [\r\n        orderData.clientId,\r\n        orderData.productId,\r\n        orderData.quantity,\r\n        orderData.unitPrice\r\n      ]\r\n    );\r\n  }\r\n\r\n  async updateOrderStatus(orderId: number, statusId: number): Promise<any> {\r\n    // Utiliser la procédure stockée créée précédemment\r\n    const query = `\r\n    UPDATE orders o\r\n    SET id_statut = $2\r\n    WHERE o.id_order = $1\r\n    RETURNING o.id_order, o.id_statut, o.date_order, o.montant_total\r\n  `;\r\n\r\n    try {\r\n      const result = await this.orderRepository.query(query, [orderId, statusId]);\r\n\r\n      if (!result.length) {\r\n        throw new NotFoundException(`Commande ${orderId} non trouvée`);\r\n      }\r\n\r\n      this.logger.debug(`Statut de la commande ${orderId} mis à jour avec succès`);\r\n      return result[0];\r\n    } catch (error) {\r\n      this.logger.error(`Erreur lors de la mise à jour du statut: ${error.message}`);\r\n      throw error;\r\n    }\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Order/order.service.ts b/api/src/model/Order/order.service.ts
--- a/api/src/model/Order/order.service.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Order/order.service.ts	(date 1736262015380)
@@ -1,4 +1,9 @@
-import { Injectable, Logger, NotFoundException, BadRequestException } from '@nestjs/common';
+import {
+  Injectable,
+  Logger,
+  NotFoundException,
+  BadRequestException,
+} from '@nestjs/common';
 import { InjectRepository } from '@nestjs/typeorm';
 import { Repository, DataSource } from 'typeorm';
 import { Order } from './order.entity';
@@ -7,7 +12,7 @@
 import { OrderDetail } from './OrderDetail/order-detail.entity';
 import { Cart } from '../Cart/cart.entity';
 import { Product } from '../Product/product.entity';
-  import { Client} from '../Client/client.entity';
+import { Client } from '../Client/client.entity';
 
 @Injectable()
 export class OrderService {
@@ -22,21 +27,16 @@
     private readonly cartRepository: Repository<Cart>,
     @InjectRepository(Product)
     private readonly productRepository: Repository<Product>,
-    @InjectRepository(Client)  // Ajout du ClientRepository
+    @InjectRepository(Client) // Ajout du ClientRepository
     private readonly clientRepository: Repository<Client>,
-    private readonly dataSource: DataSource
+    private readonly dataSource: DataSource,
   ) {}
-
 
-// Modifier aussi la méthode getOrderById pour inclure le client
+  // Modifier aussi la méthode getOrderById pour inclure le client
   async getOrderById(id: number): Promise<Order> {
     const order = await this.orderRepository.findOne({
       where: { id_order: id },
-      relations: [
-        'client',
-        'orderDetails',
-        'orderDetails.product'
-      ]
+      relations: ['client', 'orderDetails', 'orderDetails.product'],
     });
 
     if (!order) {
@@ -46,21 +46,26 @@
     return order;
   }
   // Lors de la création d'une commande, sauvegarder les deux prix
-  async createOrderDetail(orderDetail: Partial<OrderDetail>): Promise<OrderDetail> {
+  async createOrderDetail(
+    orderDetail: Partial<OrderDetail>,
+  ): Promise<OrderDetail> {
     const product = await this.productRepository.findOne({
-      where: { id_product: orderDetail.product_id }
+      where: { id_product: orderDetail.product_id },
     });
 
     const newOrderDetail = this.orderDetailRepository.create({
       ...orderDetail,
       original_price: product.price,
-      unit_price: orderDetail.unit_price // Prix avec promotion si applicable
+      unit_price: orderDetail.unit_price, // Prix avec promotion si applicable
     });
 
     return this.orderDetailRepository.save(newOrderDetail);
   }
 
-  async updateOrder(id: number, updateOrderDto: UpdateOrderDto): Promise<Order> {
+  async updateOrder(
+    id: number,
+    updateOrderDto: UpdateOrderDto,
+  ): Promise<Order> {
     const queryRunner = this.dataSource.createQueryRunner();
     await queryRunner.connect();
     await queryRunner.startTransaction();
@@ -70,14 +75,14 @@
 
       Object.assign(order, {
         date_order: updateOrderDto.date_order || order.date_order,
-        id_statut: updateOrderDto.id_statut || order.id_statut
+        id_statut: updateOrderDto.id_statut || order.id_statut,
       });
 
       if (updateOrderDto.orderLines?.length) {
         // Restaurer les stocks
         for (const detail of order.orderDetails) {
           const product = await this.productRepository.findOne({
-            where: { id_product: detail.product.id_product }
+            where: { id_product: detail.product.id_product },
           });
           if (product) {
             product.stock += detail.quantity;
@@ -86,22 +91,26 @@
         }
 
         // Supprimer les anciennes lignes
-        await queryRunner.manager.delete(OrderDetail, { order: { id_order: id } });
+        await queryRunner.manager.delete(OrderDetail, {
+          order: { id_order: id },
+        });
 
         // Créer les nouvelles lignes
         const newDetails = await Promise.all(
           updateOrderDto.orderLines.map(async (line) => {
             const product = await this.productRepository.findOne({
-              where: { id_product: line.id_product }
+              where: { id_product: line.id_product },
             });
 
             if (!product) {
-              throw new NotFoundException(`Produit ${line.id_product} non trouvé`);
+              throw new NotFoundException(
+                `Produit ${line.id_product} non trouvé`,
+              );
             }
 
             if (product.stock < line.quantity) {
               throw new BadRequestException(
-                `Stock insuffisant pour ${product.name}. Disponible: ${product.stock}`
+                `Stock insuffisant pour ${product.name}. Disponible: ${product.stock}`,
               );
             }
 
@@ -112,23 +121,22 @@
               order,
               product,
               quantity: line.quantity,
-              unit_price: line.unit_price || product.price
+              unit_price: line.unit_price || product.price,
             });
-          })
+          }),
         );
 
         await queryRunner.manager.save(OrderDetail, newDetails);
 
         order.montant_total = newDetails.reduce(
-          (sum, detail) => sum + (detail.quantity * detail.unit_price),
-          0
+          (sum, detail) => sum + detail.quantity * detail.unit_price,
+          0,
         );
       }
 
       const updatedOrder = await queryRunner.manager.save(Order, order);
       await queryRunner.commitTransaction();
       return this.getOrderById(updatedOrder.id_order);
-
     } catch (error) {
       await queryRunner.rollbackTransaction();
       throw error;
@@ -148,7 +156,7 @@
       // Restaurer les stocks
       for (const detail of order.orderDetails) {
         const product = await this.productRepository.findOne({
-          where: { id_product: detail.product.id_product }
+          where: { id_product: detail.product.id_product },
         });
         if (product) {
           product.stock += detail.quantity;
@@ -156,7 +164,9 @@
         }
       }
 
-      await queryRunner.manager.delete(OrderDetail, { order: { id_order: id } });
+      await queryRunner.manager.delete(OrderDetail, {
+        order: { id_order: id },
+      });
       await queryRunner.manager.remove(Order, order);
 
       await queryRunner.commitTransaction();
@@ -172,12 +182,16 @@
     return this.orderRepository.find({
       where: { id_client: clientId },
       relations: ['orderDetails', 'orderDetails.product', 'status'],
-      order: { date_order: 'DESC' }
+      order: { date_order: 'DESC' },
     });
   }
-// Ajouter la validation des transitions de statut
+  // Ajouter la validation des transitions de statut
 
-  async validatePayment(orderId: number, clientId: number, paymentInfo: any): Promise<Order> {
+  async validatePayment(
+    orderId: number,
+    clientId: number,
+    paymentInfo: any,
+  ): Promise<Order> {
     const queryRunner = this.dataSource.createQueryRunner();
     await queryRunner.connect();
     await queryRunner.startTransaction();
@@ -206,7 +220,6 @@
     }
   }
 
-
   async createOrderFromCart(clientId: number): Promise<Order> {
     const queryRunner = this.dataSource.createQueryRunner();
     await queryRunner.connect();
@@ -216,7 +229,7 @@
       // 1. Récupérer les éléments du panier
       const cartItems = await this.cartRepository.find({
         where: { clientId },
-        relations: ['product', 'product.promotion'] // Ajout de la relation promotion
+        relations: ['product', 'product.promotion'], // Ajout de la relation promotion
       });
 
       if (!cartItems.length) {
@@ -228,7 +241,7 @@
         id_client: clientId,
         id_statut: 1,
         date_order: new Date(),
-        montant_total: 0
+        montant_total: 0,
       });
 
       const savedOrder = await queryRunner.manager.save(Order, order);
@@ -239,7 +252,7 @@
           // Vérifier le stock
           if (item.product.stock < item.quantity) {
             throw new BadRequestException(
-              `Stock insuffisant pour ${item.product.name}. Disponible: ${item.product.stock}`
+              `Stock insuffisant pour ${item.product.name}. Disponible: ${item.product.stock}`,
             );
           }
 
@@ -249,7 +262,7 @@
             product: item.product,
             quantity: item.quantity,
             unit_price: item.price, // Prix avec promotion si applicable
-            original_price: item.product.price // Prix original du produit
+            original_price: item.product.price, // Prix original du produit
           });
 
           // Mettre à jour le stock
@@ -257,15 +270,15 @@
           await queryRunner.manager.save(Product, item.product);
 
           return detail;
-        })
+        }),
       );
 
       await queryRunner.manager.save(OrderDetail, orderDetails);
 
       // 4. Calculer le montant total
       savedOrder.montant_total = orderDetails.reduce(
-        (sum, detail) => sum + (detail.quantity * detail.unit_price),
-        0
+        (sum, detail) => sum + detail.quantity * detail.unit_price,
+        0,
       );
       await queryRunner.manager.save(Order, savedOrder);
 
@@ -276,9 +289,10 @@
 
       // Retourner la commande avec ses détails
       return this.getOrderById(savedOrder.id_order);
-
     } catch (error) {
-      this.logger.error(`Erreur lors de la création de la commande: ${error.message}`);
+      this.logger.error(
+        `Erreur lors de la création de la commande: ${error.message}`,
+      );
       await queryRunner.rollbackTransaction();
       throw error;
     } finally {
@@ -291,33 +305,32 @@
         'orderDetails',
         'orderDetails.product',
         'status',
-        'client'  // Pour avoir les informations du client
+        'client', // Pour avoir les informations du client
       ],
       order: {
-        date_order: 'DESC'  // Les plus récentes en premier
-      }
+        date_order: 'DESC', // Les plus récentes en premier
+      },
     });
   }
   // Nouvelle méthode pour récupérer toutes les commandes
   async findAll(): Promise<Order[]> {
     // Remplacer la méthode existante par celle-ci
     return this.orderRepository.find({
-      relations: [
-        'client',
-        'orderDetails',
-        'orderDetails.product'
-      ],
+      relations: ['client', 'orderDetails', 'orderDetails.product'],
       order: {
-        date_order: 'DESC'
-      }
+        date_order: 'DESC',
+      },
     });
   }
   // src/model/Order/order.service.ts
-  async updateOrderDetail(detailId: number, quantity: number): Promise<OrderDetail> {
+  async updateOrderDetail(
+    detailId: number,
+    quantity: number,
+  ): Promise<OrderDetail> {
     // Utiliser id_detail_commande au lieu de id
     const detail = await this.orderDetailRepository.findOne({
       where: { id_detail_commande: detailId },
-      relations: ['product']
+      relations: ['product'],
     });
 
     if (!detail) {
@@ -341,7 +354,7 @@
   async getOrdersByClientId(clientId: number): Promise<any[]> {
     return this.orderRepository.query(
       'SELECT * FROM get_order_details_with_prices($1)',
-      [clientId]
+      [clientId],
     );
   }
 
@@ -352,8 +365,8 @@
         orderData.clientId,
         orderData.productId,
         orderData.quantity,
-        orderData.unitPrice
-      ]
+        orderData.unitPrice,
+      ],
     );
   }
 
@@ -367,17 +380,24 @@
   `;
 
     try {
-      const result = await this.orderRepository.query(query, [orderId, statusId]);
+      const result = await this.orderRepository.query(query, [
+        orderId,
+        statusId,
+      ]);
 
       if (!result.length) {
         throw new NotFoundException(`Commande ${orderId} non trouvée`);
       }
 
-      this.logger.debug(`Statut de la commande ${orderId} mis à jour avec succès`);
+      this.logger.debug(
+        `Statut de la commande ${orderId} mis à jour avec succès`,
+      );
       return result[0];
     } catch (error) {
-      this.logger.error(`Erreur lors de la mise à jour du statut: ${error.message}`);
+      this.logger.error(
+        `Erreur lors de la mise à jour du statut: ${error.message}`,
+      );
       throw error;
     }
   }
-}
\ No newline at end of file
+}
Index: api/src/model/Order/dto/create-order.dto.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { IsNotEmpty, IsNumber, Min } from \"class-validator\";\r\nimport { ApiProperty } from '@nestjs/swagger';\r\n\r\n// src/model/Order/dto/create-order.dto.ts\r\nexport class CreateOrderDto {\r\n\r\n  @ApiProperty()\r\n  @IsNotEmpty()\r\n  clientId: number;\r\n  @ApiProperty()\r\n  @IsNumber()\r\n  @IsNotEmpty()\r\n  productId: number;\r\n  @ApiProperty()\r\n  @IsNumber()\r\n  @Min(1)\r\n  quantity: number;\r\n  @ApiProperty()\r\n  @IsNumber()\r\n  @Min(0)\r\n  unitPrice: number;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Order/dto/create-order.dto.ts b/api/src/model/Order/dto/create-order.dto.ts
--- a/api/src/model/Order/dto/create-order.dto.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Order/dto/create-order.dto.ts	(date 1736262015380)
@@ -1,9 +1,8 @@
-import { IsNotEmpty, IsNumber, Min } from "class-validator";
+import { IsNotEmpty, IsNumber, Min } from 'class-validator';
 import { ApiProperty } from '@nestjs/swagger';
 
 // src/model/Order/dto/create-order.dto.ts
 export class CreateOrderDto {
-
   @ApiProperty()
   @IsNotEmpty()
   clientId: number;
@@ -19,4 +18,4 @@
   @IsNumber()
   @Min(0)
   unitPrice: number;
-}
\ No newline at end of file
+}
Index: api/src/model/Stock/stock.entity.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/Stock/stock.entity.ts\r\nimport { Entity, PrimaryGeneratedColumn, Column, ManyToOne } from 'typeorm';\r\nimport { Product } from '../Product/product.entity';\r\n\r\n@Entity('stock_alerts')\r\nexport class StockAlert {\r\n  @PrimaryGeneratedColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  product_id: number;\r\n\r\n  @Column()\r\n  alert_type: string;\r\n\r\n  @Column()\r\n  message: string;\r\n\r\n  @Column({ type: 'timestamp', default: () => 'CURRENT_TIMESTAMP' })\r\n  created_at: Date;\r\n\r\n  @ManyToOne(() => Product)\r\n  product: Product;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Stock/stock.entity.ts b/api/src/model/Stock/stock.entity.ts
--- a/api/src/model/Stock/stock.entity.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Stock/stock.entity.ts	(date 1736262015382)
@@ -21,4 +21,4 @@
 
   @ManyToOne(() => Product)
   product: Product;
-}
\ No newline at end of file
+}
Index: api/src/model/Order/OrderDetail/order-detail.entity.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Column, Entity, JoinColumn, ManyToOne, PrimaryGeneratedColumn } from \"typeorm\";\r\nimport { Order } from \"../order.entity\";\r\nimport { Product } from \"model/Product/product.entity\";\r\n\r\n@Entity('order_detail')\r\nexport class OrderDetail {\r\n  @PrimaryGeneratedColumn()\r\n  id_detail_commande: number;\r\n\r\n  @Column()\r\n  order_id: number;\r\n\r\n  @Column()\r\n  product_id: number;\r\n\r\n  @Column()\r\n  quantity: number;\r\n\r\n  @Column('decimal', { precision: 10, scale: 2 })\r\n  unit_price: number;\r\n  @Column('decimal', { precision: 10, scale: 2 })\r\n  original_price: number;\r\n\r\n  @ManyToOne(() => Order)\r\n  @JoinColumn({ name: 'order_id' })\r\n  order: Order;\r\n\r\n  @ManyToOne(() => Product)\r\n  @JoinColumn({ name: 'product_id' })\r\n  product: Product;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Order/OrderDetail/order-detail.entity.ts b/api/src/model/Order/OrderDetail/order-detail.entity.ts
--- a/api/src/model/Order/OrderDetail/order-detail.entity.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Order/OrderDetail/order-detail.entity.ts	(date 1736262015380)
@@ -1,6 +1,12 @@
-import { Column, Entity, JoinColumn, ManyToOne, PrimaryGeneratedColumn } from "typeorm";
-import { Order } from "../order.entity";
-import { Product } from "model/Product/product.entity";
+import {
+  Column,
+  Entity,
+  JoinColumn,
+  ManyToOne,
+  PrimaryGeneratedColumn,
+} from 'typeorm';
+import { Order } from '../order.entity';
+import { Product } from 'model/Product/product.entity';
 
 @Entity('order_detail')
 export class OrderDetail {
@@ -28,4 +34,4 @@
   @ManyToOne(() => Product)
   @JoinColumn({ name: 'product_id' })
   product: Product;
-}
\ No newline at end of file
+}
Index: api/src/model/Order/OrderDetail/order-detail.module.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/OrderDetail/order-detail.module.ts\r\nimport { Module } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { OrderDetail } from './order-detail.entity';\r\n\r\n@Module({\r\n  imports: [TypeOrmModule.forFeature([OrderDetail])],\r\n  exports: [TypeOrmModule]\r\n})\r\nexport class OrderDetailModule {}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Order/OrderDetail/order-detail.module.ts b/api/src/model/Order/OrderDetail/order-detail.module.ts
--- a/api/src/model/Order/OrderDetail/order-detail.module.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Order/OrderDetail/order-detail.module.ts	(date 1736262015380)
@@ -5,6 +5,6 @@
 
 @Module({
   imports: [TypeOrmModule.forFeature([OrderDetail])],
-  exports: [TypeOrmModule]
+  exports: [TypeOrmModule],
 })
-export class OrderDetailModule {}
\ No newline at end of file
+export class OrderDetailModule {}
Index: api/src/model/Stock/stock.module.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/Stock/stock.module.ts\r\nimport { Module } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { StockController } from './stock.controller';\r\nimport { StockService } from './stock.service';\r\nimport { StockAlert } from './stock.entity';\r\nimport { ProductService } from '../Product/product.service';\r\nimport { Product } from '../Product/product.entity';\r\nimport { Type } from '../Type/type.entity';          // Ajouté\r\nimport { Promotion } from '../Promotion/promotion.entity'; // Ajouté\r\nimport { TypeModule } from '../Type/type.module';    // Ajouté\r\nimport { PromotionModule } from '../Promotion/promotion.module'; // Ajouté\r\n\r\n@Module({\r\n  imports: [\r\n    TypeOrmModule.forFeature([StockAlert, Product, Type, Promotion]),\r\n    TypeModule,             // Ajouté\r\n    PromotionModule        // Ajouté\r\n  ],\r\n  controllers: [StockController],\r\n  providers: [StockService, ProductService],\r\n  exports: [StockService]\r\n})\r\nexport class StockModule {}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Stock/stock.module.ts b/api/src/model/Stock/stock.module.ts
--- a/api/src/model/Stock/stock.module.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Stock/stock.module.ts	(date 1736262015382)
@@ -6,19 +6,19 @@
 import { StockAlert } from './stock.entity';
 import { ProductService } from '../Product/product.service';
 import { Product } from '../Product/product.entity';
-import { Type } from '../Type/type.entity';          // Ajouté
+import { Type } from '../Type/type.entity'; // Ajouté
 import { Promotion } from '../Promotion/promotion.entity'; // Ajouté
-import { TypeModule } from '../Type/type.module';    // Ajouté
+import { TypeModule } from '../Type/type.module'; // Ajouté
 import { PromotionModule } from '../Promotion/promotion.module'; // Ajouté
 
 @Module({
   imports: [
     TypeOrmModule.forFeature([StockAlert, Product, Type, Promotion]),
-    TypeModule,             // Ajouté
-    PromotionModule        // Ajouté
+    TypeModule, // Ajouté
+    PromotionModule, // Ajouté
   ],
   controllers: [StockController],
   providers: [StockService, ProductService],
-  exports: [StockService]
+  exports: [StockService],
 })
-export class StockModule {}
\ No newline at end of file
+export class StockModule {}
Index: api/src/model/Stock/dto/stock-alert.dto.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/Stock/dto/stock-alert.dto.ts\r\nexport class StockAlertDto {\r\n  readonly product_id: number;\r\n  readonly alert_type: string;\r\n  readonly message: string;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Stock/dto/stock-alert.dto.ts b/api/src/model/Stock/dto/stock-alert.dto.ts
--- a/api/src/model/Stock/dto/stock-alert.dto.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Stock/dto/stock-alert.dto.ts	(date 1736262015382)
@@ -3,4 +3,4 @@
   readonly product_id: number;
   readonly alert_type: string;
   readonly message: string;
-}
\ No newline at end of file
+}
Index: api/src/model/Stock/stock.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Injectable } from \"@nestjs/common\";\r\nimport { InjectDataSource, InjectRepository } from \"@nestjs/typeorm\";\r\nimport { DataSource, Repository } from \"typeorm\";\r\nimport { StockAlert } from \"./stock.entity\";\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\n\r\n//Repository permet d'interagir avec une entité spécifique dans la base de données.\r\n//DataSource est utilisé pour exécuter des requêtes SQL brutes ou gérer des transactions.\r\n//StockAlert : Il s'agit d'une entité définissant les alertes de stock, possiblement liée à d'autres entités (comme Product).\r\n\r\n// src/model/Stock/stock.service.ts\r\n@Injectable()//Indique que cette classe peut être injectée comme dépendance dans d'autres parties de l'application NestJS.\r\nexport class StockService {\r\n  constructor(\r\n    @InjectRepository(StockAlert)//Injecte le repository de l'entité StockAlert pour manipuler les données liées aux alertes de stock via TypeORM.\r\n    private stockAlertRepository: Repository<StockAlert>,\r\n    @InjectDataSource()//Injecte une instance de la source de données pour exécuter des requêtes SQL.\r\n    private dataSource: DataSource\r\n  ) {}\r\n\r\n//Cette méthode exécute une procédure stockée (CALL update_stock_after_sale) dans la base de données pour mettre à jour\r\n// le stock d'un produit après une vente.\r\n  async updateStockAfterSale(productId: number, quantity: number) {\r\n    await this.dataSource.query(\r\n      'CALL update_stock_after_sale($1, $2)',\r\n      [productId, quantity]//productId : Identifiant du produit vendu.\r\n      //quantity : Quantité vendue.\r\n    );\r\n  }\r\n\r\n  async exportStockToCsv() {\r\n    try {\r\n      const products = await this.dataSource.query(`\r\n        SELECT \r\n          id_product,\r\n          name,\r\n          description,\r\n          stock,\r\n          CAST(TRUNC(price::numeric / 100.0, 2) AS TEXT) as price  -- Conversion et division\r\n        FROM product\r\n      `);\r\n\r\n      // En-tête du CSV\r\n      let csvContent = 'Id,Nom,Description,Stock,Prix\\n';\r\n\r\n      // Ajouter les données\r\n      products.forEach((product) => {\r\n        csvContent += `${product.id_product},`;\r\n        csvContent += `\"${product.name.replace(/\"/g, '\"\"')}\",`;\r\n        csvContent += `\"${product.description.replace(/\"/g, '\"\"')}\",`;\r\n        csvContent += `${product.stock},`;\r\n        csvContent += `${product.price}\\n`;  // Le prix est déjà formaté par la requête SQL\r\n      });\r\n\r\n      // Ajouter BOM pour UTF-8\r\n      const bom = '\\uFEFF';\r\n      const fileContent = bom + csvContent;\r\n\r\n      const filePath = path.join(__dirname, '../../exports', 'stock.csv');\r\n\r\n      if (!fs.existsSync(path.dirname(filePath))) {\r\n        fs.mkdirSync(path.dirname(filePath), { recursive: true });\r\n      }\r\n\r\n      fs.writeFileSync(filePath, fileContent, { encoding: 'utf8' });\r\n\r\n      return filePath;\r\n    } catch (error) {\r\n      console.error('Erreur lors de la génération du CSV:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  async getStockAlerts() {\r\n    return this.stockAlertRepository.find({\r\n      relations: ['product']\r\n    });\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Stock/stock.service.ts b/api/src/model/Stock/stock.service.ts
--- a/api/src/model/Stock/stock.service.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Stock/stock.service.ts	(date 1736262015382)
@@ -1,7 +1,7 @@
-import { Injectable } from "@nestjs/common";
-import { InjectDataSource, InjectRepository } from "@nestjs/typeorm";
-import { DataSource, Repository } from "typeorm";
-import { StockAlert } from "./stock.entity";
+import { Injectable } from '@nestjs/common';
+import { InjectDataSource, InjectRepository } from '@nestjs/typeorm';
+import { DataSource, Repository } from 'typeorm';
+import { StockAlert } from './stock.entity';
 import * as fs from 'fs';
 import * as path from 'path';
 
@@ -10,21 +10,21 @@
 //StockAlert : Il s'agit d'une entité définissant les alertes de stock, possiblement liée à d'autres entités (comme Product).
 
 // src/model/Stock/stock.service.ts
-@Injectable()//Indique que cette classe peut être injectée comme dépendance dans d'autres parties de l'application NestJS.
+@Injectable() //Indique que cette classe peut être injectée comme dépendance dans d'autres parties de l'application NestJS.
 export class StockService {
   constructor(
-    @InjectRepository(StockAlert)//Injecte le repository de l'entité StockAlert pour manipuler les données liées aux alertes de stock via TypeORM.
+    @InjectRepository(StockAlert) //Injecte le repository de l'entité StockAlert pour manipuler les données liées aux alertes de stock via TypeORM.
     private stockAlertRepository: Repository<StockAlert>,
-    @InjectDataSource()//Injecte une instance de la source de données pour exécuter des requêtes SQL.
-    private dataSource: DataSource
+    @InjectDataSource() //Injecte une instance de la source de données pour exécuter des requêtes SQL.
+    private dataSource: DataSource,
   ) {}
 
-//Cette méthode exécute une procédure stockée (CALL update_stock_after_sale) dans la base de données pour mettre à jour
-// le stock d'un produit après une vente.
+  //Cette méthode exécute une procédure stockée (CALL update_stock_after_sale) dans la base de données pour mettre à jour
+  // le stock d'un produit après une vente.
   async updateStockAfterSale(productId: number, quantity: number) {
     await this.dataSource.query(
       'CALL update_stock_after_sale($1, $2)',
-      [productId, quantity]//productId : Identifiant du produit vendu.
+      [productId, quantity], //productId : Identifiant du produit vendu.
       //quantity : Quantité vendue.
     );
   }
@@ -50,7 +50,7 @@
         csvContent += `"${product.name.replace(/"/g, '""')}",`;
         csvContent += `"${product.description.replace(/"/g, '""')}",`;
         csvContent += `${product.stock},`;
-        csvContent += `${product.price}\n`;  // Le prix est déjà formaté par la requête SQL
+        csvContent += `${product.price}\n`; // Le prix est déjà formaté par la requête SQL
       });
 
       // Ajouter BOM pour UTF-8
@@ -73,7 +73,7 @@
   }
   async getStockAlerts() {
     return this.stockAlertRepository.find({
-      relations: ['product']
+      relations: ['product'],
     });
   }
-}
\ No newline at end of file
+}
Index: api/src/model/Stock/stock.controller.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/Stock/stock.controller.ts\r\nimport { Controller, Get, Res } from '@nestjs/common';\r\nimport { Response } from 'express';\r\nimport { StockService } from './stock.service';\r\nimport { ProductService } from '../Product/product.service'; // Vérifiez que ce service existe.\r\n\r\n@Controller('stock')\r\nexport class StockController {\r\n  constructor(\r\n    private readonly stockService: StockService,\r\n    private readonly productService: ProductService // Injection de ProductService\r\n  ) {}\r\n\r\n  @Get('products')\r\n  async getProducts() {\r\n    try {\r\n      return await this.productService.findAll(); // Vérifiez que la méthode `findAll` existe\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des produits:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  @Get('alerts')\r\n  async getStockAlerts() {\r\n    try {\r\n      return await this.stockService.getStockAlerts(); // Gestion des alertes de stock\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des alertes de stock:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  @Get('export')\r\n  async exportStock(@Res() res: Response) {\r\n    try {\r\n      const filePath = await this.stockService.exportStockToCsv(); // Génération du fichier CSV\r\n      res.setHeader('Content-Type', 'text/csv');\r\n      res.setHeader('Content-Disposition', 'attachment; filename=\"stock.csv\"');\r\n      res.download(filePath); // Permet de télécharger le fichier\r\n    } catch (error) {\r\n      console.error('Erreur lors de l’exportation du stock:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Stock/stock.controller.ts b/api/src/model/Stock/stock.controller.ts
--- a/api/src/model/Stock/stock.controller.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Stock/stock.controller.ts	(date 1736262015382)
@@ -8,7 +8,7 @@
 export class StockController {
   constructor(
     private readonly stockService: StockService,
-    private readonly productService: ProductService // Injection de ProductService
+    private readonly productService: ProductService, // Injection de ProductService
   ) {}
 
   @Get('products')
@@ -26,7 +26,10 @@
     try {
       return await this.stockService.getStockAlerts(); // Gestion des alertes de stock
     } catch (error) {
-      console.error('Erreur lors de la récupération des alertes de stock:', error);
+      console.error(
+        'Erreur lors de la récupération des alertes de stock:',
+        error,
+      );
       throw error;
     }
   }
Index: api/src/model/Client/client.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/services/client.service.ts\r\nimport { Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { Client } from './client.entity';\r\nimport { CreateClientDto } from './dto/create-client.dto';\r\nimport { UpdateClientDto } from './dto/update-client.dto';\r\n\r\n\r\n@Injectable()\r\nexport class ClientService {\r\n  constructor(\r\n    @InjectRepository(Client)\r\n    private readonly clientRepository: Repository<Client>,\r\n  ) {}\r\n\r\n  async create(createClientDto: CreateClientDto): Promise<Client> {\r\n    const client = this.clientRepository.create(createClientDto);\r\n    return this.clientRepository.save(client);\r\n  }\r\n\r\n  async findAll(): Promise<Client[]> {\r\n    return this.clientRepository.find();\r\n  }\r\n\r\n  async findOne(id: number): Promise<Client> {\r\n    const client = await this.clientRepository.findOne({ where: { clientId: id } });\r\n    if (!client) {\r\n      throw new NotFoundException(`Client with ID ${id} not found`);\r\n    }\r\n    return client;\r\n  }cd\r\n\r\n  async update(id: number, updateClientDto: UpdateClientDto): Promise<Client> {\r\n    const client = await this.findOne(id);\r\n    Object.assign(client, updateClientDto);\r\n    return this.clientRepository.save(client);\r\n  }\r\n\r\n  async remove(id: number): Promise<void> {\r\n    const client = await this.findOne(id);\r\n    await this.clientRepository.remove(client);\r\n  }\r\n\r\n  async findByCredentialId(credentialId: string): Promise<Client | null> {\r\n    console.log('Recherche client pour credential:', credentialId);\r\n    const client = await this.clientRepository\r\n      .createQueryBuilder('client')\r\n      .leftJoinAndSelect('client.credential', 'credential')\r\n      .where('credential.credential_id = :credentialId', { credentialId })\r\n      .getOne();\r\n\r\n    console.log('Client trouvé:', client);\r\n    return client;\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Client/client.service.ts b/api/src/model/Client/client.service.ts
--- a/api/src/model/Client/client.service.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Client/client.service.ts	(date 1736262015380)
@@ -6,7 +6,6 @@
 import { CreateClientDto } from './dto/create-client.dto';
 import { UpdateClientDto } from './dto/update-client.dto';
 
-
 @Injectable()
 export class ClientService {
   constructor(
@@ -24,12 +23,15 @@
   }
 
   async findOne(id: number): Promise<Client> {
-    const client = await this.clientRepository.findOne({ where: { clientId: id } });
+    const client = await this.clientRepository.findOne({
+      where: { clientId: id },
+    });
     if (!client) {
       throw new NotFoundException(`Client with ID ${id} not found`);
     }
     return client;
-  }cd
+  }
+  cd;
 
   async update(id: number, updateClientDto: UpdateClientDto): Promise<Client> {
     const client = await this.findOne(id);
Index: api/src/model/Client/client.controller.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/controllers/client.controller.ts\r\nimport { Controller, Get, Post, Body, Param, Delete, Put, NotFoundException } from '@nestjs/common';\r\nimport { ApiTags } from '@nestjs/swagger';\r\n\r\nimport { ClientService } from './client.service';\r\nimport { UpdateClientDto } from './dto/update-client.dto';\r\nimport { CreateClientDto } from './dto/create-client.dto';\r\n\r\n@ApiTags('clients')\r\n@Controller('clients')\r\nexport class ClientController {\r\n  constructor(private readonly clientService: ClientService) {}\r\n\r\n  @Post()\r\n  create(@Body() createClientDto: CreateClientDto) {\r\n    return this.clientService.create(createClientDto);\r\n  }\r\n\r\n  @Get()\r\n  findAll() {\r\n    return this.clientService.findAll();\r\n  }\r\n\r\n  @Get('credential/:credentialId')\r\n  async findByCredentialId(@Param('credentialId') credentialId: string) {\r\n    const client = await this.clientService.findByCredentialId(credentialId);\r\n    if (!client) {\r\n      throw new NotFoundException('Client non trouvé');\r\n    }\r\n    return client;\r\n  }\r\n\r\n  @Get(':id')\r\n  findOne(@Param('id') id: number) {\r\n    return this.clientService.findOne(id);\r\n  }\r\n\r\n  @Put(':id')\r\n  update(@Param('id') id: number, @Body() updateClientDto: UpdateClientDto) {\r\n    return this.clientService.update(id, updateClientDto);\r\n  }\r\n  @Delete(':id')\r\n  remove(@Param('id') id: number) {\r\n    return this.clientService.remove(id);\r\n  }\r\n\r\n }\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Client/client.controller.ts b/api/src/model/Client/client.controller.ts
--- a/api/src/model/Client/client.controller.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Client/client.controller.ts	(date 1736262015380)
@@ -1,5 +1,14 @@
 // src/controllers/client.controller.ts
-import { Controller, Get, Post, Body, Param, Delete, Put, NotFoundException } from '@nestjs/common';
+import {
+  Controller,
+  Get,
+  Post,
+  Body,
+  Param,
+  Delete,
+  Put,
+  NotFoundException,
+} from '@nestjs/common';
 import { ApiTags } from '@nestjs/swagger';
 
 import { ClientService } from './client.service';
@@ -43,5 +52,4 @@
   remove(@Param('id') id: number) {
     return this.clientService.remove(id);
   }
-
- }
+}
Index: my-app/src/app/components/Login/login.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { AuthService, LoginResponse } from '../../services/auth/auth.service';\r\nimport { firstValueFrom } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule, RouterModule],\r\n  templateUrl: 'login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n})\r\nexport class LoginComponent {\r\n  credentials = {\r\n    mail: '',\r\n    password: ''\r\n  };\r\n\r\n  isLoading = false;\r\n  error = '';\r\n  showPassword = false;\r\n  submitted = false;\r\n  currentYear = new Date().getFullYear();\r\n\r\n  constructor(private authService: AuthService, private router: Router) {}\r\n\r\n  async onSubmit() {\r\n    try {\r\n      this.isLoading = true;\r\n      this.submitted = true;\r\n      this.error = '';\r\n\r\n      if (!this.credentials.mail || !this.credentials.password) {\r\n        this.error = 'Veuillez remplir tous les champs';\r\n        this.isLoading = false;\r\n        return;\r\n      }\r\n\r\n      if (!this.authService.validateEmail(this.credentials.mail)) {\r\n        this.error = 'Format d\\'email invalide';\r\n        this.isLoading = false;\r\n        return;\r\n      }\r\n\r\n      // Vérifiez si l'utilisateur existe\r\n      const userExists = await firstValueFrom(this.authService.checkUserExists(this.credentials.mail));\r\n\r\n      if (!userExists) {\r\n        this.error = \"Cet utilisateur n'existe pas. Veuillez vous inscrire.\";\r\n        this.isLoading = false;\r\n        return;\r\n      }\r\n\r\n      // Effectuer la connexion\r\n      const response: LoginResponse = await firstValueFrom(this.authService.login(this.credentials));\r\n\r\n      // Détecter le rôle via `credential.isAdmin`\r\n      if (response.credential.isAdmin) {\r\n        // Redirection pour les administrateurs\r\n        this.router.navigate(['/admin']);\r\n      } else {\r\n        // Redirection pour les clients\r\n        this.router.navigate(['/client']);\r\n      }\r\n    } catch (error) {\r\n      this.error = error instanceof Error\r\n        ? error.message\r\n        : 'Une erreur est survenue lors de la connexion';\r\n      console.error('Erreur de connexion:', error);\r\n    } finally {\r\n      this.isLoading = false;\r\n    }\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/my-app/src/app/components/Login/login.component.ts b/my-app/src/app/components/Login/login.component.ts
--- a/my-app/src/app/components/Login/login.component.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/my-app/src/app/components/Login/login.component.ts	(date 1736265878056)
@@ -1,8 +1,8 @@
 import { Component } from '@angular/core';
 import { CommonModule } from '@angular/common';
 import { FormsModule } from '@angular/forms';
-import { Router, RouterModule } from '@angular/router';
-import { AuthService, LoginResponse } from '../../services/auth/auth.service';
+import {Router, RouterModule} from '@angular/router';
+import { AuthService } from '../../services/auth/auth.service';
 import { firstValueFrom } from 'rxjs';
 
 @Component({
@@ -22,6 +22,7 @@
   error = '';
   showPassword = false;
   submitted = false;
+  isAdminMode = false;
   currentYear = new Date().getFullYear();
 
   constructor(private authService: AuthService, private router: Router) {}
@@ -34,34 +35,24 @@
 
       if (!this.credentials.mail || !this.credentials.password) {
         this.error = 'Veuillez remplir tous les champs';
-        this.isLoading = false;
         return;
       }
 
       if (!this.authService.validateEmail(this.credentials.mail)) {
         this.error = 'Format d\'email invalide';
-        this.isLoading = false;
-        return;
-      }
-
-      // Vérifiez si l'utilisateur existe
-      const userExists = await firstValueFrom(this.authService.checkUserExists(this.credentials.mail));
-
-      if (!userExists) {
-        this.error = "Cet utilisateur n'existe pas. Veuillez vous inscrire.";
-        this.isLoading = false;
         return;
       }
 
-      // Effectuer la connexion
-      const response: LoginResponse = await firstValueFrom(this.authService.login(this.credentials));
+      const loginObservable = this.isAdminMode
+        ? this.authService.adminLogin(this.credentials)
+        : this.authService.login(this.credentials);
 
-      // Détecter le rôle via `credential.isAdmin`
+      const response = await firstValueFrom(loginObservable);
+
+      // Rediriger après une connexion réussie
       if (response.credential.isAdmin) {
-        // Redirection pour les administrateurs
         this.router.navigate(['/admin']);
       } else {
-        // Redirection pour les clients
         this.router.navigate(['/client']);
       }
     } catch (error) {
@@ -73,4 +64,14 @@
       this.isLoading = false;
     }
   }
+
+
+  onAdminModeChange() {
+    this.error = '';
+    this.credentials = {
+      mail: '',
+      password: ''
+    };
+    this.submitted = false;
+  }
 }
Index: api/src/model/Paypal/paypal.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/Paypal/paypal.service.ts\r\nimport { HttpException, HttpStatus, Inject, Injectable } from \"@nestjs/common\";\r\nimport { ConfigService } from \"@nestjs/config\";\r\nimport { InjectRepository } from \"@nestjs/typeorm\";\r\nimport { Repository } from \"typeorm\";\r\nimport axios from \"axios\";\r\nimport { Order } from \"model/Order/order.entity\";\r\nimport { Payment } from \"model/Payment/payment.entity\";\r\nimport { PaymentMethodEnum, PaymentStatusEnum } from \"model/Payment/dto/create-payment.dto\";\r\nimport { Product } from '../Product/product.entity';\r\n\r\n@Injectable()\r\nexport class PaypalService {\r\n  private readonly paypalUrl: string;\r\n  private readonly clientId: string;\r\n  private readonly clientSecret: string;\r\n\r\n  constructor(\r\n    @Inject(ConfigService)\r\n    private configService: ConfigService,\r\n    @InjectRepository(Payment)\r\n    private paymentRepository: Repository<Payment>,\r\n    @InjectRepository(Order)\r\n    private orderRepository: Repository<Order>,\r\n    @InjectRepository(Product)\r\n    private productRepository: Repository<Product>\r\n  ) {\r\n    this.paypalUrl = this.configService.get<string>('PAYPAL_API_URL');\r\n    this.clientId = this.configService.get<string>('PAYPAL_CLIENT_ID');\r\n    this.clientSecret = this.configService.get<string>('PAYPAL_CLIENT_SECRET');\r\n  }\r\n\r\n  async getAccessToken() {\r\n    try {\r\n      const auth = Buffer.from(`${this.clientId}:${this.clientSecret}`).toString('base64');\r\n      const response = await axios.post(\r\n        `${this.paypalUrl}/v1/oauth2/token`,\r\n        'grant_type=client_credentials',\r\n        {\r\n          headers: {\r\n            'Authorization': `Basic ${auth}`,\r\n            'Content-Type': 'application/x-www-form-urlencoded'\r\n          }\r\n        }\r\n      );\r\n      return response.data.access_token;\r\n    } catch (error) {\r\n      throw new HttpException('PayPal authentication error', HttpStatus.INTERNAL_SERVER_ERROR);\r\n    }\r\n  }\r\n\r\n  async createOrder(amount: number, orderId: number) {\r\n    try {\r\n      console.log('Creating order with:', { amount, orderId }); // Ajoutez ce log\r\n      const accessToken = await this.getAccessToken();\r\n      const order = await this.orderRepository.findOne({\r\n        where: { id_order: orderId }\r\n      });\r\n\r\n      if (!order) {\r\n        throw new HttpException(`Order not found`, HttpStatus.NOT_FOUND);\r\n      }\r\n\r\n      const response = await axios.post(\r\n        `${this.paypalUrl}/v2/checkout/orders`,\r\n        {\r\n          intent: 'CAPTURE',\r\n          purchase_units: [{\r\n            amount: {\r\n              currency_code: 'EUR',\r\n              value: amount.toFixed(2)\r\n            }\r\n          }]\r\n        },\r\n        {\r\n          headers: {\r\n            'Authorization': `Bearer ${accessToken}`,\r\n            'Content-Type': 'application/json'\r\n          }\r\n        }\r\n      );\r\n\r\n      const payment = this.paymentRepository.create({\r\n        order,\r\n        paymentMethod: PaymentMethodEnum.PAYPAL,\r\n        amount,\r\n        paymentStatus: PaymentStatusEnum.PENDING,\r\n        paypalOrderId: response.data.id\r\n      });\r\n\r\n      await this.paymentRepository.save(payment);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Detailed error:', error.response?.data || error); // Log plus détaillé\r\n      throw error;\r\n\r\n    }\r\n  }\r\n\r\n  async capturePayment(orderId: string) {\r\n    try {\r\n      const accessToken = await this.getAccessToken();\r\n      const response = await axios.post(\r\n        `${this.paypalUrl}/v2/checkout/orders/${orderId}/capture`,\r\n        {},\r\n        {\r\n          headers: {\r\n            'Authorization': `Bearer ${accessToken}`,\r\n            'Content-Type': 'application/json'\r\n          }\r\n        }\r\n      );\r\n\r\n      const payment = await this.paymentRepository.findOne({\r\n        where: { paypalOrderId: orderId },\r\n        relations: ['order', 'order.orderDetails', 'order.orderDetails.product']\r\n      });\r\n\r\n      if (payment) {\r\n        payment.paymentStatus = PaymentStatusEnum.COMPLETED;\r\n        payment.order.id_statut = 2;\r\n\r\n        // Mettre à jour le stock\r\n        for (const detail of payment.order.orderDetails) {\r\n          detail.product.stock -= detail.quantity;\r\n          await this.productRepository.save(detail.product);\r\n        }\r\n\r\n        await this.paymentRepository.save(payment);\r\n        await this.orderRepository.save(payment.order);\r\n      }\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new HttpException('Error capturing payment', HttpStatus.INTERNAL_SERVER_ERROR);\r\n    }\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Paypal/paypal.service.ts b/api/src/model/Paypal/paypal.service.ts
--- a/api/src/model/Paypal/paypal.service.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Paypal/paypal.service.ts	(date 1736262015382)
@@ -1,12 +1,15 @@
 // src/model/Paypal/paypal.service.ts
-import { HttpException, HttpStatus, Inject, Injectable } from "@nestjs/common";
-import { ConfigService } from "@nestjs/config";
-import { InjectRepository } from "@nestjs/typeorm";
-import { Repository } from "typeorm";
-import axios from "axios";
-import { Order } from "model/Order/order.entity";
-import { Payment } from "model/Payment/payment.entity";
-import { PaymentMethodEnum, PaymentStatusEnum } from "model/Payment/dto/create-payment.dto";
+import { HttpException, HttpStatus, Inject, Injectable } from '@nestjs/common';
+import { ConfigService } from '@nestjs/config';
+import { InjectRepository } from '@nestjs/typeorm';
+import { Repository } from 'typeorm';
+import axios from 'axios';
+import { Order } from 'model/Order/order.entity';
+import { Payment } from 'model/Payment/payment.entity';
+import {
+  PaymentMethodEnum,
+  PaymentStatusEnum,
+} from 'model/Payment/dto/create-payment.dto';
 import { Product } from '../Product/product.entity';
 
 @Injectable()
@@ -23,7 +26,7 @@
     @InjectRepository(Order)
     private orderRepository: Repository<Order>,
     @InjectRepository(Product)
-    private productRepository: Repository<Product>
+    private productRepository: Repository<Product>,
   ) {
     this.paypalUrl = this.configService.get<string>('PAYPAL_API_URL');
     this.clientId = this.configService.get<string>('PAYPAL_CLIENT_ID');
@@ -32,20 +35,25 @@
 
   async getAccessToken() {
     try {
-      const auth = Buffer.from(`${this.clientId}:${this.clientSecret}`).toString('base64');
+      const auth = Buffer.from(
+        `${this.clientId}:${this.clientSecret}`,
+      ).toString('base64');
       const response = await axios.post(
         `${this.paypalUrl}/v1/oauth2/token`,
         'grant_type=client_credentials',
         {
           headers: {
-            'Authorization': `Basic ${auth}`,
-            'Content-Type': 'application/x-www-form-urlencoded'
-          }
-        }
+            Authorization: `Basic ${auth}`,
+            'Content-Type': 'application/x-www-form-urlencoded',
+          },
+        },
       );
       return response.data.access_token;
     } catch (error) {
-      throw new HttpException('PayPal authentication error', HttpStatus.INTERNAL_SERVER_ERROR);
+      throw new HttpException(
+        'PayPal authentication error',
+        HttpStatus.INTERNAL_SERVER_ERROR,
+      );
     }
   }
 
@@ -54,7 +62,7 @@
       console.log('Creating order with:', { amount, orderId }); // Ajoutez ce log
       const accessToken = await this.getAccessToken();
       const order = await this.orderRepository.findOne({
-        where: { id_order: orderId }
+        where: { id_order: orderId },
       });
 
       if (!order) {
@@ -65,19 +73,21 @@
         `${this.paypalUrl}/v2/checkout/orders`,
         {
           intent: 'CAPTURE',
-          purchase_units: [{
-            amount: {
-              currency_code: 'EUR',
-              value: amount.toFixed(2)
-            }
-          }]
+          purchase_units: [
+            {
+              amount: {
+                currency_code: 'EUR',
+                value: amount.toFixed(2),
+              },
+            },
+          ],
         },
         {
           headers: {
-            'Authorization': `Bearer ${accessToken}`,
-            'Content-Type': 'application/json'
-          }
-        }
+            Authorization: `Bearer ${accessToken}`,
+            'Content-Type': 'application/json',
+          },
+        },
       );
 
       const payment = this.paymentRepository.create({
@@ -85,7 +95,7 @@
         paymentMethod: PaymentMethodEnum.PAYPAL,
         amount,
         paymentStatus: PaymentStatusEnum.PENDING,
-        paypalOrderId: response.data.id
+        paypalOrderId: response.data.id,
       });
 
       await this.paymentRepository.save(payment);
@@ -93,7 +103,6 @@
     } catch (error) {
       console.error('Detailed error:', error.response?.data || error); // Log plus détaillé
       throw error;
-
     }
   }
 
@@ -105,15 +114,19 @@
         {},
         {
           headers: {
-            'Authorization': `Bearer ${accessToken}`,
-            'Content-Type': 'application/json'
-          }
-        }
+            Authorization: `Bearer ${accessToken}`,
+            'Content-Type': 'application/json',
+          },
+        },
       );
 
       const payment = await this.paymentRepository.findOne({
         where: { paypalOrderId: orderId },
-        relations: ['order', 'order.orderDetails', 'order.orderDetails.product']
+        relations: [
+          'order',
+          'order.orderDetails',
+          'order.orderDetails.product',
+        ],
       });
 
       if (payment) {
@@ -132,7 +145,10 @@
 
       return response.data;
     } catch (error) {
-      throw new HttpException('Error capturing payment', HttpStatus.INTERNAL_SERVER_ERROR);
+      throw new HttpException(
+        'Error capturing payment',
+        HttpStatus.INTERNAL_SERVER_ERROR,
+      );
     }
   }
-}
\ No newline at end of file
+}
Index: api/src/model/Client/client.entity.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Entity, PrimaryGeneratedColumn, Column, OneToOne, JoinColumn, OneToMany } from 'typeorm';\r\nimport { User } from '../User/user.entity';\r\nimport { Order } from '../Order/order.entity'; // Corrigé l'import\r\nimport { Appointment } from '../Appointment/appointment.entity';\r\nimport { Cart } from '../Cart/cart.entity';\r\nimport { IsNotEmpty } from 'class-validator';\r\nimport { Credential } from '@feature/security/data/entity/credential.entity';\r\nimport { Prescription } from 'model/Prescription/prescription.entity';\r\n\r\n@Entity('client') // Nom explicite de la table\r\nexport class Client {\r\n  @PrimaryGeneratedColumn()\r\n  @IsNotEmpty()\r\n  clientId: number;\r\n\r\n  @Column()\r\n  @IsNotEmpty()\r\n  address: string;\r\n\r\n  @Column({ nullable: false })\r\n  @IsNotEmpty()\r\n  firstName: string;\r\n\r\n  @Column()\r\n  @IsNotEmpty()\r\n  lastName: string;\r\n\r\n  @OneToOne(() => User, (user) => user.client, { cascade: true })\r\n  @JoinColumn({ name: 'user_id' })\r\n  user: User;\r\n\r\n  @OneToMany(() => Order, (order) => order.client, { cascade: true })\r\n  orders: Order[];\r\n\r\n  @OneToMany(() => Appointment, (appointment) => appointment.client, { cascade: true })\r\n  appointments: Appointment[];\r\n\r\n  @OneToMany(() => Cart, (cart) => cart.client, { cascade: true })\r\n  carts: Cart[];\r\n\r\n  @OneToOne(() => Credential, { cascade: true })\r\n  @JoinColumn({ name: 'credential_id' })\r\n  credential: Credential;\r\n\r\n  @Column({ name: 'credential_id', nullable: true })\r\n  credentialId: string;\r\n  @OneToMany(() => Prescription, prescription => prescription.client)\r\n  prescriptions: Prescription[];\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Client/client.entity.ts b/api/src/model/Client/client.entity.ts
--- a/api/src/model/Client/client.entity.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Client/client.entity.ts	(date 1736262015380)
@@ -1,4 +1,11 @@
-import { Entity, PrimaryGeneratedColumn, Column, OneToOne, JoinColumn, OneToMany } from 'typeorm';
+import {
+  Entity,
+  PrimaryGeneratedColumn,
+  Column,
+  OneToOne,
+  JoinColumn,
+  OneToMany,
+} from 'typeorm';
 import { User } from '../User/user.entity';
 import { Order } from '../Order/order.entity'; // Corrigé l'import
 import { Appointment } from '../Appointment/appointment.entity';
@@ -32,7 +39,9 @@
   @OneToMany(() => Order, (order) => order.client, { cascade: true })
   orders: Order[];
 
-  @OneToMany(() => Appointment, (appointment) => appointment.client, { cascade: true })
+  @OneToMany(() => Appointment, (appointment) => appointment.client, {
+    cascade: true,
+  })
   appointments: Appointment[];
 
   @OneToMany(() => Cart, (cart) => cart.client, { cascade: true })
@@ -44,6 +53,6 @@
 
   @Column({ name: 'credential_id', nullable: true })
   credentialId: string;
-  @OneToMany(() => Prescription, prescription => prescription.client)
+  @OneToMany(() => Prescription, (prescription) => prescription.client)
   prescriptions: Prescription[];
 }
Index: api/src/model/Paypal/paypal.module.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// paypal.module.ts\r\nimport { Module } from '@nestjs/common';\r\nimport { ConfigModule } from '@nestjs/config';\r\nimport { PaypalService } from './paypal.service';\r\n\r\n@Module({\r\n  imports: [\r\n    ConfigModule.forRoot({\r\n      isGlobal: true,\r\n    }),\r\n  ],\r\n  providers: [PaypalService],\r\n  exports: [PaypalService],\r\n})\r\nexport class PaypalModule {}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Paypal/paypal.module.ts b/api/src/model/Paypal/paypal.module.ts
--- a/api/src/model/Paypal/paypal.module.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Paypal/paypal.module.ts	(date 1736262015382)
@@ -12,4 +12,4 @@
   providers: [PaypalService],
   exports: [PaypalService],
 })
-export class PaypalModule {}
\ No newline at end of file
+export class PaypalModule {}
Index: api/src/model/Paypal/paypal.entity.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Entity, PrimaryGeneratedColumn, Column, CreateDateColumn } from 'typeorm';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\n\r\n@Entity('paypal_payment')\r\nexport class PaypalPayment {\r\n\r\n  @ApiProperty({ example: 'PAYPAL-ORDER-123' })\r\n  @PrimaryGeneratedColumn()\r\n  id: number;\r\n\r\n  @ApiProperty()\r\n  @Column()\r\n  orderId: string; // Référence à l'ordre PayPal\r\n\r\n  @ApiProperty({ example: 99.99 })\r\n  @Column('decimal', { precision: 10, scale: 2 })\r\n  amount: number; // Montant payé\r\n\r\n  @ApiProperty({ enum: ['Completed', 'Pending', 'Failed'] })\r\n  @Column()\r\n  status: string; // Statut du paiement: 'Completed', 'Pending', 'Failed'\r\n\r\n  @ApiProperty()\r\n  @CreateDateColumn()\r\n  createdAt: Date; // Date de création du paiement\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Paypal/paypal.entity.ts b/api/src/model/Paypal/paypal.entity.ts
--- a/api/src/model/Paypal/paypal.entity.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Paypal/paypal.entity.ts	(date 1736262015382)
@@ -1,9 +1,13 @@
-import { Entity, PrimaryGeneratedColumn, Column, CreateDateColumn } from 'typeorm';
+import {
+  Entity,
+  PrimaryGeneratedColumn,
+  Column,
+  CreateDateColumn,
+} from 'typeorm';
 import { ApiProperty } from '@nestjs/swagger';
 
 @Entity('paypal_payment')
 export class PaypalPayment {
-
   @ApiProperty({ example: 'PAYPAL-ORDER-123' })
   @PrimaryGeneratedColumn()
   id: number;
Index: api/src/model/Paypal/paypal.controller.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// paypal.controller.ts\r\nimport { Controller, Post, Body, Param, Get } from '@nestjs/common';\r\nimport { PaypalService } from './paypal.service';\r\nimport { ApiBody, ApiOperation, ApiTags } from '@nestjs/swagger';\r\nimport { CreatePaypalOrderDto } from './dto/paypal.dto';\r\nimport { OrderService } from 'model/Order/order.service';\r\n\r\n\r\n@ApiTags('paypal')\r\n\r\n\r\n@Controller('paypal')\r\nexport class PaypalController {\r\n  constructor(\r\n    private paypalService: PaypalService,\r\n    private orderService: OrderService\r\n  ) {}\r\n\r\n  @Post('create-order')\r\n  @ApiOperation({ summary: 'Créer une commande PayPal' })\r\n  @ApiBody({ type: CreatePaypalOrderDto })\r\n  async createOrder(@Body() createOrderDto: CreatePaypalOrderDto) {\r\n    const order = await this.orderService.createOrderFromCart(createOrderDto.clientId);\r\n    return this.paypalService.createOrder(createOrderDto.amount, order.id_order);\r\n  }\r\n\r\n  @Post('capture/:orderId')\r\n  async capturePayment(@Param('orderId') orderId: string) {\r\n    return this.paypalService.capturePayment(orderId);\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Paypal/paypal.controller.ts b/api/src/model/Paypal/paypal.controller.ts
--- a/api/src/model/Paypal/paypal.controller.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Paypal/paypal.controller.ts	(date 1736262015382)
@@ -5,27 +5,29 @@
 import { CreatePaypalOrderDto } from './dto/paypal.dto';
 import { OrderService } from 'model/Order/order.service';
 
-
 @ApiTags('paypal')
-
-
 @Controller('paypal')
 export class PaypalController {
   constructor(
     private paypalService: PaypalService,
-    private orderService: OrderService
+    private orderService: OrderService,
   ) {}
 
   @Post('create-order')
   @ApiOperation({ summary: 'Créer une commande PayPal' })
   @ApiBody({ type: CreatePaypalOrderDto })
   async createOrder(@Body() createOrderDto: CreatePaypalOrderDto) {
-    const order = await this.orderService.createOrderFromCart(createOrderDto.clientId);
-    return this.paypalService.createOrder(createOrderDto.amount, order.id_order);
+    const order = await this.orderService.createOrderFromCart(
+      createOrderDto.clientId,
+    );
+    return this.paypalService.createOrder(
+      createOrderDto.amount,
+      order.id_order,
+    );
   }
 
   @Post('capture/:orderId')
   async capturePayment(@Param('orderId') orderId: string) {
     return this.paypalService.capturePayment(orderId);
   }
-}
\ No newline at end of file
+}
Index: api/src/model/Paypal/dto/paypal.dto.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/Paypal/dto/paypal.dto.ts\r\nimport { ApiProperty } from '@nestjs/swagger';\r\nimport { IsNumber } from 'class-validator';\r\n\r\nexport class CreatePaypalOrderDto {\r\n  @ApiProperty()\r\n  @IsNumber()\r\n  amount: number;\r\n\r\n  @ApiProperty()\r\n  @IsNumber()\r\n  clientId: number;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Paypal/dto/paypal.dto.ts b/api/src/model/Paypal/dto/paypal.dto.ts
--- a/api/src/model/Paypal/dto/paypal.dto.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Paypal/dto/paypal.dto.ts	(date 1736262015382)
@@ -10,4 +10,4 @@
   @ApiProperty()
   @IsNumber()
   clientId: number;
-}
\ No newline at end of file
+}
Index: api/src/model/Paypal/dto/paypal-response.dto.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/Paypal/dto/paypal-response.dto.ts\r\nimport { ApiProperty } from '@nestjs/swagger';\r\nimport { IsString, IsEnum, IsObject, IsArray, ValidateNested } from 'class-validator';\r\nimport { Type } from 'class-transformer';\r\n\r\nexport enum PaypalOrderStatus {\r\n  CREATED = 'CREATED',\r\n  SAVED = 'SAVED',\r\n  APPROVED = 'APPROVED',\r\n  VOIDED = 'VOIDED',\r\n  COMPLETED = 'COMPLETED',\r\n  PAYER_ACTION_REQUIRED = 'PAYER_ACTION_REQUIRED'\r\n}\r\n\r\nclass PaypalAmount {\r\n  @ApiProperty({ example: '99.99' })\r\n  @IsString()\r\n  value: string;\r\n\r\n  @ApiProperty({ example: 'EUR' })\r\n  @IsString()\r\n  currency_code: string;\r\n}\r\n\r\nclass PaypalPurchaseUnit {\r\n  @ApiProperty()\r\n  @IsObject()\r\n  @ValidateNested()\r\n  @Type(() => PaypalAmount)\r\n  amount: PaypalAmount;\r\n\r\n  @ApiProperty({ example: 'ORDER-123' })\r\n  @IsString()\r\n  reference_id?: string;\r\n}\r\n\r\nclass PaypalPayer {\r\n  @ApiProperty({ example: 'client@example.com' })\r\n  @IsString()\r\n  email_address: string;\r\n\r\n  @ApiProperty({ example: 'PAYPAL_USER_ID' })\r\n  @IsString()\r\n  payer_id: string;\r\n\r\n  @ApiProperty()\r\n  @IsObject()\r\n  name?: {\r\n    given_name: string;\r\n    surname: string;\r\n  };\r\n}\r\n\r\nexport class PaypalOrderResponseDto {\r\n  @ApiProperty({ example: 'PAY-1AB23456CD789012EF34GHIJ' })\r\n  @IsString()\r\n  id: string;\r\n\r\n  @ApiProperty({ enum: PaypalOrderStatus })\r\n  @IsEnum(PaypalOrderStatus)\r\n  status: PaypalOrderStatus;\r\n\r\n  @ApiProperty({ type: [PaypalPurchaseUnit] })\r\n  @IsArray()\r\n  @ValidateNested({ each: true })\r\n  @Type(() => PaypalPurchaseUnit)\r\n  purchase_units: PaypalPurchaseUnit[];\r\n\r\n  @ApiProperty()\r\n  @IsObject()\r\n  @ValidateNested()\r\n  @Type(() => PaypalPayer)\r\n  payer?: PaypalPayer;\r\n\r\n  @ApiProperty()\r\n  create_time?: string;\r\n\r\n  @ApiProperty()\r\n  update_time?: string;\r\n\r\n  @ApiProperty({ example: 'https://api.sandbox.paypal.com/v2/checkout/orders/...' })\r\n  @IsString()\r\n  links?: Array<{\r\n    href: string;\r\n    rel: string;\r\n    method: string;\r\n  }>;\r\n}\r\n\r\nexport class PaypalErrorResponse {\r\n  @ApiProperty({ example: 'INVALID_REQUEST' })\r\n  @IsString()\r\n  name: string;\r\n\r\n  @ApiProperty({ example: 'Request is not well-formed' })\r\n  @IsString()\r\n  message: string;\r\n\r\n  @ApiProperty({ example: 'INVALID_REQUEST' })\r\n  @IsString()\r\n  debug_id?: string;\r\n\r\n  @ApiProperty()\r\n  details?: Array<{\r\n    field: string;\r\n    value: string;\r\n    location: string;\r\n    issue: string;\r\n  }>;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Paypal/dto/paypal-response.dto.ts b/api/src/model/Paypal/dto/paypal-response.dto.ts
--- a/api/src/model/Paypal/dto/paypal-response.dto.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Paypal/dto/paypal-response.dto.ts	(date 1736262015382)
@@ -1,6 +1,12 @@
 // src/model/Paypal/dto/paypal-response.dto.ts
 import { ApiProperty } from '@nestjs/swagger';
-import { IsString, IsEnum, IsObject, IsArray, ValidateNested } from 'class-validator';
+import {
+  IsString,
+  IsEnum,
+  IsObject,
+  IsArray,
+  ValidateNested,
+} from 'class-validator';
 import { Type } from 'class-transformer';
 
 export enum PaypalOrderStatus {
@@ -9,7 +15,7 @@
   APPROVED = 'APPROVED',
   VOIDED = 'VOIDED',
   COMPLETED = 'COMPLETED',
-  PAYER_ACTION_REQUIRED = 'PAYER_ACTION_REQUIRED'
+  PAYER_ACTION_REQUIRED = 'PAYER_ACTION_REQUIRED',
 }
 
 class PaypalAmount {
@@ -78,7 +84,9 @@
   @ApiProperty()
   update_time?: string;
 
-  @ApiProperty({ example: 'https://api.sandbox.paypal.com/v2/checkout/orders/...' })
+  @ApiProperty({
+    example: 'https://api.sandbox.paypal.com/v2/checkout/orders/...',
+  })
   @IsString()
   links?: Array<{
     href: string;
@@ -107,4 +115,4 @@
     location: string;
     issue: string;
   }>;
-}
\ No newline at end of file
+}
Index: api/src/model/Paypal/dto/paypal-capture.dto.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/Paypal/dto/paypal-capture.dto.ts\r\nimport { ApiProperty } from '@nestjs/swagger';\r\nimport { IsString } from 'class-validator';\r\n\r\nexport class PaypalCaptureRequestDto {\r\n  @ApiProperty({ example: 'PAY-1AB23456CD789012EF34GHIJ' })\r\n  @IsString()\r\n  orderId: string;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Paypal/dto/paypal-capture.dto.ts b/api/src/model/Paypal/dto/paypal-capture.dto.ts
--- a/api/src/model/Paypal/dto/paypal-capture.dto.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Paypal/dto/paypal-capture.dto.ts	(date 1736262015380)
@@ -6,4 +6,4 @@
   @ApiProperty({ example: 'PAY-1AB23456CD789012EF34GHIJ' })
   @IsString()
   orderId: string;
-}
\ No newline at end of file
+}
Index: api/src/model/Paypal/dto/paypalOrder.dto.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/Payment/dto/paypal-order.dto.ts\r\nimport { IsNumber, IsArray } from 'class-validator';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class PaypalOrderDto {\r\n  @ApiProperty()\r\n  @IsNumber()\r\n  clientId: number;\r\n\r\n  @ApiProperty()\r\n  @IsNumber()\r\n  amount: number;\r\n\r\n  @ApiProperty({ type: 'array' })\r\n  @IsArray()\r\n  cartItems: any[];\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Paypal/dto/paypalOrder.dto.ts b/api/src/model/Paypal/dto/paypalOrder.dto.ts
--- a/api/src/model/Paypal/dto/paypalOrder.dto.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Paypal/dto/paypalOrder.dto.ts	(date 1736262015382)
@@ -14,4 +14,4 @@
   @ApiProperty({ type: 'array' })
   @IsArray()
   cartItems: any[];
-}
\ No newline at end of file
+}
Index: api/src/model/Invoice/invoice.entity.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/Invoice/invoice.entity.ts\r\nimport { Entity, PrimaryGeneratedColumn, Column, ManyToOne, JoinColumn } from 'typeorm';\r\nimport { Order } from '../Order/order.entity';\r\n\r\n@Entity('invoices')\r\nexport class Invoice {\r\n  @PrimaryGeneratedColumn()\r\n  id: number;\r\n\r\n  @ManyToOne(() => Order, (order) => order.invoices)\r\n  @JoinColumn({ name: 'order_id' })\r\n  order: Order;\r\n\r\n  @Column({ type: 'decimal', precision: 10, scale: 2 })\r\n  totalAmount: number; // Montant total de la facture\r\n\r\n  @Column({ type: 'date' })\r\n  issueDate: string; // Date de la facture\r\n\r\n  @Column({ type: 'varchar', length: 255 })\r\n  billingAddress: string; // Adresse de facturation\r\n\r\n  @Column({ type: 'varchar', length: 255, nullable: true })\r\n  paymentStatus: string; // Statut du paiement (ex: \"paid\", \"pending\", \"overdue\")\r\n\r\n  @Column({ type: 'varchar', length: 50 })\r\n  invoiceNumber: string; // Numéro de la facture\r\n\r\n  @Column({ type: 'varchar', length: 255 })\r\n  clientName: string; // Nom du client\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Invoice/invoice.entity.ts b/api/src/model/Invoice/invoice.entity.ts
--- a/api/src/model/Invoice/invoice.entity.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Invoice/invoice.entity.ts	(date 1736262015380)
@@ -1,5 +1,11 @@
 // src/model/Invoice/invoice.entity.ts
-import { Entity, PrimaryGeneratedColumn, Column, ManyToOne, JoinColumn } from 'typeorm';
+import {
+  Entity,
+  PrimaryGeneratedColumn,
+  Column,
+  ManyToOne,
+  JoinColumn,
+} from 'typeorm';
 import { Order } from '../Order/order.entity';
 
 @Entity('invoices')
Index: api/src/model/Invoice/invoice.module.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/modules/invoice.module.ts\r\n// src/model/Invoice/invoice.module.ts\r\nimport { Module } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { Invoice } from './invoice.entity';\r\nimport { Order } from '../Order/order.entity';\r\n\r\n@Module({\r\n  imports: [TypeOrmModule.forFeature([Invoice, Order])],\r\n  controllers: [], // Ajoutez votre controller si nécessaire\r\n  providers: [], // Ajoutez votre service si nécessaire\r\n  exports: []\r\n})\r\nexport class InvoiceModule {}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Invoice/invoice.module.ts b/api/src/model/Invoice/invoice.module.ts
--- a/api/src/model/Invoice/invoice.module.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Invoice/invoice.module.ts	(date 1736262015380)
@@ -9,6 +9,6 @@
   imports: [TypeOrmModule.forFeature([Invoice, Order])],
   controllers: [], // Ajoutez votre controller si nécessaire
   providers: [], // Ajoutez votre service si nécessaire
-  exports: []
+  exports: [],
 })
 export class InvoiceModule {}
Index: api/src/model/Invoice/invoice.controller.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/controllers/invoice.controller.ts\r\nimport { Controller, Get, Post, Body, Param, Put, Delete } from '@nestjs/common';\r\nimport { InvoiceService } from './invoice.service';\r\nimport { CreateInvoiceDto } from './dto/create-invoice.dto';\r\nimport { UpdateInvoiceDto } from './dto/update-invoice.dto';\r\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\r\n\r\n@ApiTags('invoices')\r\n@ApiBearerAuth('access-token')\r\n@Controller('invoices')\r\nexport class InvoiceController {\r\n  constructor(private readonly invoiceService: InvoiceService) {}\r\n\r\n  @Post()\r\n  create(@Body() createInvoiceDto: CreateInvoiceDto) {\r\n    return this.invoiceService.create(createInvoiceDto);\r\n  }\r\n\r\n  @Get()\r\n  findAll() {\r\n    return this.invoiceService.findAll();\r\n  }\r\n\r\n  @Get(':id')\r\n  findOne(@Param('id') id: string) {\r\n    return this.invoiceService.findOne(+id);\r\n  }\r\n\r\n  @Put(':id')\r\n  update(@Param('id') id: string, @Body() updateInvoiceDto: UpdateInvoiceDto) {\r\n    return this.invoiceService.update(+id, updateInvoiceDto);\r\n  }\r\n\r\n  @Delete(':id')\r\n  remove(@Param('id') id: string) {\r\n    return this.invoiceService.remove(+id);\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Invoice/invoice.controller.ts b/api/src/model/Invoice/invoice.controller.ts
--- a/api/src/model/Invoice/invoice.controller.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Invoice/invoice.controller.ts	(date 1736262015380)
@@ -1,5 +1,13 @@
 // src/controllers/invoice.controller.ts
-import { Controller, Get, Post, Body, Param, Put, Delete } from '@nestjs/common';
+import {
+  Controller,
+  Get,
+  Post,
+  Body,
+  Param,
+  Put,
+  Delete,
+} from '@nestjs/common';
 import { InvoiceService } from './invoice.service';
 import { CreateInvoiceDto } from './dto/create-invoice.dto';
 import { UpdateInvoiceDto } from './dto/update-invoice.dto';
Index: api/src/model/Payment/payment.controller.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/Payment/payment.controller.ts\r\nimport { Controller, Post, Put, Body, Param, HttpException, HttpStatus } from '@nestjs/common';\r\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\r\nimport { PaymentService } from './payment.service';\r\nimport { PaypalService } from '../Paypal/paypal.service';\r\nimport { OrderService } from '../Order/order.service';\r\n\r\nimport { PaymentStatusEnum } from './dto/create-payment.dto';\r\nimport { PaypalOrderDto } from 'model/Paypal/dto/paypalOrder.dto';\r\n\r\n@ApiTags('payments')\r\n@Controller('payments')\r\nexport class PaymentController {\r\n  constructor(\r\n    private readonly paymentService: PaymentService,\r\n    private readonly paypalService: PaypalService,\r\n    private readonly orderService: OrderService\r\n  ) {}\r\n\r\n  @Post('paypal/create')\r\n  @ApiOperation({ summary: 'Créer un ordre PayPal' })\r\n  @Post('paypal/create')\r\n  async createPaypalOrder(@Body() data: { amount: number, clientId: number }) {\r\n    try {\r\n      const order = await this.orderService.createOrderFromCart(data.clientId);\r\n      return await this.paypalService.createOrder(data.amount, order.id_order);\r\n    } catch (error) {\r\n      console.error('PayPal create order error:', error);\r\n      throw new HttpException(error.message, HttpStatus.BAD_REQUEST);\r\n    }\r\n  }\r\n\r\n  @Post('paypal/capture/:orderId')\r\n  @ApiOperation({ summary: 'Capturer un paiement PayPal' })\r\n  async capturePayment(@Param('orderId') orderId: string) {\r\n    try {\r\n      const result = await this.paypalService.capturePayment(orderId);\r\n      console.log('Capture result:', result);\r\n      return result;\r\n    } catch (error) {\r\n      console.error('Capture error:', error);\r\n      throw new HttpException('Erreur lors de la capture', HttpStatus.BAD_REQUEST);\r\n    }\r\n  }\r\n\r\n\r\n  @Put('paypal/status/:orderId')\r\n  @ApiOperation({ summary: 'Mettre à jour le statut d\\'un paiement' })\r\n  async updatePaymentStatus(\r\n    @Param('orderId') orderId: string,\r\n    @Body('status') status: PaymentStatusEnum\r\n  ) {\r\n    try {\r\n      return await this.paymentService.updatePaymentStatus(orderId, status);\r\n    } catch (error) {\r\n      throw new HttpException(\r\n        'Erreur lors de la mise à jour du statut',\r\n        HttpStatus.INTERNAL_SERVER_ERROR\r\n      );\r\n    }\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Payment/payment.controller.ts b/api/src/model/Payment/payment.controller.ts
--- a/api/src/model/Payment/payment.controller.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Payment/payment.controller.ts	(date 1736262015380)
@@ -1,5 +1,13 @@
 // src/model/Payment/payment.controller.ts
-import { Controller, Post, Put, Body, Param, HttpException, HttpStatus } from '@nestjs/common';
+import {
+  Controller,
+  Post,
+  Put,
+  Body,
+  Param,
+  HttpException,
+  HttpStatus,
+} from '@nestjs/common';
 import { ApiOperation, ApiTags } from '@nestjs/swagger';
 import { PaymentService } from './payment.service';
 import { PaypalService } from '../Paypal/paypal.service';
@@ -14,13 +22,13 @@
   constructor(
     private readonly paymentService: PaymentService,
     private readonly paypalService: PaypalService,
-    private readonly orderService: OrderService
+    private readonly orderService: OrderService,
   ) {}
 
   @Post('paypal/create')
   @ApiOperation({ summary: 'Créer un ordre PayPal' })
   @Post('paypal/create')
-  async createPaypalOrder(@Body() data: { amount: number, clientId: number }) {
+  async createPaypalOrder(@Body() data: { amount: number; clientId: number }) {
     try {
       const order = await this.orderService.createOrderFromCart(data.clientId);
       return await this.paypalService.createOrder(data.amount, order.id_order);
@@ -39,24 +47,26 @@
       return result;
     } catch (error) {
       console.error('Capture error:', error);
-      throw new HttpException('Erreur lors de la capture', HttpStatus.BAD_REQUEST);
+      throw new HttpException(
+        'Erreur lors de la capture',
+        HttpStatus.BAD_REQUEST,
+      );
     }
   }
-
 
   @Put('paypal/status/:orderId')
-  @ApiOperation({ summary: 'Mettre à jour le statut d\'un paiement' })
+  @ApiOperation({ summary: "Mettre à jour le statut d'un paiement" })
   async updatePaymentStatus(
     @Param('orderId') orderId: string,
-    @Body('status') status: PaymentStatusEnum
+    @Body('status') status: PaymentStatusEnum,
   ) {
     try {
       return await this.paymentService.updatePaymentStatus(orderId, status);
     } catch (error) {
       throw new HttpException(
         'Erreur lors de la mise à jour du statut',
-        HttpStatus.INTERNAL_SERVER_ERROR
+        HttpStatus.INTERNAL_SERVER_ERROR,
       );
     }
   }
-}
\ No newline at end of file
+}
Index: api/src/model/Invoice/invoice.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/services/invoice.service.ts\r\nimport { Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { Invoice } from './invoice.entity';\r\nimport { CreateInvoiceDto } from './dto/create-invoice.dto';\r\nimport { UpdateInvoiceDto } from './dto/update-invoice.dto';\r\n\r\n\r\n@Injectable()\r\nexport class InvoiceService {\r\n  constructor(\r\n    @InjectRepository(Invoice)\r\n    private readonly invoiceRepository: Repository<Invoice>,\r\n  ) {}\r\n\r\n  async create(createInvoiceDto: CreateInvoiceDto): Promise<Invoice> {\r\n    const invoice = this.invoiceRepository.create(createInvoiceDto);\r\n    return this.invoiceRepository.save(invoice);\r\n  }\r\n\r\n  async findAll(): Promise<Invoice[]> {\r\n    return this.invoiceRepository.find({ relations: ['order'] });\r\n  }\r\n\r\n  async findOne(id: number): Promise<Invoice> {\r\n    const invoice = await this.invoiceRepository.findOne({\r\n      where: { id },\r\n      relations: ['order'],\r\n    });\r\n    if (!invoice) {\r\n      throw new NotFoundException(`Invoice with ID ${id} not found`);\r\n    }\r\n    return invoice;\r\n  }\r\n\r\n  async update(id: number, updateInvoiceDto: UpdateInvoiceDto): Promise<Invoice> {\r\n    const invoice = await this.findOne(id);\r\n    Object.assign(invoice, updateInvoiceDto);\r\n    return this.invoiceRepository.save(invoice);\r\n  }\r\n\r\n  async remove(id: number): Promise<void> {\r\n    const invoice = await this.findOne(id);\r\n    await this.invoiceRepository.remove(invoice);\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Invoice/invoice.service.ts b/api/src/model/Invoice/invoice.service.ts
--- a/api/src/model/Invoice/invoice.service.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Invoice/invoice.service.ts	(date 1736262015380)
@@ -6,7 +6,6 @@
 import { CreateInvoiceDto } from './dto/create-invoice.dto';
 import { UpdateInvoiceDto } from './dto/update-invoice.dto';
 
-
 @Injectable()
 export class InvoiceService {
   constructor(
@@ -34,7 +33,10 @@
     return invoice;
   }
 
-  async update(id: number, updateInvoiceDto: UpdateInvoiceDto): Promise<Invoice> {
+  async update(
+    id: number,
+    updateInvoiceDto: UpdateInvoiceDto,
+  ): Promise<Invoice> {
     const invoice = await this.findOne(id);
     Object.assign(invoice, updateInvoiceDto);
     return this.invoiceRepository.save(invoice);
Index: api/src/model/Payment/payment.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/Payment/payment.service.ts\r\nimport { HttpException, HttpStatus, Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { Payment } from './payment.entity';\r\nimport { CreatePaymentDto, PaymentMethodEnum, PaymentStatusEnum } from './dto/create-payment.dto';\r\nimport { UpdatePaymentDto } from './dto/update-payment.dto';\r\nimport { Order } from '../Order/order.entity';\r\nimport { PaypalService } from 'model/Paypal/paypal.service';\r\nimport { OrderStatus } from 'model/OrderStatus/dto/order-status.enum';\r\nimport { OrderStatusEntity } from 'model/OrderStatus/orderStatus.entity';\r\n\r\n\r\n@Injectable()\r\nexport class PaymentService {\r\n  constructor(\r\n    @InjectRepository(Payment)\r\n    private readonly paymentRepository: Repository<Payment>,\r\n    @InjectRepository(Order)\r\n    private readonly orderRepository: Repository<Order>,\r\n    @InjectRepository(OrderStatusEntity)\r\n    private readonly orderStatusRepository: Repository<OrderStatusEntity>,\r\n    private readonly paypalService: PaypalService\r\n  ) {}\r\n\r\n  async createOrder(amount: number, orderId: number): Promise<Payment> {\r\n    const order = await this.orderRepository.findOne({\r\n      where: { id_order: orderId },\r\n    });\r\n\r\n    if (!order) {\r\n      throw new NotFoundException(`Order with ID ${orderId} not found`);\r\n    }\r\n\r\n    const paypalOrder = await this.paypalService.createOrder(amount, orderId);\r\n\r\n    const payment = new Payment();\r\n    payment.amount = amount;\r\n    payment.paymentMethod = PaymentMethodEnum.PAYPAL;\r\n    payment.paymentStatus = PaymentStatusEnum.PENDING;\r\n    payment.order = order;\r\n    payment.paypalOrderId = paypalOrder.id;\r\n\r\n    return this.paymentRepository.save(payment);\r\n  }\r\n\r\n  async updatePaymentStatus(orderId: string, status: PaymentStatusEnum) {\r\n    try {\r\n      const payment = await this.paymentRepository.findOne({\r\n        where: { paypalOrderId: orderId },\r\n        relations: ['order']\r\n      });\r\n\r\n      if (!payment) throw new NotFoundException();\r\n\r\n      payment.paymentStatus = status;\r\n      payment.order.id_statut = 5; // Statut PAID\r\n\r\n      await this.paymentRepository.save(payment);\r\n      await this.orderRepository.save(payment.order);\r\n\r\n      return payment;\r\n    } catch (error) {\r\n      throw new HttpException('Error updating status', HttpStatus.INTERNAL_SERVER_ERROR);\r\n    }\r\n  }\r\n\r\n\r\n\r\n  async findAll(): Promise<Payment[]> {\r\n    return this.paymentRepository.find({\r\n      relations: ['order']\r\n    });\r\n  }\r\n\r\n  async findOne(id: number): Promise<Payment> {\r\n    const payment = await this.paymentRepository.findOne({\r\n      where: { id_payment: id },\r\n      relations: ['order']\r\n    });\r\n\r\n    if (!payment) {\r\n      throw new NotFoundException(`Payment with ID ${id} not found`);\r\n    }\r\n\r\n    return payment;\r\n  }\r\n\r\n  async update(id: number, updatePaymentDto: UpdatePaymentDto): Promise<Payment> {\r\n    const payment = await this.findOne(id);\r\n\r\n    if (updatePaymentDto.orderId) {\r\n      const order = await this.orderRepository.findOne({\r\n        where: { id_order: updatePaymentDto.orderId }\r\n      });\r\n\r\n      if (!order) {\r\n        throw new NotFoundException(`Order with ID ${updatePaymentDto.orderId} not found`);\r\n      }\r\n\r\n      payment.order = order;\r\n    }\r\n\r\n    // Mise à jour des autres propriétés\r\n    Object.assign(payment, {\r\n      paymentMethod: updatePaymentDto.paymentMethod ?? payment.paymentMethod,\r\n      amount: updatePaymentDto.amount ?? payment.amount,\r\n      paymentStatus: updatePaymentDto.paymentStatus ?? payment.paymentStatus\r\n    });\r\n\r\n    return this.paymentRepository.save(payment);\r\n  }\r\n\r\n  async remove(id: number): Promise<void> {\r\n    const payment = await this.findOne(id);\r\n    await this.paymentRepository.remove(payment);\r\n  }\r\n  async capturePayment(orderId: string): Promise<any> {\r\n    // Ajoutez votre logique ici pour capturer le paiement\r\n    // Exemple : appeler une API externe ou effectuer une opération dans la base de données\r\n    return { success: true, orderId };\r\n  }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Payment/payment.service.ts b/api/src/model/Payment/payment.service.ts
--- a/api/src/model/Payment/payment.service.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Payment/payment.service.ts	(date 1736262015380)
@@ -1,16 +1,24 @@
 // src/model/Payment/payment.service.ts
-import { HttpException, HttpStatus, Injectable, NotFoundException } from '@nestjs/common';
+import {
+  HttpException,
+  HttpStatus,
+  Injectable,
+  NotFoundException,
+} from '@nestjs/common';
 import { InjectRepository } from '@nestjs/typeorm';
 import { Repository } from 'typeorm';
 import { Payment } from './payment.entity';
-import { CreatePaymentDto, PaymentMethodEnum, PaymentStatusEnum } from './dto/create-payment.dto';
+import {
+  CreatePaymentDto,
+  PaymentMethodEnum,
+  PaymentStatusEnum,
+} from './dto/create-payment.dto';
 import { UpdatePaymentDto } from './dto/update-payment.dto';
 import { Order } from '../Order/order.entity';
 import { PaypalService } from 'model/Paypal/paypal.service';
 import { OrderStatus } from 'model/OrderStatus/dto/order-status.enum';
 import { OrderStatusEntity } from 'model/OrderStatus/orderStatus.entity';
 
-
 @Injectable()
 export class PaymentService {
   constructor(
@@ -20,7 +28,7 @@
     private readonly orderRepository: Repository<Order>,
     @InjectRepository(OrderStatusEntity)
     private readonly orderStatusRepository: Repository<OrderStatusEntity>,
-    private readonly paypalService: PaypalService
+    private readonly paypalService: PaypalService,
   ) {}
 
   async createOrder(amount: number, orderId: number): Promise<Payment> {
@@ -48,7 +56,7 @@
     try {
       const payment = await this.paymentRepository.findOne({
         where: { paypalOrderId: orderId },
-        relations: ['order']
+        relations: ['order'],
       });
 
       if (!payment) throw new NotFoundException();
@@ -61,22 +69,23 @@
 
       return payment;
     } catch (error) {
-      throw new HttpException('Error updating status', HttpStatus.INTERNAL_SERVER_ERROR);
+      throw new HttpException(
+        'Error updating status',
+        HttpStatus.INTERNAL_SERVER_ERROR,
+      );
     }
   }
-
-
 
   async findAll(): Promise<Payment[]> {
     return this.paymentRepository.find({
-      relations: ['order']
+      relations: ['order'],
     });
   }
 
   async findOne(id: number): Promise<Payment> {
     const payment = await this.paymentRepository.findOne({
       where: { id_payment: id },
-      relations: ['order']
+      relations: ['order'],
     });
 
     if (!payment) {
@@ -86,16 +95,21 @@
     return payment;
   }
 
-  async update(id: number, updatePaymentDto: UpdatePaymentDto): Promise<Payment> {
+  async update(
+    id: number,
+    updatePaymentDto: UpdatePaymentDto,
+  ): Promise<Payment> {
     const payment = await this.findOne(id);
 
     if (updatePaymentDto.orderId) {
       const order = await this.orderRepository.findOne({
-        where: { id_order: updatePaymentDto.orderId }
+        where: { id_order: updatePaymentDto.orderId },
       });
 
       if (!order) {
-        throw new NotFoundException(`Order with ID ${updatePaymentDto.orderId} not found`);
+        throw new NotFoundException(
+          `Order with ID ${updatePaymentDto.orderId} not found`,
+        );
       }
 
       payment.order = order;
@@ -105,7 +119,7 @@
     Object.assign(payment, {
       paymentMethod: updatePaymentDto.paymentMethod ?? payment.paymentMethod,
       amount: updatePaymentDto.amount ?? payment.amount,
-      paymentStatus: updatePaymentDto.paymentStatus ?? payment.paymentStatus
+      paymentStatus: updatePaymentDto.paymentStatus ?? payment.paymentStatus,
     });
 
     return this.paymentRepository.save(payment);
@@ -120,6 +134,4 @@
     // Exemple : appeler une API externe ou effectuer une opération dans la base de données
     return { success: true, orderId };
   }
-
-
-}
\ No newline at end of file
+}
Index: api/src/model/Payment/payment.entity.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// payment.entity.ts\r\nimport { Entity, PrimaryGeneratedColumn, Column, ManyToOne, CreateDateColumn, JoinColumn } from 'typeorm';\r\nimport { Order } from '../Order/order.entity';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\nimport { PaymentMethodEnum, PaymentStatusEnum } from './dto/create-payment.dto';\r\n\r\n@Entity('payment')\r\nexport class Payment {\r\n  @ApiProperty()\r\n  @PrimaryGeneratedColumn()\r\n  id_payment: number;\r\n\r\n  @ApiProperty()\r\n  @ManyToOne(() => Order, (order) => order.payments, { nullable: false })\r\n  @JoinColumn({ name: 'order_id' })\r\n  order: Order;\r\n\r\n  @ApiProperty({ enum: PaymentMethodEnum })\r\n  @Column({\r\n    type: 'enum',\r\n    enum: PaymentMethodEnum,\r\n    default: PaymentMethodEnum.PAYPAL\r\n  })\r\n  paymentMethod: PaymentMethodEnum;\r\n\r\n  @ApiProperty()\r\n  @Column('decimal', { precision: 10, scale: 2 })\r\n  amount: number;\r\n\r\n  @ApiProperty({ enum: PaymentStatusEnum })\r\n  @Column({\r\n    type: 'enum',\r\n    enum: PaymentStatusEnum,\r\n    default: PaymentStatusEnum.PENDING\r\n  })\r\n  paymentStatus: PaymentStatusEnum;\r\n\r\n  @ApiProperty()\r\n  @CreateDateColumn()\r\n  paymentDate: Date;\r\n\r\n  @ApiProperty()\r\n  @Column({ nullable: true })\r\n  paypalOrderId: string;\r\n\r\n  @ApiProperty()\r\n  @Column({ nullable: true })\r\n  transactionId: string;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Payment/payment.entity.ts b/api/src/model/Payment/payment.entity.ts
--- a/api/src/model/Payment/payment.entity.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Payment/payment.entity.ts	(date 1736262015380)
@@ -1,5 +1,12 @@
 // payment.entity.ts
-import { Entity, PrimaryGeneratedColumn, Column, ManyToOne, CreateDateColumn, JoinColumn } from 'typeorm';
+import {
+  Entity,
+  PrimaryGeneratedColumn,
+  Column,
+  ManyToOne,
+  CreateDateColumn,
+  JoinColumn,
+} from 'typeorm';
 import { Order } from '../Order/order.entity';
 import { ApiProperty } from '@nestjs/swagger';
 import { PaymentMethodEnum, PaymentStatusEnum } from './dto/create-payment.dto';
@@ -19,7 +26,7 @@
   @Column({
     type: 'enum',
     enum: PaymentMethodEnum,
-    default: PaymentMethodEnum.PAYPAL
+    default: PaymentMethodEnum.PAYPAL,
   })
   paymentMethod: PaymentMethodEnum;
 
@@ -31,7 +38,7 @@
   @Column({
     type: 'enum',
     enum: PaymentStatusEnum,
-    default: PaymentStatusEnum.PENDING
+    default: PaymentStatusEnum.PENDING,
   })
   paymentStatus: PaymentStatusEnum;
 
@@ -46,4 +53,4 @@
   @ApiProperty()
   @Column({ nullable: true })
   transactionId: string;
-}
\ No newline at end of file
+}
Index: api/src/model/Payment/payment.module.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/Payment/payment.module.ts\r\nimport { Module } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { ConfigModule } from '@nestjs/config';\r\nimport { PaymentController } from './payment.controller';\r\nimport { PaymentService } from './payment.service';\r\nimport { PaypalService } from '../Paypal/paypal.service';\r\nimport { OrderService } from '../Order/order.service';\r\nimport { Payment } from './payment.entity';\r\nimport { Order } from '../Order/order.entity';\r\nimport { OrderStatusEntity } from '../OrderStatus/orderStatus.entity';\r\nimport { OrderDetail } from '../Order/OrderDetail/order-detail.entity';\r\nimport { Cart } from '../Cart/cart.entity';\r\nimport { Product } from '../Product/product.entity';\r\nimport { Client } from '../Client/client.entity';\r\n\r\n@Module({\r\n  imports: [\r\n    ConfigModule.forRoot({\r\n      isGlobal: true\r\n    }),\r\n    TypeOrmModule.forFeature([\r\n      Payment,\r\n      Order,\r\n      OrderStatusEntity,\r\n      OrderDetail,\r\n      Cart,\r\n      Product,\r\n      Client\r\n    ])\r\n  ],\r\n  controllers: [PaymentController],\r\n  providers: [PaymentService, PaypalService, OrderService],\r\n  exports: [PaymentService]\r\n})\r\nexport class PaymentModule {}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Payment/payment.module.ts b/api/src/model/Payment/payment.module.ts
--- a/api/src/model/Payment/payment.module.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Payment/payment.module.ts	(date 1736262015380)
@@ -17,7 +17,7 @@
 @Module({
   imports: [
     ConfigModule.forRoot({
-      isGlobal: true
+      isGlobal: true,
     }),
     TypeOrmModule.forFeature([
       Payment,
@@ -26,11 +26,11 @@
       OrderDetail,
       Cart,
       Product,
-      Client
-    ])
+      Client,
+    ]),
   ],
   controllers: [PaymentController],
   providers: [PaymentService, PaypalService, OrderService],
-  exports: [PaymentService]
+  exports: [PaymentService],
 })
-export class PaymentModule {}
\ No newline at end of file
+export class PaymentModule {}
Index: api/src/model/Product/product.controller.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/Product/product.controller.ts\r\nimport { Controller, Post, Body, Get, Put, Delete, Param, NotFoundException } from '@nestjs/common';\r\nimport { ProductService } from './product.service';\r\nimport { CreateProductDto } from './dto/create-product.dto';\r\nimport { UpdateProductDto } from './dto/update-product.dto';\r\nimport { ApiTags } from '@nestjs/swagger';\r\n@ApiTags('products')\r\n@Controller('products')\r\nexport class ProductController {\r\n  constructor(private readonly productService: ProductService) {}\r\n\r\n  // Créer un nouveau produit\r\n  @Post()\r\n  async create(@Body() createProductDto: CreateProductDto) {\r\n    return this.productService.create(createProductDto);\r\n  }\r\n\r\n  // Récupérer tous les produits\r\n  @Get()\r\n  async findAll() {\r\n    return this.productService.findAll();\r\n  }\r\n\r\n  // Récupérer un produit par son ID\r\n  @Get(':id')\r\n  async findOne(@Param('id') id: string) {\r\n    return this.productService.findOne(Number(id));\r\n  }\r\n\r\n  // Mettre à jour un produit\r\n  @Put(':id')\r\n  async update(@Param('id') id: string, @Body() updateProductDto: UpdateProductDto) {\r\n    return this.productService.update(Number(id), updateProductDto);\r\n  }\r\n\r\n  // Supprimer un produit\r\n  @Delete(':id')\r\n  async remove(@Param('id') id: string) {\r\n    return this.productService.remove(Number(id));\r\n  }\r\n\r\n  // Appliquer une promotion à un produit\r\n  @Post(':id/apply-promotion')\r\n  async applyPromotion(\r\n    @Param('id') id: string,\r\n    @Body() data: { promotionId: number }\r\n  ) {\r\n    return this.productService.applyPromotion(Number(id), data.promotionId);\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Product/product.controller.ts b/api/src/model/Product/product.controller.ts
--- a/api/src/model/Product/product.controller.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Product/product.controller.ts	(date 1736262015382)
@@ -1,5 +1,14 @@
 // src/model/Product/product.controller.ts
-import { Controller, Post, Body, Get, Put, Delete, Param, NotFoundException } from '@nestjs/common';
+import {
+  Controller,
+  Post,
+  Body,
+  Get,
+  Put,
+  Delete,
+  Param,
+  NotFoundException,
+} from '@nestjs/common';
 import { ProductService } from './product.service';
 import { CreateProductDto } from './dto/create-product.dto';
 import { UpdateProductDto } from './dto/update-product.dto';
@@ -29,7 +38,10 @@
 
   // Mettre à jour un produit
   @Put(':id')
-  async update(@Param('id') id: string, @Body() updateProductDto: UpdateProductDto) {
+  async update(
+    @Param('id') id: string,
+    @Body() updateProductDto: UpdateProductDto,
+  ) {
     return this.productService.update(Number(id), updateProductDto);
   }
 
@@ -43,8 +55,8 @@
   @Post(':id/apply-promotion')
   async applyPromotion(
     @Param('id') id: string,
-    @Body() data: { promotionId: number }
+    @Body() data: { promotionId: number },
   ) {
     return this.productService.applyPromotion(Number(id), data.promotionId);
   }
-}
\ No newline at end of file
+}
Index: api/src/model/Payment/dto/update-payment.dto.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/Payment/dto/update-payment.dto.ts\r\nimport { PartialType } from '@nestjs/mapped-types';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\nimport { CreatePaymentDto } from './create-payment.dto';\r\n\r\nexport class UpdatePaymentDto extends PartialType(CreatePaymentDto) {\r\n  // Pas besoin d'ajouter des décorateurs ici car PartialType les copie\r\n  // automatiquement depuis CreatePaymentDto en les rendant optionnels\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Payment/dto/update-payment.dto.ts b/api/src/model/Payment/dto/update-payment.dto.ts
--- a/api/src/model/Payment/dto/update-payment.dto.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Payment/dto/update-payment.dto.ts	(date 1736262015380)
@@ -6,4 +6,4 @@
 export class UpdatePaymentDto extends PartialType(CreatePaymentDto) {
   // Pas besoin d'ajouter des décorateurs ici car PartialType les copie
   // automatiquement depuis CreatePaymentDto en les rendant optionnels
-}
\ No newline at end of file
+}
Index: api/src/model/Payment/dto/create-payment.dto.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/Payment/dto/create-payment.dto.ts\r\nimport { IsNotEmpty, IsNumber, IsEnum, Min, IsOptional, IsString, MaxLength, Matches } from 'class-validator';\r\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\r\n\r\nexport enum PaymentMethodEnum {\r\n  PAYPAL = 'PayPal',\r\n  BANCONTACT = 'Bancontact',\r\n  CREDIT_CARD = 'Credit Card',\r\n  BANK_TRANSFER = 'Bank Transfer'\r\n}\r\n\r\nexport enum PaymentStatusEnum {\r\n  PENDING = 'PENDING',\r\n  PROCESSING = 'PROCESSING',\r\n  COMPLETED = 'COMPLETED',\r\n  FAILED = 'FAILED',\r\n  CANCELLED = 'CANCELLED',\r\n  REFUNDED = 'REFUNDED'\r\n}\r\n\r\nexport class CreatePaymentDto {\r\n  @ApiProperty({\r\n    description: 'ID de la commande associée au paiement',\r\n    example: 1,\r\n    required: true,\r\n    type: Number\r\n  })\r\n  @ApiProperty()\r\n  @IsNumber({}, { message: 'L\\'ID de la commande doit être un nombre.' })\r\n  @IsNotEmpty({ message: 'L\\'ID de la commande est requis.' })\r\n  @Min(1, { message: 'L\\'ID de la commande doit être supérieur à 0.' })\r\n  orderId: number;\r\n\r\n  @ApiProperty({\r\n    description: 'Méthode de paiement',\r\n    enum: PaymentMethodEnum,\r\n    example: PaymentMethodEnum.PAYPAL,\r\n    required: true\r\n  })\r\n  @ApiProperty()\r\n  @IsEnum(PaymentMethodEnum, {\r\n    message: `La méthode de paiement doit être l'une des suivantes: ${Object.values(PaymentMethodEnum).join(', ')}`\r\n  })\r\n  @ApiProperty()\r\n  @IsNotEmpty({ message: 'La méthode de paiement est requise.' })\r\n  paymentMethod: PaymentMethodEnum;\r\n\r\n  @ApiProperty({\r\n    description: 'Montant du paiement en euros',\r\n    example: 99.99,\r\n    required: true,\r\n    type: Number,\r\n    minimum: 0\r\n  })\r\n  @ApiProperty()\r\n  @IsNumber(\r\n    { maxDecimalPlaces: 2 },\r\n    { message: 'Le montant doit être un nombre avec maximum 2 décimales.' }\r\n  )\r\n  @ApiProperty()\r\n  @IsNotEmpty({ message: 'Le montant est requis.' })\r\n  @Min(0.01, { message: 'Le montant doit être supérieur à 0.' })\r\n  amount: number;\r\n\r\n  @ApiProperty({\r\n    description: 'Statut du paiement',\r\n    enum: PaymentStatusEnum,\r\n    example: PaymentStatusEnum.PENDING,\r\n    required: true\r\n  })\r\n  @ApiProperty()\r\n  @IsEnum(PaymentStatusEnum, {\r\n    message: `Le statut doit être l'un des suivants: ${Object.values(PaymentStatusEnum).join(', ')}`\r\n  })\r\n  @ApiProperty()\r\n  @IsNotEmpty({ message: 'Le statut du paiement est requis.' })\r\n  paymentStatus: PaymentStatusEnum;\r\n  @ApiProperty()\r\n  @ApiPropertyOptional({\r\n    description: 'ID de transaction PayPal',\r\n    example: 'PAY-1AB23456CD789012EF34GHIJ',\r\n    maxLength: 50\r\n  })\r\n  @ApiProperty()\r\n  @IsOptional()\r\n  @IsString({ message: 'L\\'ID PayPal doit être une chaîne de caractères.' })\r\n  @MaxLength(50, { message: 'L\\'ID PayPal ne peut pas dépasser 50 caractères.' })\r\n  @Matches(/^[A-Za-z0-9\\-_]+$/, {\r\n    message: 'L\\'ID PayPal ne peut contenir que des lettres, chiffres, tirets et underscores.'\r\n  })\r\n  paypalOrderId?: string;\r\n\r\n  @ApiPropertyOptional({\r\n    description: 'ID de transaction interne',\r\n    example: 'TXN-123456789',\r\n    maxLength: 30\r\n  })\r\n  @ApiProperty()\r\n  @IsOptional()\r\n  @IsString({ message: 'L\\'ID de transaction doit être une chaîne de caractères.' })\r\n  @MaxLength(30, { message: 'L\\'ID de transaction ne peut pas dépasser 30 caractères.' })\r\n  @Matches(/^[A-Za-z0-9\\-]+$/, {\r\n    message: 'L\\'ID de transaction ne peut contenir que des lettres, chiffres et tirets.'\r\n  })\r\n  transactionId?: string;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Payment/dto/create-payment.dto.ts b/api/src/model/Payment/dto/create-payment.dto.ts
--- a/api/src/model/Payment/dto/create-payment.dto.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Payment/dto/create-payment.dto.ts	(date 1736262015380)
@@ -1,12 +1,21 @@
 // src/model/Payment/dto/create-payment.dto.ts
-import { IsNotEmpty, IsNumber, IsEnum, Min, IsOptional, IsString, MaxLength, Matches } from 'class-validator';
+import {
+  IsNotEmpty,
+  IsNumber,
+  IsEnum,
+  Min,
+  IsOptional,
+  IsString,
+  MaxLength,
+  Matches,
+} from 'class-validator';
 import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';
 
 export enum PaymentMethodEnum {
   PAYPAL = 'PayPal',
   BANCONTACT = 'Bancontact',
   CREDIT_CARD = 'Credit Card',
-  BANK_TRANSFER = 'Bank Transfer'
+  BANK_TRANSFER = 'Bank Transfer',
 }
 
 export enum PaymentStatusEnum {
@@ -15,7 +24,7 @@
   COMPLETED = 'COMPLETED',
   FAILED = 'FAILED',
   CANCELLED = 'CANCELLED',
-  REFUNDED = 'REFUNDED'
+  REFUNDED = 'REFUNDED',
 }
 
 export class CreatePaymentDto {
@@ -23,23 +32,23 @@
     description: 'ID de la commande associée au paiement',
     example: 1,
     required: true,
-    type: Number
+    type: Number,
   })
   @ApiProperty()
-  @IsNumber({}, { message: 'L\'ID de la commande doit être un nombre.' })
-  @IsNotEmpty({ message: 'L\'ID de la commande est requis.' })
-  @Min(1, { message: 'L\'ID de la commande doit être supérieur à 0.' })
+  @IsNumber({}, { message: "L'ID de la commande doit être un nombre." })
+  @IsNotEmpty({ message: "L'ID de la commande est requis." })
+  @Min(1, { message: "L'ID de la commande doit être supérieur à 0." })
   orderId: number;
 
   @ApiProperty({
     description: 'Méthode de paiement',
     enum: PaymentMethodEnum,
     example: PaymentMethodEnum.PAYPAL,
-    required: true
+    required: true,
   })
   @ApiProperty()
   @IsEnum(PaymentMethodEnum, {
-    message: `La méthode de paiement doit être l'une des suivantes: ${Object.values(PaymentMethodEnum).join(', ')}`
+    message: `La méthode de paiement doit être l'une des suivantes: ${Object.values(PaymentMethodEnum).join(', ')}`,
   })
   @ApiProperty()
   @IsNotEmpty({ message: 'La méthode de paiement est requise.' })
@@ -50,12 +59,12 @@
     example: 99.99,
     required: true,
     type: Number,
-    minimum: 0
+    minimum: 0,
   })
   @ApiProperty()
   @IsNumber(
     { maxDecimalPlaces: 2 },
-    { message: 'Le montant doit être un nombre avec maximum 2 décimales.' }
+    { message: 'Le montant doit être un nombre avec maximum 2 décimales.' },
   )
   @ApiProperty()
   @IsNotEmpty({ message: 'Le montant est requis.' })
@@ -66,11 +75,11 @@
     description: 'Statut du paiement',
     enum: PaymentStatusEnum,
     example: PaymentStatusEnum.PENDING,
-    required: true
+    required: true,
   })
   @ApiProperty()
   @IsEnum(PaymentStatusEnum, {
-    message: `Le statut doit être l'un des suivants: ${Object.values(PaymentStatusEnum).join(', ')}`
+    message: `Le statut doit être l'un des suivants: ${Object.values(PaymentStatusEnum).join(', ')}`,
   })
   @ApiProperty()
   @IsNotEmpty({ message: 'Le statut du paiement est requis.' })
@@ -79,28 +88,34 @@
   @ApiPropertyOptional({
     description: 'ID de transaction PayPal',
     example: 'PAY-1AB23456CD789012EF34GHIJ',
-    maxLength: 50
+    maxLength: 50,
   })
   @ApiProperty()
   @IsOptional()
-  @IsString({ message: 'L\'ID PayPal doit être une chaîne de caractères.' })
-  @MaxLength(50, { message: 'L\'ID PayPal ne peut pas dépasser 50 caractères.' })
+  @IsString({ message: "L'ID PayPal doit être une chaîne de caractères." })
+  @MaxLength(50, { message: "L'ID PayPal ne peut pas dépasser 50 caractères." })
   @Matches(/^[A-Za-z0-9\-_]+$/, {
-    message: 'L\'ID PayPal ne peut contenir que des lettres, chiffres, tirets et underscores.'
+    message:
+      "L'ID PayPal ne peut contenir que des lettres, chiffres, tirets et underscores.",
   })
   paypalOrderId?: string;
 
   @ApiPropertyOptional({
     description: 'ID de transaction interne',
     example: 'TXN-123456789',
-    maxLength: 30
+    maxLength: 30,
   })
   @ApiProperty()
   @IsOptional()
-  @IsString({ message: 'L\'ID de transaction doit être une chaîne de caractères.' })
-  @MaxLength(30, { message: 'L\'ID de transaction ne peut pas dépasser 30 caractères.' })
+  @IsString({
+    message: "L'ID de transaction doit être une chaîne de caractères.",
+  })
+  @MaxLength(30, {
+    message: "L'ID de transaction ne peut pas dépasser 30 caractères.",
+  })
   @Matches(/^[A-Za-z0-9\-]+$/, {
-    message: 'L\'ID de transaction ne peut contenir que des lettres, chiffres et tirets.'
+    message:
+      "L'ID de transaction ne peut contenir que des lettres, chiffres et tirets.",
   })
   transactionId?: string;
 }
Index: api/src/model/Product/product.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/Product/product.service.ts\r\nimport { BadRequestException, Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { Product } from './product.entity';\r\nimport { Type } from '../Type/type.entity';\r\nimport { Promotion } from '../Promotion/promotion.entity';\r\nimport { CreateProductDto } from './dto/create-product.dto';\r\nimport { UpdateProductDto } from './dto/update-product.dto';\r\n\r\n@Injectable()\r\nexport class ProductService {\r\n  constructor(\r\n    @InjectRepository(Product)\r\n    private readonly productRepository: Repository<Product>,\r\n    @InjectRepository(Type)\r\n    private readonly typeRepository: Repository<Type>,\r\n    @InjectRepository(Promotion)\r\n    private readonly promotionRepository: Repository<Promotion>\r\n  ) {}\r\n\r\n  // Créer un nouveau produit\r\n  async create(createProductDto: CreateProductDto): Promise<Product> {\r\n    // Vérifier si le type existe\r\n    const type = await this.typeRepository.findOne({\r\n      where: { id_type: createProductDto.typeId }\r\n    });\r\n\r\n    if (!type) {\r\n      throw new NotFoundException('Type not found');\r\n    }\r\n\r\n    // Créer et sauvegarder le produit\r\n    const product = this.productRepository.create({\r\n      ...createProductDto,\r\n      type\r\n    });\r\n    return this.productRepository.save(product);\r\n  }\r\n\r\n  // Récupérer tous les produits avec leurs relations\r\n  async findAll(): Promise<Product[]> {\r\n    return this.productRepository.find({\r\n      relations: ['type', 'promotion']\r\n    });\r\n  }\r\n\r\n  // Récupérer un produit par son ID\r\n  async findOne(id: number) {\r\n    if (!id || isNaN(id)) {\r\n      throw new BadRequestException('ID produit invalide');\r\n    }\r\n\r\n    const product = await this.productRepository\r\n      .createQueryBuilder('product')\r\n      .leftJoinAndSelect('product.productPromotions', 'productPromotions')\r\n      .leftJoinAndSelect('productPromotions.promotion', 'promotion')\r\n      .where('product.id_product = :id', { id })\r\n      .getOne();\r\n\r\n    if (!product) {\r\n      throw new NotFoundException(`Produit #${id} non trouvé`);\r\n    }\r\n\r\n    return product;\r\n  }\r\n\r\n  // Mettre à jour un produit\r\n  async update(id: number, updateProductDto: UpdateProductDto): Promise<Product> {\r\n    // Vérifier si le produit existe\r\n    const product = await this.findOne(id);\r\n\r\n    // Si un nouveau type est spécifié, le vérifier\r\n    if (updateProductDto.typeId) {\r\n      const type = await this.typeRepository.findOne({\r\n        where: { id_type: updateProductDto.typeId }\r\n      });\r\n      if (!type) {\r\n        throw new NotFoundException('Type not found');\r\n      }\r\n      product.type = type;\r\n    }\r\n\r\n    // Mettre à jour et sauvegarder\r\n    Object.assign(product, updateProductDto);\r\n    return this.productRepository.save(product);\r\n  }\r\n\r\n  // Supprimer un produit\r\n  async remove(id: number): Promise<void> {\r\n    const product = await this.findOne(id);\r\n    await this.productRepository.remove(product);\r\n  }\r\n\r\n  // Appliquer une promotion à un produit\r\n  async applyPromotion(productId: number, promotionId: number): Promise<Product> {\r\n    // Vérifier si le produit existe\r\n    const product = await this.findOne(productId);\r\n\r\n    // Vérifier si la promotion existe\r\n    const promotion = await this.promotionRepository.findOne({\r\n      where: { id_promotion: promotionId }\r\n    });\r\n\r\n    if (!promotion) {\r\n      throw new NotFoundException(`Promotion with ID ${promotionId} not found`);\r\n    }\r\n\r\n    // Appliquer la promotion et sauvegarder\r\n    product.promotion = promotion;\r\n    return this.productRepository.save(product);\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Product/product.service.ts b/api/src/model/Product/product.service.ts
--- a/api/src/model/Product/product.service.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Product/product.service.ts	(date 1736262015382)
@@ -1,5 +1,9 @@
 // src/model/Product/product.service.ts
-import { BadRequestException, Injectable, NotFoundException } from '@nestjs/common';
+import {
+  BadRequestException,
+  Injectable,
+  NotFoundException,
+} from '@nestjs/common';
 import { InjectRepository } from '@nestjs/typeorm';
 import { Repository } from 'typeorm';
 import { Product } from './product.entity';
@@ -16,14 +20,14 @@
     @InjectRepository(Type)
     private readonly typeRepository: Repository<Type>,
     @InjectRepository(Promotion)
-    private readonly promotionRepository: Repository<Promotion>
+    private readonly promotionRepository: Repository<Promotion>,
   ) {}
 
   // Créer un nouveau produit
   async create(createProductDto: CreateProductDto): Promise<Product> {
     // Vérifier si le type existe
     const type = await this.typeRepository.findOne({
-      where: { id_type: createProductDto.typeId }
+      where: { id_type: createProductDto.typeId },
     });
 
     if (!type) {
@@ -33,7 +37,7 @@
     // Créer et sauvegarder le produit
     const product = this.productRepository.create({
       ...createProductDto,
-      type
+      type,
     });
     return this.productRepository.save(product);
   }
@@ -41,7 +45,7 @@
   // Récupérer tous les produits avec leurs relations
   async findAll(): Promise<Product[]> {
     return this.productRepository.find({
-      relations: ['type', 'promotion']
+      relations: ['type', 'promotion'],
     });
   }
 
@@ -66,14 +70,17 @@
   }
 
   // Mettre à jour un produit
-  async update(id: number, updateProductDto: UpdateProductDto): Promise<Product> {
+  async update(
+    id: number,
+    updateProductDto: UpdateProductDto,
+  ): Promise<Product> {
     // Vérifier si le produit existe
     const product = await this.findOne(id);
 
     // Si un nouveau type est spécifié, le vérifier
     if (updateProductDto.typeId) {
       const type = await this.typeRepository.findOne({
-        where: { id_type: updateProductDto.typeId }
+        where: { id_type: updateProductDto.typeId },
       });
       if (!type) {
         throw new NotFoundException('Type not found');
@@ -93,13 +100,16 @@
   }
 
   // Appliquer une promotion à un produit
-  async applyPromotion(productId: number, promotionId: number): Promise<Product> {
+  async applyPromotion(
+    productId: number,
+    promotionId: number,
+  ): Promise<Product> {
     // Vérifier si le produit existe
     const product = await this.findOne(productId);
 
     // Vérifier si la promotion existe
     const promotion = await this.promotionRepository.findOne({
-      where: { id_promotion: promotionId }
+      where: { id_promotion: promotionId },
     });
 
     if (!promotion) {
@@ -110,4 +120,4 @@
     product.promotion = promotion;
     return this.productRepository.save(product);
   }
-}
\ No newline at end of file
+}
Index: api/src/model/Product/dto/create-product.dto.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/dto/create-product.dto.ts\r\nimport { IsNotEmpty } from 'class-validator';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class CreateProductDto {\r\n  @IsNotEmpty()\r\n  @ApiProperty()\r\n  name: string;\r\n  @IsNotEmpty()\r\n  @ApiProperty()\r\n  description: string;\r\n  @IsNotEmpty()\r\n  @ApiProperty()\r\n  stock: number\r\n  @IsNotEmpty()\r\n  @ApiProperty()\r\n  price: number;\r\n  @IsNotEmpty()\r\n  @ApiProperty()\r\n  active: boolean;\r\n  @IsNotEmpty()\r\n  @ApiProperty()\r\n  typeId: number;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Product/dto/create-product.dto.ts b/api/src/model/Product/dto/create-product.dto.ts
--- a/api/src/model/Product/dto/create-product.dto.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Product/dto/create-product.dto.ts	(date 1736262015382)
@@ -11,7 +11,7 @@
   description: string;
   @IsNotEmpty()
   @ApiProperty()
-  stock: number
+  stock: number;
   @IsNotEmpty()
   @ApiProperty()
   price: number;
Index: api/src/model/Product/product.module.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/Product/product.module.ts\r\nimport { Module } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { ProductController } from './product.controller';\r\nimport { ProductService } from './product.service';\r\nimport { Product } from './product.entity';\r\nimport { Type } from '../Type/type.entity';\r\nimport { Promotion } from '../Promotion/promotion.entity';\r\nimport { PromotionModule } from '../Promotion/promotion.module';\r\nimport { TypeModule } from '../Type/type.module';\r\n\r\n@Module({\r\n  imports: [\r\n    TypeOrmModule.forFeature([Product, Type, Promotion]),\r\n    PromotionModule,\r\n    TypeModule\r\n  ],\r\n  controllers: [ProductController],\r\n  providers: [ProductService],\r\n  exports: [ProductService]\r\n})\r\nexport class ProductModule {}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Product/product.module.ts b/api/src/model/Product/product.module.ts
--- a/api/src/model/Product/product.module.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Product/product.module.ts	(date 1736262015382)
@@ -13,10 +13,10 @@
   imports: [
     TypeOrmModule.forFeature([Product, Type, Promotion]),
     PromotionModule,
-    TypeModule
+    TypeModule,
   ],
   controllers: [ProductController],
   providers: [ProductService],
-  exports: [ProductService]
+  exports: [ProductService],
 })
-export class ProductModule {}
\ No newline at end of file
+export class ProductModule {}
Index: api/src/model/Product/product.entity.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Entity, PrimaryGeneratedColumn, Column, ManyToOne, OneToMany, BeforeUpdate, ManyToMany, JoinTable } from 'typeorm';\r\nimport { Type } from '../Type/type.entity';\r\nimport { Cart } from '../Cart/cart.entity';\r\nimport { ProductPromotion } from 'model/ProductPromotion/productPromotion.entity';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\nimport { OrderDetail } from 'model/Order/OrderDetail/order-detail.entity';\r\nimport { Promotion } from '../Promotion/promotion.entity'; // Import de Promotion\r\n\r\n@Entity('product')\r\nexport class Product {\r\n  @PrimaryGeneratedColumn()\r\n  id_product: number;\r\n\r\n  @Column()\r\n  name: string; // Nom du produit\r\n\r\n  @Column()\r\n  description: string; // Description du produit\r\n\r\n  @Column()\r\n  stock: number; // Quantité en stock\r\n\r\n  @Column('decimal')\r\n  price: number; // Prix du produit\r\n\r\n  @Column({ default: true })\r\n  active: boolean; // Si le produit est actif ou non\r\n\r\n  @ManyToOne(() => Type, (type) => type.products)\r\n  type: Type; // Clé étrangère vers le type de produit\r\n\r\n  @OneToMany(() => Cart, (cart) => cart.product)\r\n  carts: Cart[]; // Relation avec Cart\r\n\r\n  @OneToMany(() => OrderDetail, (orderDetail) => orderDetail.product)\r\n  orderDetails: OrderDetail[]; // Un produit peut avoir plusieurs détails de commande\r\n\r\n  @OneToMany(() => ProductPromotion, (productPromotion) => productPromotion.product)\r\n  productPromotions: ProductPromotion[];\r\n\r\n  @ManyToOne(() => Promotion, { nullable: true }) // Relation avec Promotion (nullable)\r\n  promotion: Promotion | null; // Promotion appliquée, s'il y en a une\r\n  @Column({ default: false })\r\n  @ApiProperty()\r\n  requiresPrescription: boolean;\r\n  @BeforeUpdate()\r\n  validateStock() {\r\n    if (this.stock < 0) {\r\n      throw new Error('Le stock ne peut pas être négatif');\r\n\r\n    }\r\n  }\r\n\r\n  @ManyToMany(() => Promotion)\r\n  @JoinTable({\r\n    name: 'product_promotion',\r\n    joinColumn: { name: 'product_id', referencedColumnName: 'id_product' },\r\n    inverseJoinColumn: { name: 'promotion_id', referencedColumnName: 'id_promotion' }\r\n  })\r\n  promotions: Promotion[];\r\n\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Product/product.entity.ts b/api/src/model/Product/product.entity.ts
--- a/api/src/model/Product/product.entity.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Product/product.entity.ts	(date 1736262015382)
@@ -1,4 +1,13 @@
-import { Entity, PrimaryGeneratedColumn, Column, ManyToOne, OneToMany, BeforeUpdate, ManyToMany, JoinTable } from 'typeorm';
+import {
+  Entity,
+  PrimaryGeneratedColumn,
+  Column,
+  ManyToOne,
+  OneToMany,
+  BeforeUpdate,
+  ManyToMany,
+  JoinTable,
+} from 'typeorm';
 import { Type } from '../Type/type.entity';
 import { Cart } from '../Cart/cart.entity';
 import { ProductPromotion } from 'model/ProductPromotion/productPromotion.entity';
@@ -35,7 +44,10 @@
   @OneToMany(() => OrderDetail, (orderDetail) => orderDetail.product)
   orderDetails: OrderDetail[]; // Un produit peut avoir plusieurs détails de commande
 
-  @OneToMany(() => ProductPromotion, (productPromotion) => productPromotion.product)
+  @OneToMany(
+    () => ProductPromotion,
+    (productPromotion) => productPromotion.product,
+  )
   productPromotions: ProductPromotion[];
 
   @ManyToOne(() => Promotion, { nullable: true }) // Relation avec Promotion (nullable)
@@ -47,7 +59,6 @@
   validateStock() {
     if (this.stock < 0) {
       throw new Error('Le stock ne peut pas être négatif');
-
     }
   }
 
@@ -55,10 +66,10 @@
   @JoinTable({
     name: 'product_promotion',
     joinColumn: { name: 'product_id', referencedColumnName: 'id_product' },
-    inverseJoinColumn: { name: 'promotion_id', referencedColumnName: 'id_promotion' }
+    inverseJoinColumn: {
+      name: 'promotion_id',
+      referencedColumnName: 'id_promotion',
+    },
   })
   promotions: Promotion[];
-
-
 }
-
Index: api/src/model/Product/dto/update-product.dto.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/Product/dto/update-product.dto.ts\r\nimport { IsOptional, IsNumber, IsString, IsBoolean } from 'class-validator';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class UpdateProductDto {\r\n  @IsOptional()\r\n  @IsString()\r\n  @ApiProperty()\r\n  name?: string;\r\n  @ApiProperty()\r\n  @IsOptional()\r\n  @IsString()\r\n  description?: string;\r\n  @ApiProperty()\r\n  @IsOptional()\r\n  @IsNumber()\r\n  stock?: number;\r\n  @ApiProperty()\r\n  @IsOptional()\r\n  @IsNumber()\r\n  price?: number;\r\n  @ApiProperty()\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  active?: boolean;\r\n  @ApiProperty()\r\n  @IsOptional()\r\n  @IsNumber()\r\n  typeId?: number;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Product/dto/update-product.dto.ts b/api/src/model/Product/dto/update-product.dto.ts
--- a/api/src/model/Product/dto/update-product.dto.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Product/dto/update-product.dto.ts	(date 1736262015382)
@@ -27,4 +27,4 @@
   @IsOptional()
   @IsNumber()
   typeId?: number;
-}
\ No newline at end of file
+}
Index: api/src/model/Service/service.entity.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/Service/service.entity.ts\r\nimport { Entity, PrimaryGeneratedColumn, Column, OneToMany } from 'typeorm';\r\nimport { Appointment } from '../Appointment/appointment.entity';\r\n\r\n@Entity()\r\nexport class Service {\r\n  @PrimaryGeneratedColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  name: string;\r\n\r\n  @Column()\r\n  description: string;\r\n\r\n  @Column('decimal', { precision: 10, scale: 2 })\r\n  price: number;\r\n\r\n  @Column()\r\n  duration: string;\r\n\r\n  @OneToMany(() => Appointment, (appointment) => appointment.service)\r\n  appointments: Appointment[];\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Service/service.entity.ts b/api/src/model/Service/service.entity.ts
--- a/api/src/model/Service/service.entity.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Service/service.entity.ts	(date 1736262015382)
@@ -21,4 +21,4 @@
 
   @OneToMany(() => Appointment, (appointment) => appointment.service)
   appointments: Appointment[];
-}
\ No newline at end of file
+}
Index: api/src/model/Service/dto/create-service.dto.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/Service/dto/create-service.dto.ts\r\nimport { IsNotEmpty, IsString, IsNumber } from 'class-validator';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class CreateServiceDto {\r\n  @IsNotEmpty()\r\n  @IsString()\r\n  @ApiProperty()\r\n  name: string;\r\n\r\n  @IsNotEmpty()\r\n  @IsNumber()\r\n  @ApiProperty()\r\n  price: number;\r\n\r\n  @IsNotEmpty()\r\n  @IsString()\r\n  @ApiProperty()\r\n  description: string;\r\n\r\n  @IsNotEmpty()\r\n  @IsString()\r\n  @ApiProperty()\r\n  duration: string;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Service/dto/create-service.dto.ts b/api/src/model/Service/dto/create-service.dto.ts
--- a/api/src/model/Service/dto/create-service.dto.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Service/dto/create-service.dto.ts	(date 1736262015382)
@@ -22,4 +22,4 @@
   @IsString()
   @ApiProperty()
   duration: string;
-}
\ No newline at end of file
+}
Index: api/src/model/Service/dto/update-service.dto.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/Service/dto/update-service.dto.ts\r\nimport { PartialType } from '@nestjs/mapped-types';\r\nimport { CreateServiceDto } from './create-service.dto';\r\n\r\nexport class UpdateServiceDto extends PartialType(CreateServiceDto) {}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Service/dto/update-service.dto.ts b/api/src/model/Service/dto/update-service.dto.ts
--- a/api/src/model/Service/dto/update-service.dto.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Service/dto/update-service.dto.ts	(date 1736262015382)
@@ -2,4 +2,4 @@
 import { PartialType } from '@nestjs/mapped-types';
 import { CreateServiceDto } from './create-service.dto';
 
-export class UpdateServiceDto extends PartialType(CreateServiceDto) {}
\ No newline at end of file
+export class UpdateServiceDto extends PartialType(CreateServiceDto) {}
Index: api/src/model/Service/service.controller.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/Service/service.controller.ts\r\nimport {\r\n  Controller,\r\n  Get,\r\n  Post,\r\n  Body,\r\n  Param,\r\n  Put,\r\n  Delete,\r\n  ParseIntPipe,\r\n  HttpStatus,\r\n  HttpException,\r\n  NotFoundException\r\n} from '@nestjs/common';\r\nimport { ServiceService } from './service.service';\r\nimport { CreateServiceDto } from './dto/create-service.dto';\r\nimport { UpdateServiceDto } from './dto/update-service.dto';\r\nimport { ApiTags, ApiBearerAuth } from '@nestjs/swagger';\r\n\r\n@ApiTags('services')\r\n@ApiBearerAuth('access-token')\r\n@Controller('services')\r\nexport class ServiceController {\r\n  constructor(private readonly serviceService: ServiceService) {}\r\n\r\n  @Post()\r\n  async create(@Body() createServiceDto: CreateServiceDto) {\r\n    try {\r\n      return await this.serviceService.create(createServiceDto);\r\n    } catch (error) {\r\n      console.error('Error creating service:', error);\r\n      throw new HttpException('Error creating service', HttpStatus.INTERNAL_SERVER_ERROR);\r\n    }\r\n  }\r\n\r\n  @Get()\r\n  async findAll() {\r\n    try {\r\n      return await this.serviceService.findAll();\r\n    } catch (error) {\r\n      console.error('Error fetching services:', error);\r\n      throw new HttpException('Error fetching services', HttpStatus.INTERNAL_SERVER_ERROR);\r\n    }\r\n  }\r\n\r\n  @Get(':id')\r\n  async findOne(@Param('id', ParseIntPipe) id: number) {\r\n    try {\r\n      return await this.serviceService.findOne(id);\r\n    } catch (error) {\r\n      if (error instanceof NotFoundException) {\r\n        throw error;\r\n      }\r\n      throw new HttpException('Error fetching service', HttpStatus.INTERNAL_SERVER_ERROR);\r\n    }\r\n  }\r\n\r\n  @Put(':id')\r\n  async update(\r\n    @Param('id', ParseIntPipe) id: number,\r\n    @Body() updateServiceDto: UpdateServiceDto\r\n  ) {\r\n    try {\r\n      return await this.serviceService.update(id, updateServiceDto);\r\n    } catch (error) {\r\n      console.error('Error updating service:', error);\r\n      if (error instanceof NotFoundException) {\r\n        throw error;\r\n      }\r\n      throw new HttpException('Error updating service', HttpStatus.INTERNAL_SERVER_ERROR);\r\n    }\r\n  }\r\n\r\n  @Delete(':id')\r\n  async remove(@Param('id', ParseIntPipe) id: number) {\r\n    try {\r\n      await this.serviceService.remove(id);\r\n      return { message: 'Service successfully deleted' };\r\n    } catch (error) {\r\n      if (error.code === '23503') {\r\n        throw new HttpException(\r\n          'Ce service ne peut pas être supprimé car il est lié à des rendez-vous',\r\n          HttpStatus.CONFLICT\r\n        );\r\n      }\r\n      throw new HttpException('Error deleting service', HttpStatus.INTERNAL_SERVER_ERROR);\r\n    }\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Service/service.controller.ts b/api/src/model/Service/service.controller.ts
--- a/api/src/model/Service/service.controller.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Service/service.controller.ts	(date 1736262015382)
@@ -10,7 +10,7 @@
   ParseIntPipe,
   HttpStatus,
   HttpException,
-  NotFoundException
+  NotFoundException,
 } from '@nestjs/common';
 import { ServiceService } from './service.service';
 import { CreateServiceDto } from './dto/create-service.dto';
@@ -29,7 +29,10 @@
       return await this.serviceService.create(createServiceDto);
     } catch (error) {
       console.error('Error creating service:', error);
-      throw new HttpException('Error creating service', HttpStatus.INTERNAL_SERVER_ERROR);
+      throw new HttpException(
+        'Error creating service',
+        HttpStatus.INTERNAL_SERVER_ERROR,
+      );
     }
   }
 
@@ -39,7 +42,10 @@
       return await this.serviceService.findAll();
     } catch (error) {
       console.error('Error fetching services:', error);
-      throw new HttpException('Error fetching services', HttpStatus.INTERNAL_SERVER_ERROR);
+      throw new HttpException(
+        'Error fetching services',
+        HttpStatus.INTERNAL_SERVER_ERROR,
+      );
     }
   }
 
@@ -51,14 +57,17 @@
       if (error instanceof NotFoundException) {
         throw error;
       }
-      throw new HttpException('Error fetching service', HttpStatus.INTERNAL_SERVER_ERROR);
+      throw new HttpException(
+        'Error fetching service',
+        HttpStatus.INTERNAL_SERVER_ERROR,
+      );
     }
   }
 
   @Put(':id')
   async update(
     @Param('id', ParseIntPipe) id: number,
-    @Body() updateServiceDto: UpdateServiceDto
+    @Body() updateServiceDto: UpdateServiceDto,
   ) {
     try {
       return await this.serviceService.update(id, updateServiceDto);
@@ -67,7 +76,10 @@
       if (error instanceof NotFoundException) {
         throw error;
       }
-      throw new HttpException('Error updating service', HttpStatus.INTERNAL_SERVER_ERROR);
+      throw new HttpException(
+        'Error updating service',
+        HttpStatus.INTERNAL_SERVER_ERROR,
+      );
     }
   }
 
@@ -80,10 +92,13 @@
       if (error.code === '23503') {
         throw new HttpException(
           'Ce service ne peut pas être supprimé car il est lié à des rendez-vous',
-          HttpStatus.CONFLICT
+          HttpStatus.CONFLICT,
         );
       }
-      throw new HttpException('Error deleting service', HttpStatus.INTERNAL_SERVER_ERROR);
-    }
-  }
-}
\ No newline at end of file
+      throw new HttpException(
+        'Error deleting service',
+        HttpStatus.INTERNAL_SERVER_ERROR,
+      );
+    }
+  }
+}
Index: api/src/model/Service/service.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/Service/service.service.ts\r\nimport { Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { Service } from './service.entity';\r\nimport { CreateServiceDto } from 'model/Service/dto/create-service.dto';\r\nimport { UpdateServiceDto } from './dto/update-service.dto';\r\n\r\n@Injectable()\r\nexport class ServiceService {\r\n  constructor(\r\n    @InjectRepository(Service)\r\n    private readonly serviceRepository: Repository<Service>,\r\n  ) {}\r\n\r\n  async create(createServiceDto: CreateServiceDto): Promise<Service> {\r\n    const service = this.serviceRepository.create(createServiceDto);\r\n    return await this.serviceRepository.save(service);\r\n  }\r\n\r\n  async findAll(): Promise<Service[]> {\r\n    return await this.serviceRepository.find();\r\n  }\r\n\r\n  async findOne(id: number): Promise<Service> {\r\n    const service = await this.serviceRepository.findOne({\r\n      where: { id: id }\r\n    });\r\n\r\n    if (!service) {\r\n      throw new NotFoundException(`Service #${id} not found`);\r\n    }\r\n\r\n    return service;\r\n  }\r\n\r\n  async update(id: number, updateServiceDto: UpdateServiceDto): Promise<Service> {\r\n    const service = await this.findOne(id);\r\n\r\n    // Mise à jour des propriétés\r\n    Object.assign(service, updateServiceDto);\r\n\r\n    try {\r\n      return await this.serviceRepository.save(service);\r\n    } catch (error) {\r\n      console.error('Error updating service:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async remove(id: number): Promise<void> {\r\n    const service = await this.findOne(id);\r\n    await this.serviceRepository.remove(service);\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Service/service.service.ts b/api/src/model/Service/service.service.ts
--- a/api/src/model/Service/service.service.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Service/service.service.ts	(date 1736262015382)
@@ -24,7 +24,7 @@
 
   async findOne(id: number): Promise<Service> {
     const service = await this.serviceRepository.findOne({
-      where: { id: id }
+      where: { id: id },
     });
 
     if (!service) {
@@ -34,7 +34,10 @@
     return service;
   }
 
-  async update(id: number, updateServiceDto: UpdateServiceDto): Promise<Service> {
+  async update(
+    id: number,
+    updateServiceDto: UpdateServiceDto,
+  ): Promise<Service> {
     const service = await this.findOne(id);
 
     // Mise à jour des propriétés
@@ -52,4 +55,4 @@
     const service = await this.findOne(id);
     await this.serviceRepository.remove(service);
   }
-}
\ No newline at end of file
+}
Index: api/src/model/Promotion/promotion.entity.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { ProductPromotion } from 'model/ProductPromotion/productPromotion.entity';\r\nimport { Entity, PrimaryGeneratedColumn, Column, OneToMany, CreateDateColumn, UpdateDateColumn } from 'typeorm';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\n\r\n@Entity('promotion')\r\nexport class Promotion {\r\n  @ApiProperty({ description: 'Identifiant unique de la promotion' })\r\n  @PrimaryGeneratedColumn()\r\n  id_promotion: number;\r\n\r\n  @ApiProperty({ description: 'Description de la promotion' })\r\n  @Column({\r\n    length: 255,\r\n    nullable: false\r\n  })\r\n  description: string;\r\n\r\n  @ApiProperty({ description: 'Date de début de la promotion' })\r\n  @Column({\r\n    type: 'timestamp',\r\n    nullable: false\r\n  })\r\n  startDate: Date;\r\n\r\n  @ApiProperty({ description: 'Date de fin de la promotion' })\r\n  @Column({\r\n    type: 'timestamp',\r\n    nullable: false\r\n  })\r\n  endDate: Date;\r\n\r\n  @ApiProperty({\r\n    description: 'Pourcentage de réduction',\r\n    minimum: 0,\r\n    maximum: 100\r\n  })\r\n  @Column({\r\n    type: 'int',\r\n    nullable: false\r\n  })\r\n  discountPercentage: number;\r\n\r\n  @ApiProperty({ description: 'Relations avec les produits en promotion' })\r\n  @OneToMany(\r\n    () => ProductPromotion,\r\n    (productPromotion) => productPromotion.promotion,\r\n    {\r\n      cascade: true\r\n    }\r\n  )\r\n  productPromotions: ProductPromotion[];\r\n\r\n  @ApiProperty({ description: 'Date de création de la promotion' })\r\n  @CreateDateColumn()\r\n  createdAt: Date;\r\n\r\n  @ApiProperty({ description: 'Date de dernière modification de la promotion' })\r\n  @UpdateDateColumn()\r\n  updatedAt: Date;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Promotion/promotion.entity.ts b/api/src/model/Promotion/promotion.entity.ts
--- a/api/src/model/Promotion/promotion.entity.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Promotion/promotion.entity.ts	(date 1736262015382)
@@ -1,5 +1,12 @@
 import { ProductPromotion } from 'model/ProductPromotion/productPromotion.entity';
-import { Entity, PrimaryGeneratedColumn, Column, OneToMany, CreateDateColumn, UpdateDateColumn } from 'typeorm';
+import {
+  Entity,
+  PrimaryGeneratedColumn,
+  Column,
+  OneToMany,
+  CreateDateColumn,
+  UpdateDateColumn,
+} from 'typeorm';
 import { ApiProperty } from '@nestjs/swagger';
 
 @Entity('promotion')
@@ -11,32 +18,32 @@
   @ApiProperty({ description: 'Description de la promotion' })
   @Column({
     length: 255,
-    nullable: false
+    nullable: false,
   })
   description: string;
 
   @ApiProperty({ description: 'Date de début de la promotion' })
   @Column({
     type: 'timestamp',
-    nullable: false
+    nullable: false,
   })
   startDate: Date;
 
   @ApiProperty({ description: 'Date de fin de la promotion' })
   @Column({
     type: 'timestamp',
-    nullable: false
+    nullable: false,
   })
   endDate: Date;
 
   @ApiProperty({
     description: 'Pourcentage de réduction',
     minimum: 0,
-    maximum: 100
+    maximum: 100,
   })
   @Column({
     type: 'int',
-    nullable: false
+    nullable: false,
   })
   discountPercentage: number;
 
@@ -45,8 +52,8 @@
     () => ProductPromotion,
     (productPromotion) => productPromotion.promotion,
     {
-      cascade: true
-    }
+      cascade: true,
+    },
   )
   productPromotions: ProductPromotion[];
 
@@ -57,4 +64,4 @@
   @ApiProperty({ description: 'Date de dernière modification de la promotion' })
   @UpdateDateColumn()
   updatedAt: Date;
-}
\ No newline at end of file
+}
Index: api/src/model/Promotion/promotion.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/Promotion/promotion.service.ts\r\nimport { Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository, LessThanOrEqual, MoreThanOrEqual } from 'typeorm';\r\nimport { Promotion } from './promotion.entity';\r\nimport { CreatePromotionDto } from './dto/create-promotion.dto';\r\n\r\n// Le service PromotionService est marqué comme injectable grâce au décorateur @Injectable,\r\n// ce qui permet à NestJS de l'injecter dans d'autres parties de l'application.\r\n@Injectable()\r\nexport class PromotionService {\r\n  // Injection du repository de l'entité Promotion pour accéder aux opérations TypeORM.\r\n  constructor(\r\n    @InjectRepository(Promotion)\r\n    private promotionRepository: Repository<Promotion>\r\n  ) {}\r\n\r\n  // Méthode pour créer une nouvelle promotion.\r\n  // Elle reçoit un DTO, instancie une entité, puis la sauvegarde dans la base de données.\r\n  async create(createPromotionDto: CreatePromotionDto): Promise<Promotion> {\r\n    const promotion = this.promotionRepository.create(createPromotionDto);\r\n    return await this.promotionRepository.save(promotion);\r\n  }\r\n\r\n  // Méthode pour récupérer toutes les promotions.\r\n  // Elle retourne simplement toutes les promotions disponibles.\r\n  async findAll(): Promise<Promotion[]> {\r\n    return await this.promotionRepository.find();\r\n  }\r\n\r\n  // Méthode pour trouver une promotion par son ID.\r\n  // Elle lève une exception NotFoundException si aucune promotion n'est trouvée.\r\n  async findOne(id: number): Promise<Promotion> {\r\n    const promotion = await this.promotionRepository.findOne({\r\n      where: { id_promotion: id } // Utilisation de l'attribut 'id_promotion' comme clé primaire.\r\n    });\r\n\r\n    // Gestion des cas où l'ID fourni ne correspond à aucune promotion.\r\n    if (!promotion) {\r\n      throw new NotFoundException(`Promotion #${id} non trouvée`);\r\n    }\r\n\r\n    return promotion;\r\n  }\r\n\r\n  // Méthode pour mettre à jour une promotion existante.\r\n  // Elle utilise l'ID pour localiser la promotion et applique les nouvelles valeurs avant de sauvegarder.\r\n  async update(id: number, updatePromotionDto: CreatePromotionDto): Promise<Promotion> {\r\n    const promotion = await this.findOne(id);\r\n\r\n    // Mise à jour des propriétés de l'entité promotion avec les nouvelles valeurs.\r\n    Object.assign(promotion, {\r\n      ...updatePromotionDto,\r\n      startDate: new Date(updatePromotionDto.startDate),\r\n      endDate: new Date(updatePromotionDto.endDate)\r\n    });\r\n\r\n    return await this.promotionRepository.save(promotion);\r\n  }\r\n\r\n  // Méthode pour supprimer une promotion par son ID.\r\n  // Elle utilise findOne pour vérifier l'existence avant de procéder à la suppression.\r\n  async remove(id: number): Promise<void> {\r\n    const promotion = await this.findOne(id);\r\n    await this.promotionRepository.remove(promotion);\r\n  }\r\n\r\n  // Méthode pour récupérer toutes les promotions actives.\r\n  // Une promotion est considérée comme active si la date actuelle est entre sa date de début et de fin.\r\n  async getActivePromotions(): Promise<Promotion[]> {\r\n    const now = new Date();\r\n\r\n    return this.promotionRepository\r\n      .createQueryBuilder('promotion')\r\n      .where('DATE(promotion.startDate) <= DATE(:now)', { now }) // Comparaison des dates de début.\r\n      .andWhere('DATE(promotion.endDate) >= DATE(:now)', { now }) // Comparaison des dates de fin.\r\n      .getMany();\r\n  }\r\n\r\n  // Méthode pour créer une nouvelle promotion avec des validations supplémentaires.\r\n  // Cette méthode semble redondante avec `create` et pourrait être fusionnée.\r\n  async createPromotion(createPromotionDto: CreatePromotionDto): Promise<Promotion> {\r\n    const promotion = this.promotionRepository.create({\r\n      description: createPromotionDto.description,\r\n      startDate: new Date(createPromotionDto.startDate),\r\n      endDate: new Date(createPromotionDto.endDate),\r\n      discountPercentage: createPromotionDto.discountPercentage\r\n    });\r\n\r\n    return await this.promotionRepository.save(promotion);\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Promotion/promotion.service.ts b/api/src/model/Promotion/promotion.service.ts
--- a/api/src/model/Promotion/promotion.service.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Promotion/promotion.service.ts	(date 1736262015382)
@@ -12,7 +12,7 @@
   // Injection du repository de l'entité Promotion pour accéder aux opérations TypeORM.
   constructor(
     @InjectRepository(Promotion)
-    private promotionRepository: Repository<Promotion>
+    private promotionRepository: Repository<Promotion>,
   ) {}
 
   // Méthode pour créer une nouvelle promotion.
@@ -32,7 +32,7 @@
   // Elle lève une exception NotFoundException si aucune promotion n'est trouvée.
   async findOne(id: number): Promise<Promotion> {
     const promotion = await this.promotionRepository.findOne({
-      where: { id_promotion: id } // Utilisation de l'attribut 'id_promotion' comme clé primaire.
+      where: { id_promotion: id }, // Utilisation de l'attribut 'id_promotion' comme clé primaire.
     });
 
     // Gestion des cas où l'ID fourni ne correspond à aucune promotion.
@@ -45,14 +45,17 @@
 
   // Méthode pour mettre à jour une promotion existante.
   // Elle utilise l'ID pour localiser la promotion et applique les nouvelles valeurs avant de sauvegarder.
-  async update(id: number, updatePromotionDto: CreatePromotionDto): Promise<Promotion> {
+  async update(
+    id: number,
+    updatePromotionDto: CreatePromotionDto,
+  ): Promise<Promotion> {
     const promotion = await this.findOne(id);
 
     // Mise à jour des propriétés de l'entité promotion avec les nouvelles valeurs.
     Object.assign(promotion, {
       ...updatePromotionDto,
       startDate: new Date(updatePromotionDto.startDate),
-      endDate: new Date(updatePromotionDto.endDate)
+      endDate: new Date(updatePromotionDto.endDate),
     });
 
     return await this.promotionRepository.save(promotion);
@@ -79,12 +82,14 @@
 
   // Méthode pour créer une nouvelle promotion avec des validations supplémentaires.
   // Cette méthode semble redondante avec `create` et pourrait être fusionnée.
-  async createPromotion(createPromotionDto: CreatePromotionDto): Promise<Promotion> {
+  async createPromotion(
+    createPromotionDto: CreatePromotionDto,
+  ): Promise<Promotion> {
     const promotion = this.promotionRepository.create({
       description: createPromotionDto.description,
       startDate: new Date(createPromotionDto.startDate),
       endDate: new Date(createPromotionDto.endDate),
-      discountPercentage: createPromotionDto.discountPercentage
+      discountPercentage: createPromotionDto.discountPercentage,
     });
 
     return await this.promotionRepository.save(promotion);
Index: api/src/model/Promotion/promotion.module.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/module/promotion/promotion.module.ts\r\nimport { Module } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { PromotionService } from './promotion.service';\r\nimport { PromotionController } from './promotion.controller';\r\nimport { Promotion } from 'model/Promotion/promotion.entity'; // Chemin vers l'entité Promotion\r\n\r\n@Module({\r\n  imports: [TypeOrmModule.forFeature([Promotion])],\r\n  providers: [PromotionService],\r\n  controllers: [PromotionController],\r\n  exports: [PromotionService,TypeOrmModule, PromotionService],\r\n})\r\nexport class PromotionModule {}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Promotion/promotion.module.ts b/api/src/model/Promotion/promotion.module.ts
--- a/api/src/model/Promotion/promotion.module.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Promotion/promotion.module.ts	(date 1736262015382)
@@ -9,7 +9,6 @@
   imports: [TypeOrmModule.forFeature([Promotion])],
   providers: [PromotionService],
   controllers: [PromotionController],
-  exports: [PromotionService,TypeOrmModule, PromotionService],
+  exports: [PromotionService, TypeOrmModule, PromotionService],
 })
 export class PromotionModule {}
-
Index: api/src/model/Promotion/promotion.controller.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/Promotion/promotion.controller.ts\r\nimport { Controller, Get, Post, Body, Put, Param, Delete } from '@nestjs/common';\r\nimport { PromotionService } from './promotion.service';\r\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';\r\nimport { CreatePromotionDto } from './dto/create-promotion.dto';\r\nimport { Promotion } from './promotion.entity';\r\n\r\n@ApiTags('promotions')\r\n@Controller('promotions')\r\nexport class PromotionController {\r\n  constructor(private readonly promotionService: PromotionService) {}\r\n\r\n  @Post()\r\n  @ApiOperation({ summary: 'Créer une nouvelle promotion' })\r\n  @ApiResponse({ status: 201, description: 'La promotion a été créée avec succès.' })\r\n  async createPromotion(@Body() createPromotionDto: CreatePromotionDto): Promise<Promotion> {\r\n    try {\r\n      return await this.promotionService.createPromotion(createPromotionDto);\r\n    } catch (error) {\r\n      console.error('Erreur création promotion:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Récupérer toutes les promotions' })\r\n  findAll() {\r\n    return this.promotionService.findAll();\r\n  }\r\n\r\n  @Get('active')\r\n  @ApiOperation({ summary: 'Récupérer les promotions actives' })\r\n  async getActivePromotions(): Promise<Promotion[]> {\r\n    console.log('Requête reçue pour les promotions actives');\r\n    const promotions = await this.promotionService.getActivePromotions();\r\n    console.log('Promotions actives trouvées:', promotions);\r\n    return promotions;\r\n  }\r\n\r\n  @Get(':id')\r\n  @ApiOperation({ summary: 'Récupérer une promotion par son ID' })\r\n  findOne(@Param('id') id: string) {\r\n    return this.promotionService.findOne(+id);\r\n  }\r\n\r\n  @Put(':id')\r\n  @ApiOperation({ summary: 'Mettre à jour une promotion' })\r\n  update(@Param('id') id: string, @Body() updatePromotionDto: CreatePromotionDto) {\r\n    return this.promotionService.update(+id, updatePromotionDto);\r\n  }\r\n\r\n  @Delete(':id')\r\n  @ApiOperation({ summary: 'Supprimer une promotion' })\r\n  remove(@Param('id') id: string) {\r\n    return this.promotionService.remove(+id);\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Promotion/promotion.controller.ts b/api/src/model/Promotion/promotion.controller.ts
--- a/api/src/model/Promotion/promotion.controller.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Promotion/promotion.controller.ts	(date 1736262015382)
@@ -1,5 +1,13 @@
 // src/model/Promotion/promotion.controller.ts
-import { Controller, Get, Post, Body, Put, Param, Delete } from '@nestjs/common';
+import {
+  Controller,
+  Get,
+  Post,
+  Body,
+  Put,
+  Param,
+  Delete,
+} from '@nestjs/common';
 import { PromotionService } from './promotion.service';
 import { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';
 import { CreatePromotionDto } from './dto/create-promotion.dto';
@@ -12,8 +20,13 @@
 
   @Post()
   @ApiOperation({ summary: 'Créer une nouvelle promotion' })
-  @ApiResponse({ status: 201, description: 'La promotion a été créée avec succès.' })
-  async createPromotion(@Body() createPromotionDto: CreatePromotionDto): Promise<Promotion> {
+  @ApiResponse({
+    status: 201,
+    description: 'La promotion a été créée avec succès.',
+  })
+  async createPromotion(
+    @Body() createPromotionDto: CreatePromotionDto,
+  ): Promise<Promotion> {
     try {
       return await this.promotionService.createPromotion(createPromotionDto);
     } catch (error) {
@@ -45,7 +58,10 @@
 
   @Put(':id')
   @ApiOperation({ summary: 'Mettre à jour une promotion' })
-  update(@Param('id') id: string, @Body() updatePromotionDto: CreatePromotionDto) {
+  update(
+    @Param('id') id: string,
+    @Body() updatePromotionDto: CreatePromotionDto,
+  ) {
     return this.promotionService.update(+id, updatePromotionDto);
   }
 
@@ -54,4 +70,4 @@
   remove(@Param('id') id: string) {
     return this.promotionService.remove(+id);
   }
-}
\ No newline at end of file
+}
Index: api/src/model/Promotion/dto/create-promotion.dto.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { IsNotEmpty, IsString, IsDateString, IsInt, Min, Max } from 'class-validator';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class CreatePromotionDto {\r\n  @IsNotEmpty()\r\n  @IsString()\r\n  @ApiProperty({ example: 'Promotion de Noël', description: 'Description de la promotion' })\r\n  description: string;\r\n\r\n  @IsNotEmpty()\r\n  @IsDateString()\r\n  @ApiProperty({ example: '2024-12-01T00:00:00.000Z', description: 'Date de début de la promotion' })\r\n  startDate: string;\r\n\r\n  @IsNotEmpty()\r\n  @IsDateString()\r\n  @ApiProperty({ example: '2024-12-31T23:59:59.999Z', description: 'Date de fin de la promotion' })\r\n  endDate: string;\r\n\r\n  @IsNotEmpty()\r\n  @IsInt()\r\n  @Min(0)\r\n  @Max(100)\r\n  @ApiProperty({\r\n    example: 20,\r\n    description: 'Pourcentage de réduction',\r\n    minimum: 0,\r\n    maximum: 100\r\n  })\r\n  discountPercentage: number;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Promotion/dto/create-promotion.dto.ts b/api/src/model/Promotion/dto/create-promotion.dto.ts
--- a/api/src/model/Promotion/dto/create-promotion.dto.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Promotion/dto/create-promotion.dto.ts	(date 1736262015382)
@@ -1,20 +1,36 @@
-import { IsNotEmpty, IsString, IsDateString, IsInt, Min, Max } from 'class-validator';
+import {
+  IsNotEmpty,
+  IsString,
+  IsDateString,
+  IsInt,
+  Min,
+  Max,
+} from 'class-validator';
 import { ApiProperty } from '@nestjs/swagger';
 
 export class CreatePromotionDto {
   @IsNotEmpty()
   @IsString()
-  @ApiProperty({ example: 'Promotion de Noël', description: 'Description de la promotion' })
+  @ApiProperty({
+    example: 'Promotion de Noël',
+    description: 'Description de la promotion',
+  })
   description: string;
 
   @IsNotEmpty()
   @IsDateString()
-  @ApiProperty({ example: '2024-12-01T00:00:00.000Z', description: 'Date de début de la promotion' })
+  @ApiProperty({
+    example: '2024-12-01T00:00:00.000Z',
+    description: 'Date de début de la promotion',
+  })
   startDate: string;
 
   @IsNotEmpty()
   @IsDateString()
-  @ApiProperty({ example: '2024-12-31T23:59:59.999Z', description: 'Date de fin de la promotion' })
+  @ApiProperty({
+    example: '2024-12-31T23:59:59.999Z',
+    description: 'Date de fin de la promotion',
+  })
   endDate: string;
 
   @IsNotEmpty()
@@ -25,7 +41,7 @@
     example: 20,
     description: 'Pourcentage de réduction',
     minimum: 0,
-    maximum: 100
+    maximum: 100,
   })
   discountPercentage: number;
-}
\ No newline at end of file
+}
Index: api/src/model/Appointment/appointment.controller.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/controllers/appointment.controller.ts\r\nimport { Controller, Get, Post, Body, Param, Put, Delete } from '@nestjs/common';\r\n\r\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\r\nimport { AppointmentService } from './appointment.service';\r\nimport { CreateAppointmentDto } from './dto/create-appointment.dto';\r\nimport { UpdateAppointmentDto } from './dto/update-appointment.dto';\r\n@ApiTags('appointments')\r\n@ApiBearerAuth('access-token')\r\n@Controller('appointments')\r\nexport class AppointmentController {\r\n  constructor(private readonly appointmentService: AppointmentService) {}\r\n\r\n  @Post()\r\n  create(@Body() createAppointmentDto: CreateAppointmentDto) {\r\n    return this.appointmentService.create(createAppointmentDto);\r\n  }\r\n\r\n  @Get()\r\n  findAll() {\r\n    return this.appointmentService.findAll();\r\n  }\r\n\r\n  @Get(':id')\r\n  findOne(@Param('id') id: string) {\r\n    return this.appointmentService.findOne(+id);\r\n  }\r\n\r\n  @Put(':id')\r\n  update(@Param('id') id: string, @Body() updateAppointmentDto: UpdateAppointmentDto) {\r\n    return this.appointmentService.update(+id, updateAppointmentDto);\r\n  }\r\n\r\n  @Delete(':id')\r\n  remove(@Param('id') id: string) {\r\n    return this.appointmentService.remove(+id);\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Appointment/appointment.controller.ts b/api/src/model/Appointment/appointment.controller.ts
--- a/api/src/model/Appointment/appointment.controller.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Appointment/appointment.controller.ts	(date 1736262015380)
@@ -1,5 +1,13 @@
 // src/controllers/appointment.controller.ts
-import { Controller, Get, Post, Body, Param, Put, Delete } from '@nestjs/common';
+import {
+  Controller,
+  Get,
+  Post,
+  Body,
+  Param,
+  Put,
+  Delete,
+} from '@nestjs/common';
 
 import { ApiBearerAuth, ApiTags } from '@nestjs/swagger';
 import { AppointmentService } from './appointment.service';
@@ -27,7 +35,10 @@
   }
 
   @Put(':id')
-  update(@Param('id') id: string, @Body() updateAppointmentDto: UpdateAppointmentDto) {
+  update(
+    @Param('id') id: string,
+    @Body() updateAppointmentDto: UpdateAppointmentDto,
+  ) {
     return this.appointmentService.update(+id, updateAppointmentDto);
   }
 
Index: api/src/model/Appointment/appointment.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/services/appointment.service.ts\r\nimport { Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { CreateAppointmentDto } from './dto/create-appointment.dto';\r\nimport { Appointment } from './appointment.entity';\r\nimport { UpdateAppointmentDto } from './dto/update-appointment.dto';\r\n\r\n\r\n@Injectable()\r\nexport class AppointmentService {\r\n  constructor(\r\n    @InjectRepository(Appointment)\r\n    private readonly appointmentRepository: Repository<Appointment>,\r\n  ) {}\r\n\r\n  async create(createAppointmentDto: CreateAppointmentDto): Promise<Appointment> {\r\n    const appointment = this.appointmentRepository.create(createAppointmentDto);\r\n    return this.appointmentRepository.save(appointment);\r\n  }\r\n\r\n  async findAll(): Promise<Appointment[]> {\r\n    return this.appointmentRepository.find({ relations: ['service', 'client', 'administrator'] });\r\n  }\r\n\r\n  async findOne(id: number): Promise<Appointment> {\r\n    const appointment = await this.appointmentRepository.findOne({\r\n      where: { appointmentId: id },\r\n      relations: ['service', 'client', 'administrator'],\r\n    });\r\n    if (!appointment) {\r\n      throw new NotFoundException(`Appointment with ID ${id} not found`);\r\n    }\r\n    return appointment;\r\n  }\r\n\r\n  async update(id: number, updateAppointmentDto: UpdateAppointmentDto): Promise<Appointment> {\r\n    const appointment = await this.findOne(id);\r\n    Object.assign(appointment, updateAppointmentDto);\r\n    return this.appointmentRepository.save(appointment);\r\n  }\r\n\r\n  async remove(id: number): Promise<void> {\r\n    const appointment = await this.findOne(id);\r\n    await this.appointmentRepository.remove(appointment);\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Appointment/appointment.service.ts b/api/src/model/Appointment/appointment.service.ts
--- a/api/src/model/Appointment/appointment.service.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Appointment/appointment.service.ts	(date 1736262015380)
@@ -6,7 +6,6 @@
 import { Appointment } from './appointment.entity';
 import { UpdateAppointmentDto } from './dto/update-appointment.dto';
 
-
 @Injectable()
 export class AppointmentService {
   constructor(
@@ -14,13 +13,17 @@
     private readonly appointmentRepository: Repository<Appointment>,
   ) {}
 
-  async create(createAppointmentDto: CreateAppointmentDto): Promise<Appointment> {
+  async create(
+    createAppointmentDto: CreateAppointmentDto,
+  ): Promise<Appointment> {
     const appointment = this.appointmentRepository.create(createAppointmentDto);
     return this.appointmentRepository.save(appointment);
   }
 
   async findAll(): Promise<Appointment[]> {
-    return this.appointmentRepository.find({ relations: ['service', 'client', 'administrator'] });
+    return this.appointmentRepository.find({
+      relations: ['service', 'client', 'administrator'],
+    });
   }
 
   async findOne(id: number): Promise<Appointment> {
@@ -34,7 +37,10 @@
     return appointment;
   }
 
-  async update(id: number, updateAppointmentDto: UpdateAppointmentDto): Promise<Appointment> {
+  async update(
+    id: number,
+    updateAppointmentDto: UpdateAppointmentDto,
+  ): Promise<Appointment> {
     const appointment = await this.findOne(id);
     Object.assign(appointment, updateAppointmentDto);
     return this.appointmentRepository.save(appointment);
Index: api/src/model/OrderStatus/orderStatus.controller.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/OrderStatus/orderStatus.controller.ts\r\nimport { Controller, Get, Post, Body, Put, Param, Delete } from '@nestjs/common';\r\nimport { OrderStatusService } from './orderStatus.service';\r\nimport { CreateOrderStatusDto } from './dto/create-orderStatus.dto';\r\nimport { UpdateOrderStatusDto } from './dto/update-orderStatus.dto';\r\nimport { ApiTags } from '@nestjs/swagger';\r\n\r\n@ApiTags('order-status')\r\n@Controller('order-status')\r\nexport class OrderStatusController {\r\n  constructor(private readonly orderStatusService: OrderStatusService) {}\r\n\r\n  @Post()\r\n  create(@Body() createOrderStatusDto: CreateOrderStatusDto) {\r\n    return this.orderStatusService.create(createOrderStatusDto);\r\n  }\r\n\r\n  @Get()\r\n  findAll() {\r\n    return this.orderStatusService.findAll();\r\n  }\r\n\r\n  @Get(':id')\r\n  findOne(@Param('id') id: string) {\r\n    return this.orderStatusService.findOne(+id);\r\n  }\r\n\r\n  @Put(':id')\r\n  update(@Param('id') id: string, @Body() updateOrderStatusDto: UpdateOrderStatusDto) {\r\n    return this.orderStatusService.update(+id, updateOrderStatusDto);\r\n  }\r\n\r\n  @Delete(':id')\r\n  remove(@Param('id') id: string) {\r\n    return this.orderStatusService.remove(+id);\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/OrderStatus/orderStatus.controller.ts b/api/src/model/OrderStatus/orderStatus.controller.ts
--- a/api/src/model/OrderStatus/orderStatus.controller.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/OrderStatus/orderStatus.controller.ts	(date 1736262015380)
@@ -1,5 +1,13 @@
 // src/model/OrderStatus/orderStatus.controller.ts
-import { Controller, Get, Post, Body, Put, Param, Delete } from '@nestjs/common';
+import {
+  Controller,
+  Get,
+  Post,
+  Body,
+  Put,
+  Param,
+  Delete,
+} from '@nestjs/common';
 import { OrderStatusService } from './orderStatus.service';
 import { CreateOrderStatusDto } from './dto/create-orderStatus.dto';
 import { UpdateOrderStatusDto } from './dto/update-orderStatus.dto';
@@ -26,7 +34,10 @@
   }
 
   @Put(':id')
-  update(@Param('id') id: string, @Body() updateOrderStatusDto: UpdateOrderStatusDto) {
+  update(
+    @Param('id') id: string,
+    @Body() updateOrderStatusDto: UpdateOrderStatusDto,
+  ) {
     return this.orderStatusService.update(+id, updateOrderStatusDto);
   }
 
Index: api/src/model/OrderStatus/orderStatus.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/OrderStatus/orderStatus.service.ts\r\nimport { Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { OrderStatusEntity } from './orderStatus.entity';\r\nimport { CreateOrderStatusDto } from './dto/create-orderStatus.dto';\r\nimport { UpdateOrderStatusDto } from './dto/update-orderStatus.dto';\r\n\r\n@Injectable()\r\nexport class OrderStatusService {\r\n  constructor(\r\n    @InjectRepository(OrderStatusEntity)\r\n    private orderStatusRepository: Repository<OrderStatusEntity>\r\n  ) {}\r\n\r\n  async create(createOrderStatusDto: CreateOrderStatusDto): Promise<OrderStatusEntity> {\r\n    const orderStatus = this.orderStatusRepository.create(createOrderStatusDto);\r\n    return this.orderStatusRepository.save(orderStatus);\r\n  }\r\n\r\n  async findAll(): Promise<OrderStatusEntity[]> {\r\n    return this.orderStatusRepository.find({ relations: ['orders'] });\r\n  }\r\n\r\n  async findOne(id: number): Promise<OrderStatusEntity> {\r\n    return this.orderStatusRepository.findOne({\r\n      where: { statusId: id },\r\n      relations: ['orders']\r\n    });\r\n  }\r\n\r\n  async update(id: number, updateOrderStatusDto: UpdateOrderStatusDto): Promise<OrderStatusEntity> {\r\n    const orderStatus = await this.findOne(id);\r\n    if (!orderStatus) {\r\n      throw new NotFoundException(`Status with ID ${id} not found`);\r\n    }\r\n\r\n    const updated = Object.assign(orderStatus, updateOrderStatusDto);\r\n    return this.orderStatusRepository.save(updated);\r\n  }\r\n\r\n  async remove(id: number): Promise<void> {\r\n    const orderStatus = await this.findOne(id);\r\n    await this.orderStatusRepository.remove(orderStatus);\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/OrderStatus/orderStatus.service.ts b/api/src/model/OrderStatus/orderStatus.service.ts
--- a/api/src/model/OrderStatus/orderStatus.service.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/OrderStatus/orderStatus.service.ts	(date 1736262015380)
@@ -10,10 +10,12 @@
 export class OrderStatusService {
   constructor(
     @InjectRepository(OrderStatusEntity)
-    private orderStatusRepository: Repository<OrderStatusEntity>
+    private orderStatusRepository: Repository<OrderStatusEntity>,
   ) {}
 
-  async create(createOrderStatusDto: CreateOrderStatusDto): Promise<OrderStatusEntity> {
+  async create(
+    createOrderStatusDto: CreateOrderStatusDto,
+  ): Promise<OrderStatusEntity> {
     const orderStatus = this.orderStatusRepository.create(createOrderStatusDto);
     return this.orderStatusRepository.save(orderStatus);
   }
@@ -25,11 +27,14 @@
   async findOne(id: number): Promise<OrderStatusEntity> {
     return this.orderStatusRepository.findOne({
       where: { statusId: id },
-      relations: ['orders']
+      relations: ['orders'],
     });
   }
 
-  async update(id: number, updateOrderStatusDto: UpdateOrderStatusDto): Promise<OrderStatusEntity> {
+  async update(
+    id: number,
+    updateOrderStatusDto: UpdateOrderStatusDto,
+  ): Promise<OrderStatusEntity> {
     const orderStatus = await this.findOne(id);
     if (!orderStatus) {
       throw new NotFoundException(`Status with ID ${id} not found`);
Index: api/src/model/OrderStatus/dto/order-status.enum.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/OrderStatus/order-status.enum.ts\r\nexport enum OrderStatus {\r\n  PENDING = 'PENDING',\r\n  PAID = 'PAID',\r\n  PROCESSING = 'PROCESSING',\r\n  SHIPPED = 'SHIPPED',\r\n  DELIVERED = 'DELIVERED',\r\n  CANCELLED = 'CANCELLED'\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/OrderStatus/dto/order-status.enum.ts b/api/src/model/OrderStatus/dto/order-status.enum.ts
--- a/api/src/model/OrderStatus/dto/order-status.enum.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/OrderStatus/dto/order-status.enum.ts	(date 1736262015380)
@@ -5,5 +5,5 @@
   PROCESSING = 'PROCESSING',
   SHIPPED = 'SHIPPED',
   DELIVERED = 'DELIVERED',
-  CANCELLED = 'CANCELLED'
-}
\ No newline at end of file
+  CANCELLED = 'CANCELLED',
+}
Index: api/src/model/OrderStatus/dto/update-orderStatus.dto.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n// src/model/OrderStatus/dto/update-orderStatus.dto.ts\r\nimport { IsEnum, IsString, IsOptional } from 'class-validator';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\nimport { OrderStatus } from './order-status.enum';\r\n\r\n\r\nexport class UpdateOrderStatusDto {\r\n  @ApiProperty({\r\n    description: 'Label du statut',\r\n    enum: OrderStatus,\r\n    example: OrderStatus.PENDING,\r\n    required: false\r\n  })\r\n  @IsEnum(OrderStatus)\r\n  @IsOptional()\r\n  label?: OrderStatus;\r\n\r\n  @ApiProperty({\r\n    description: 'Description du statut',\r\n    example: 'Commande en attente de paiement',\r\n    required: false\r\n  })\r\n  @IsString()\r\n  @IsOptional()\r\n  description?: string;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/OrderStatus/dto/update-orderStatus.dto.ts b/api/src/model/OrderStatus/dto/update-orderStatus.dto.ts
--- a/api/src/model/OrderStatus/dto/update-orderStatus.dto.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/OrderStatus/dto/update-orderStatus.dto.ts	(date 1736262015380)
@@ -1,16 +1,14 @@
-
 // src/model/OrderStatus/dto/update-orderStatus.dto.ts
 import { IsEnum, IsString, IsOptional } from 'class-validator';
 import { ApiProperty } from '@nestjs/swagger';
 import { OrderStatus } from './order-status.enum';
 
-
 export class UpdateOrderStatusDto {
   @ApiProperty({
     description: 'Label du statut',
     enum: OrderStatus,
     example: OrderStatus.PENDING,
-    required: false
+    required: false,
   })
   @IsEnum(OrderStatus)
   @IsOptional()
@@ -19,7 +17,7 @@
   @ApiProperty({
     description: 'Description du statut',
     example: 'Commande en attente de paiement',
-    required: false
+    required: false,
   })
   @IsString()
   @IsOptional()
Index: api/src/model/OrderStatus/orderStatus.entity.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/OrderStatus/orderStatus.entity.ts\r\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\r\nimport { Order } from '../Order/order.entity';\r\nimport { OrderStatus } from './dto/order-status.enum';\r\n\r\n\r\n\r\n\r\n@Entity('order_status')\r\nexport class OrderStatusEntity {\r\n  @PrimaryGeneratedColumn()\r\n  statusId: number;\r\n\r\n  @Column({\r\n    type: 'enum',\r\n    enum: OrderStatus,\r\n    default: OrderStatus.PENDING\r\n  })\r\n  label: OrderStatus;\r\n\r\n  @Column()\r\n  description: string;\r\n\r\n  @OneToMany(() => Order, order => order.status)\r\n  orders: Order[];\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/OrderStatus/orderStatus.entity.ts b/api/src/model/OrderStatus/orderStatus.entity.ts
--- a/api/src/model/OrderStatus/orderStatus.entity.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/OrderStatus/orderStatus.entity.ts	(date 1736262015380)
@@ -3,9 +3,6 @@
 import { Order } from '../Order/order.entity';
 import { OrderStatus } from './dto/order-status.enum';
 
-
-
-
 @Entity('order_status')
 export class OrderStatusEntity {
   @PrimaryGeneratedColumn()
@@ -14,13 +11,13 @@
   @Column({
     type: 'enum',
     enum: OrderStatus,
-    default: OrderStatus.PENDING
+    default: OrderStatus.PENDING,
   })
   label: OrderStatus;
 
   @Column()
   description: string;
 
-  @OneToMany(() => Order, order => order.status)
+  @OneToMany(() => Order, (order) => order.status)
   orders: Order[];
 }
Index: api/src/model/OrderStatus/orderStatus.module.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/OrderStatus/orderStatus.module.ts\r\nimport { Module } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { OrderStatusController } from './orderStatus.controller';\r\nimport { OrderStatusService } from './orderStatus.service';\r\nimport { OrderStatusEntity } from './orderStatus.entity';\r\n\r\n@Module({\r\n  imports: [TypeOrmModule.forFeature([OrderStatusEntity])],\r\n  controllers: [OrderStatusController],\r\n  providers: [OrderStatusService],\r\n  exports: [OrderStatusService]\r\n})\r\nexport class OrderStatusModule {}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/OrderStatus/orderStatus.module.ts b/api/src/model/OrderStatus/orderStatus.module.ts
--- a/api/src/model/OrderStatus/orderStatus.module.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/OrderStatus/orderStatus.module.ts	(date 1736262015380)
@@ -9,6 +9,6 @@
   imports: [TypeOrmModule.forFeature([OrderStatusEntity])],
   controllers: [OrderStatusController],
   providers: [OrderStatusService],
-  exports: [OrderStatusService]
+  exports: [OrderStatusService],
 })
-export class OrderStatusModule {}
\ No newline at end of file
+export class OrderStatusModule {}
Index: api/src/model/Prescription/prescription.controller.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/Prescription/prescription.controller.ts\r\nimport { Controller, Get, Post, Body, Put, Param, Delete } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiResponse, ApiBody, ApiParam } from '@nestjs/swagger';\r\nimport { PrescriptionService } from './prescription.service';\r\nimport { CreatePrescriptionDto } from './dto/create-prescription.dto';\r\nimport { UpdatePrescriptionDto } from './dto/update-prescription.dto';\r\n\r\n@ApiTags('prescriptions')\r\n@Controller('api/prescriptions')\r\nexport class PrescriptionController {\r\n  constructor(private readonly prescriptionService: PrescriptionService) {}\r\n\r\n  @Post()\r\n  @ApiOperation({ summary: 'Créer une nouvelle prescription' })\r\n  @ApiResponse({ status: 201, description: 'La prescription a été créée avec succès.' })\r\n  @ApiResponse({ status: 400, description: 'Données invalides.' })\r\n  @ApiBody({ type: CreatePrescriptionDto })\r\n  create(@Body() createPrescriptionDto: CreatePrescriptionDto) {\r\n    return this.prescriptionService.create(createPrescriptionDto);\r\n  }\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Récupérer toutes les prescriptions' })\r\n  @ApiResponse({ status: 200, description: 'Liste des prescriptions récupérée avec succès.' })\r\n  findAll() {\r\n    return this.prescriptionService.findAll();\r\n  }\r\n\r\n  @Get(':id')\r\n  @ApiOperation({ summary: 'Récupérer une prescription par ID' })\r\n  @ApiParam({ name: 'id', type: 'number', description: 'ID de la prescription' })\r\n  @ApiResponse({ status: 200, description: 'Prescription trouvée.' })\r\n  @ApiResponse({ status: 404, description: 'Prescription non trouvée.' })\r\n  findOne(@Param('id') id: string) {\r\n    return this.prescriptionService.findOne(+id);\r\n  }\r\n\r\n  @Put(':id')\r\n  @ApiOperation({ summary: 'Mettre à jour une prescription' })\r\n  @ApiParam({ name: 'id', type: 'number', description: 'ID de la prescription' })\r\n  @ApiBody({ type: UpdatePrescriptionDto })\r\n  @ApiResponse({ status: 200, description: 'Prescription mise à jour avec succès.' })\r\n  @ApiResponse({ status: 404, description: 'Prescription non trouvée.' })\r\n  update(@Param('id') id: string, @Body() updatePrescriptionDto: UpdatePrescriptionDto) {\r\n    return this.prescriptionService.update(+id, updatePrescriptionDto);\r\n  }\r\n\r\n  @Delete(':id')\r\n  @ApiOperation({ summary: 'Supprimer une prescription' })\r\n  @ApiParam({ name: 'id', type: 'number', description: 'ID de la prescription' })\r\n  @ApiResponse({ status: 200, description: 'Prescription supprimée avec succès.' })\r\n  @ApiResponse({ status: 404, description: 'Prescription non trouvée.' })\r\n  remove(@Param('id') id: string) {\r\n    return this.prescriptionService.remove(+id);\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Prescription/prescription.controller.ts b/api/src/model/Prescription/prescription.controller.ts
--- a/api/src/model/Prescription/prescription.controller.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Prescription/prescription.controller.ts	(date 1736262015382)
@@ -1,6 +1,20 @@
 // src/model/Prescription/prescription.controller.ts
-import { Controller, Get, Post, Body, Put, Param, Delete } from '@nestjs/common';
-import { ApiTags, ApiOperation, ApiResponse, ApiBody, ApiParam } from '@nestjs/swagger';
+import {
+  Controller,
+  Get,
+  Post,
+  Body,
+  Put,
+  Param,
+  Delete,
+} from '@nestjs/common';
+import {
+  ApiTags,
+  ApiOperation,
+  ApiResponse,
+  ApiBody,
+  ApiParam,
+} from '@nestjs/swagger';
 import { PrescriptionService } from './prescription.service';
 import { CreatePrescriptionDto } from './dto/create-prescription.dto';
 import { UpdatePrescriptionDto } from './dto/update-prescription.dto';
@@ -12,7 +26,10 @@
 
   @Post()
   @ApiOperation({ summary: 'Créer une nouvelle prescription' })
-  @ApiResponse({ status: 201, description: 'La prescription a été créée avec succès.' })
+  @ApiResponse({
+    status: 201,
+    description: 'La prescription a été créée avec succès.',
+  })
   @ApiResponse({ status: 400, description: 'Données invalides.' })
   @ApiBody({ type: CreatePrescriptionDto })
   create(@Body() createPrescriptionDto: CreatePrescriptionDto) {
@@ -21,14 +38,21 @@
 
   @Get()
   @ApiOperation({ summary: 'Récupérer toutes les prescriptions' })
-  @ApiResponse({ status: 200, description: 'Liste des prescriptions récupérée avec succès.' })
+  @ApiResponse({
+    status: 200,
+    description: 'Liste des prescriptions récupérée avec succès.',
+  })
   findAll() {
     return this.prescriptionService.findAll();
   }
 
   @Get(':id')
   @ApiOperation({ summary: 'Récupérer une prescription par ID' })
-  @ApiParam({ name: 'id', type: 'number', description: 'ID de la prescription' })
+  @ApiParam({
+    name: 'id',
+    type: 'number',
+    description: 'ID de la prescription',
+  })
   @ApiResponse({ status: 200, description: 'Prescription trouvée.' })
   @ApiResponse({ status: 404, description: 'Prescription non trouvée.' })
   findOne(@Param('id') id: string) {
@@ -37,20 +61,37 @@
 
   @Put(':id')
   @ApiOperation({ summary: 'Mettre à jour une prescription' })
-  @ApiParam({ name: 'id', type: 'number', description: 'ID de la prescription' })
+  @ApiParam({
+    name: 'id',
+    type: 'number',
+    description: 'ID de la prescription',
+  })
   @ApiBody({ type: UpdatePrescriptionDto })
-  @ApiResponse({ status: 200, description: 'Prescription mise à jour avec succès.' })
+  @ApiResponse({
+    status: 200,
+    description: 'Prescription mise à jour avec succès.',
+  })
   @ApiResponse({ status: 404, description: 'Prescription non trouvée.' })
-  update(@Param('id') id: string, @Body() updatePrescriptionDto: UpdatePrescriptionDto) {
+  update(
+    @Param('id') id: string,
+    @Body() updatePrescriptionDto: UpdatePrescriptionDto,
+  ) {
     return this.prescriptionService.update(+id, updatePrescriptionDto);
   }
 
   @Delete(':id')
   @ApiOperation({ summary: 'Supprimer une prescription' })
-  @ApiParam({ name: 'id', type: 'number', description: 'ID de la prescription' })
-  @ApiResponse({ status: 200, description: 'Prescription supprimée avec succès.' })
+  @ApiParam({
+    name: 'id',
+    type: 'number',
+    description: 'ID de la prescription',
+  })
+  @ApiResponse({
+    status: 200,
+    description: 'Prescription supprimée avec succès.',
+  })
   @ApiResponse({ status: 404, description: 'Prescription non trouvée.' })
   remove(@Param('id') id: string) {
     return this.prescriptionService.remove(+id);
   }
-}
\ No newline at end of file
+}
Index: api/src/model/OrderStatus/dto/create-orderStatus.dto.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/OrderStatus/dto/create-orderStatus.dto.ts\r\nimport { IsEnum, IsString } from 'class-validator';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\nimport { OrderStatus } from './order-status.enum';\r\n\r\n\r\nexport class CreateOrderStatusDto {\r\n  @ApiProperty({\r\n    description: 'Label du statut',\r\n    enum: OrderStatus,\r\n    example: OrderStatus.PENDING\r\n  })\r\n  @IsEnum(OrderStatus)\r\n  label: OrderStatus;\r\n\r\n  @ApiProperty({\r\n    description: 'Description du statut',\r\n    example: 'Commande en attente de paiement'\r\n  })\r\n  @IsString()\r\n  description: string;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/OrderStatus/dto/create-orderStatus.dto.ts b/api/src/model/OrderStatus/dto/create-orderStatus.dto.ts
--- a/api/src/model/OrderStatus/dto/create-orderStatus.dto.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/OrderStatus/dto/create-orderStatus.dto.ts	(date 1736262015380)
@@ -3,20 +3,19 @@
 import { ApiProperty } from '@nestjs/swagger';
 import { OrderStatus } from './order-status.enum';
 
-
 export class CreateOrderStatusDto {
   @ApiProperty({
     description: 'Label du statut',
     enum: OrderStatus,
-    example: OrderStatus.PENDING
+    example: OrderStatus.PENDING,
   })
   @IsEnum(OrderStatus)
   label: OrderStatus;
 
   @ApiProperty({
     description: 'Description du statut',
-    example: 'Commande en attente de paiement'
+    example: 'Commande en attente de paiement',
   })
   @IsString()
   description: string;
-}
\ No newline at end of file
+}
Index: api/src/model/Prescription/prescription.module.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/Prescription/prescription.module.ts\r\nimport { Module } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { PrescriptionService } from './prescription.service';\r\nimport { PrescriptionController } from './prescription.controller';\r\nimport { Prescription } from './prescription.entity';\r\nimport { Client } from '../Client/client.entity';\r\n\r\n@Module({\r\n  imports: [TypeOrmModule.forFeature([Prescription, Client])],\r\n  controllers: [PrescriptionController],\r\n  providers: [PrescriptionService],\r\n  exports: [PrescriptionService,TypeOrmModule]\r\n})\r\nexport class PrescriptionModule {}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Prescription/prescription.module.ts b/api/src/model/Prescription/prescription.module.ts
--- a/api/src/model/Prescription/prescription.module.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Prescription/prescription.module.ts	(date 1736262015382)
@@ -10,6 +10,6 @@
   imports: [TypeOrmModule.forFeature([Prescription, Client])],
   controllers: [PrescriptionController],
   providers: [PrescriptionService],
-  exports: [PrescriptionService,TypeOrmModule]
+  exports: [PrescriptionService, TypeOrmModule],
 })
-export class PrescriptionModule {}
\ No newline at end of file
+export class PrescriptionModule {}
Index: api/src/model/Prescription/dto/update-prescription.dto.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/Prescription/dto/update-prescription.dto.ts\r\nimport { PartialType } from '@nestjs/mapped-types';\r\nimport { CreatePrescriptionDto } from './create-prescription.dto';\r\n\r\n\r\nexport class UpdatePrescriptionDto extends PartialType(CreatePrescriptionDto) {}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Prescription/dto/update-prescription.dto.ts b/api/src/model/Prescription/dto/update-prescription.dto.ts
--- a/api/src/model/Prescription/dto/update-prescription.dto.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Prescription/dto/update-prescription.dto.ts	(date 1736262015382)
@@ -2,5 +2,4 @@
 import { PartialType } from '@nestjs/mapped-types';
 import { CreatePrescriptionDto } from './create-prescription.dto';
 
-
-export class UpdatePrescriptionDto extends PartialType(CreatePrescriptionDto) {}
\ No newline at end of file
+export class UpdatePrescriptionDto extends PartialType(CreatePrescriptionDto) {}
Index: api/src/model/Prescription/dto/create-prescription.dto.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/models/prescription/dto/create-prescription.dto.ts\r\nimport { IsNotEmpty, IsString, IsBoolean, IsNumber, IsOptional, IsDate } from 'class-validator';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class CreatePrescriptionDto {\r\n  @IsNumber()\r\n  @IsNotEmpty()\r\n  @ApiProperty()\r\n  client_id: number;\r\n\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  @ApiProperty()\r\n  prescribed_by: string;\r\n\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  @ApiProperty()\r\n  medication_details: string;\r\n\r\n  @IsDate()\r\n  @IsOptional()\r\n  @ApiProperty()\r\n  expiry_date?: Date;\r\n\r\n  @IsString()\r\n  @IsOptional()\r\n  @ApiProperty({ required: false })\r\n  file_url?: string;\r\n\r\n  @IsBoolean()\r\n  @IsOptional()\r\n  @ApiProperty({ default: false })\r\n  is_custom: boolean = false;\r\n\r\n  @IsString()\r\n  @IsOptional()\r\n  @ApiProperty({ required: false })\r\n  notes?: string;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Prescription/dto/create-prescription.dto.ts b/api/src/model/Prescription/dto/create-prescription.dto.ts
--- a/api/src/model/Prescription/dto/create-prescription.dto.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Prescription/dto/create-prescription.dto.ts	(date 1736262015382)
@@ -1,5 +1,12 @@
 // src/models/prescription/dto/create-prescription.dto.ts
-import { IsNotEmpty, IsString, IsBoolean, IsNumber, IsOptional, IsDate } from 'class-validator';
+import {
+  IsNotEmpty,
+  IsString,
+  IsBoolean,
+  IsNumber,
+  IsOptional,
+  IsDate,
+} from 'class-validator';
 import { ApiProperty } from '@nestjs/swagger';
 
 export class CreatePrescriptionDto {
@@ -37,4 +44,4 @@
   @IsOptional()
   @ApiProperty({ required: false })
   notes?: string;
-}
\ No newline at end of file
+}
Index: api/src/model/Prescription/prescription.entity.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/models/prescription/prescription.entity.ts\r\nimport { Entity, PrimaryGeneratedColumn, Column, ManyToOne, CreateDateColumn } from 'typeorm';\r\nimport { Client } from 'model/Client/client.entity';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport enum PrescriptionStatus {\r\n  PENDING = 'PENDING',\r\n  VERIFIED = 'VERIFIED',\r\n  REJECTED = 'REJECTED',\r\n  EXPIRED = 'EXPIRED'\r\n}\r\n\r\n@Entity('prescription')\r\nexport class Prescription {\r\n  @PrimaryGeneratedColumn()\r\n  @ApiProperty()\r\n  id_prescription: number;\r\n\r\n  @ManyToOne(() => Client, client => client.prescriptions)\r\n  client: Client;\r\n\r\n  @Column()\r\n  @ApiProperty()\r\n  client_id: number;  // Snake case pour cohérence avec la DB\r\n\r\n  @Column()\r\n  @ApiProperty()\r\n  prescribed_by: string;  // Renamed from doctorName for consistency\r\n\r\n  @Column({ type: 'text' })\r\n  @ApiProperty()\r\n  medication_details: string;\r\n\r\n  @CreateDateColumn()\r\n  @ApiProperty()\r\n  issue_date: Date;\r\n\r\n  @Column({ type: 'date' })\r\n  @ApiProperty()\r\n  expiry_date: Date;\r\n\r\n  @Column({ nullable: true })\r\n  @ApiProperty()\r\n  file_url: string;\r\n\r\n  @Column({\r\n    type: 'enum',\r\n    enum: PrescriptionStatus,\r\n    default: PrescriptionStatus.PENDING\r\n  })\r\n  @ApiProperty({ enum: PrescriptionStatus })\r\n  status: PrescriptionStatus;\r\n\r\n  @Column({ default: false })\r\n  @ApiProperty()\r\n  is_custom: boolean;\r\n\r\n  @Column({ type: 'integer', nullable: true })\r\n  @ApiProperty()\r\n  verified_by: number;\r\n\r\n  @Column({ type: 'timestamp', nullable: true })\r\n  @ApiProperty()\r\n  verification_date: Date;\r\n\r\n  @Column({ type: 'text', nullable: true })\r\n  @ApiProperty()\r\n  notes: string;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Prescription/prescription.entity.ts b/api/src/model/Prescription/prescription.entity.ts
--- a/api/src/model/Prescription/prescription.entity.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Prescription/prescription.entity.ts	(date 1736262015382)
@@ -1,5 +1,11 @@
 // src/models/prescription/prescription.entity.ts
-import { Entity, PrimaryGeneratedColumn, Column, ManyToOne, CreateDateColumn } from 'typeorm';
+import {
+  Entity,
+  PrimaryGeneratedColumn,
+  Column,
+  ManyToOne,
+  CreateDateColumn,
+} from 'typeorm';
 import { Client } from 'model/Client/client.entity';
 import { ApiProperty } from '@nestjs/swagger';
 
@@ -7,7 +13,7 @@
   PENDING = 'PENDING',
   VERIFIED = 'VERIFIED',
   REJECTED = 'REJECTED',
-  EXPIRED = 'EXPIRED'
+  EXPIRED = 'EXPIRED',
 }
 
 @Entity('prescription')
@@ -16,16 +22,16 @@
   @ApiProperty()
   id_prescription: number;
 
-  @ManyToOne(() => Client, client => client.prescriptions)
+  @ManyToOne(() => Client, (client) => client.prescriptions)
   client: Client;
 
   @Column()
   @ApiProperty()
-  client_id: number;  // Snake case pour cohérence avec la DB
+  client_id: number; // Snake case pour cohérence avec la DB
 
   @Column()
   @ApiProperty()
-  prescribed_by: string;  // Renamed from doctorName for consistency
+  prescribed_by: string; // Renamed from doctorName for consistency
 
   @Column({ type: 'text' })
   @ApiProperty()
@@ -46,7 +52,7 @@
   @Column({
     type: 'enum',
     enum: PrescriptionStatus,
-    default: PrescriptionStatus.PENDING
+    default: PrescriptionStatus.PENDING,
   })
   @ApiProperty({ enum: PrescriptionStatus })
   status: PrescriptionStatus;
@@ -66,4 +72,4 @@
   @Column({ type: 'text', nullable: true })
   @ApiProperty()
   notes: string;
-}
\ No newline at end of file
+}
Index: api/src/model/Prescription/prescription.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/Prescription/prescription.service.ts\r\nimport { Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { Prescription, PrescriptionStatus } from './prescription.entity';\r\nimport { CreatePrescriptionDto } from './dto/create-prescription.dto';\r\nimport { UpdatePrescriptionDto } from './dto/update-prescription.dto';\r\nimport { Client } from '../Client/client.entity';\r\n\r\n@Injectable()\r\nexport class PrescriptionService {\r\n  constructor(\r\n    @InjectRepository(Prescription)\r\n    private prescriptionRepository: Repository<Prescription>,\r\n    @InjectRepository(Client)\r\n    private clientRepository: Repository<Client>\r\n  ) {}\r\n\r\n  async create(createPrescriptionDto: CreatePrescriptionDto): Promise<Prescription> {\r\n    const client = await this.clientRepository.findOne({\r\n      where: { clientId: createPrescriptionDto.client_id }\r\n    });\r\n\r\n    if (!client) {\r\n      throw new NotFoundException(\r\n        `Client with ID ${createPrescriptionDto.client_id} not found`\r\n      );\r\n    }\r\n\r\n    const prescription = this.prescriptionRepository.create({\r\n      client_id: client.clientId,\r\n      prescribed_by: createPrescriptionDto.prescribed_by,\r\n      medication_details: createPrescriptionDto.medication_details,\r\n      expiry_date: createPrescriptionDto.expiry_date ||\r\n        new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 jours par défaut\r\n      file_url: createPrescriptionDto.file_url,\r\n      is_custom: createPrescriptionDto.is_custom,\r\n      notes: createPrescriptionDto.notes,\r\n      status: PrescriptionStatus.PENDING\r\n    });\r\n\r\n    const savedPrescription = await this.prescriptionRepository.save(prescription);\r\n    return this.findOne(savedPrescription.id_prescription);\r\n  }\r\n\r\n  async findAll(): Promise<Prescription[]> {\r\n    return this.prescriptionRepository.find({\r\n      relations: ['client'],\r\n      order: {\r\n        issue_date: 'DESC'\r\n      }\r\n    });\r\n  }\r\n\r\n  async findOne(id: number): Promise<Prescription> {\r\n    const prescription = await this.prescriptionRepository.findOne({\r\n      where: { id_prescription: id },\r\n      relations: ['client']\r\n    });\r\n\r\n    if (!prescription) {\r\n      throw new NotFoundException(`Prescription #${id} not found`);\r\n    }\r\n\r\n    return prescription;\r\n  }\r\n\r\n  async update(\r\n    id: number,\r\n    updatePrescriptionDto: UpdatePrescriptionDto\r\n  ): Promise<Prescription> {\r\n    const prescription = await this.findOne(id);\r\n\r\n    if (updatePrescriptionDto.client_id) {\r\n      const client = await this.clientRepository.findOne({\r\n        where: { clientId: updatePrescriptionDto.client_id }\r\n      });\r\n\r\n      if (!client) {\r\n        throw new NotFoundException(\r\n          `Client #${updatePrescriptionDto.client_id} not found`\r\n        );\r\n      }\r\n\r\n      prescription.client_id = client.clientId;\r\n    }\r\n\r\n    // Mise à jour des autres champs\r\n    const updatedPrescription = {\r\n      ...prescription,\r\n      prescribed_by: updatePrescriptionDto.prescribed_by ?? prescription.prescribed_by,\r\n      medication_details: updatePrescriptionDto.medication_details ??\r\n        prescription.medication_details,\r\n      expiry_date: updatePrescriptionDto.expiry_date ?? prescription.expiry_date,\r\n      file_url: updatePrescriptionDto.file_url ?? prescription.file_url,\r\n      is_custom: updatePrescriptionDto.is_custom ?? prescription.is_custom,\r\n      notes: updatePrescriptionDto.notes ?? prescription.notes\r\n    };\r\n\r\n    await this.prescriptionRepository.save(updatedPrescription);\r\n    return this.findOne(id);\r\n  }\r\n\r\n  async remove(id: number): Promise<void> {\r\n    const prescription = await this.findOne(id);\r\n    await this.prescriptionRepository.remove(prescription);\r\n  }\r\n\r\n  async findAllByClient(clientId: number): Promise<Prescription[]> {\r\n    return this.prescriptionRepository.find({\r\n      where: { client_id: clientId },\r\n      relations: ['client'],\r\n      order: {\r\n        issue_date: 'DESC'\r\n      }\r\n    });\r\n  }\r\n\r\n  async verifyPrescription(\r\n    id: number,\r\n    pharmacistId: number,\r\n    status: PrescriptionStatus\r\n  ): Promise<Prescription> {\r\n    const prescription = await this.findOne(id);\r\n\r\n    prescription.status = status;\r\n    prescription.verified_by = pharmacistId;\r\n    prescription.verification_date = new Date();\r\n\r\n    return this.prescriptionRepository.save(prescription);\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Prescription/prescription.service.ts b/api/src/model/Prescription/prescription.service.ts
--- a/api/src/model/Prescription/prescription.service.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Prescription/prescription.service.ts	(date 1736262015382)
@@ -13,17 +13,19 @@
     @InjectRepository(Prescription)
     private prescriptionRepository: Repository<Prescription>,
     @InjectRepository(Client)
-    private clientRepository: Repository<Client>
+    private clientRepository: Repository<Client>,
   ) {}
 
-  async create(createPrescriptionDto: CreatePrescriptionDto): Promise<Prescription> {
+  async create(
+    createPrescriptionDto: CreatePrescriptionDto,
+  ): Promise<Prescription> {
     const client = await this.clientRepository.findOne({
-      where: { clientId: createPrescriptionDto.client_id }
+      where: { clientId: createPrescriptionDto.client_id },
     });
 
     if (!client) {
       throw new NotFoundException(
-        `Client with ID ${createPrescriptionDto.client_id} not found`
+        `Client with ID ${createPrescriptionDto.client_id} not found`,
       );
     }
 
@@ -31,15 +33,17 @@
       client_id: client.clientId,
       prescribed_by: createPrescriptionDto.prescribed_by,
       medication_details: createPrescriptionDto.medication_details,
-      expiry_date: createPrescriptionDto.expiry_date ||
+      expiry_date:
+        createPrescriptionDto.expiry_date ||
         new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 jours par défaut
       file_url: createPrescriptionDto.file_url,
       is_custom: createPrescriptionDto.is_custom,
       notes: createPrescriptionDto.notes,
-      status: PrescriptionStatus.PENDING
+      status: PrescriptionStatus.PENDING,
     });
 
-    const savedPrescription = await this.prescriptionRepository.save(prescription);
+    const savedPrescription =
+      await this.prescriptionRepository.save(prescription);
     return this.findOne(savedPrescription.id_prescription);
   }
 
@@ -47,15 +51,15 @@
     return this.prescriptionRepository.find({
       relations: ['client'],
       order: {
-        issue_date: 'DESC'
-      }
+        issue_date: 'DESC',
+      },
     });
   }
 
   async findOne(id: number): Promise<Prescription> {
     const prescription = await this.prescriptionRepository.findOne({
       where: { id_prescription: id },
-      relations: ['client']
+      relations: ['client'],
     });
 
     if (!prescription) {
@@ -67,18 +71,18 @@
 
   async update(
     id: number,
-    updatePrescriptionDto: UpdatePrescriptionDto
+    updatePrescriptionDto: UpdatePrescriptionDto,
   ): Promise<Prescription> {
     const prescription = await this.findOne(id);
 
     if (updatePrescriptionDto.client_id) {
       const client = await this.clientRepository.findOne({
-        where: { clientId: updatePrescriptionDto.client_id }
+        where: { clientId: updatePrescriptionDto.client_id },
       });
 
       if (!client) {
         throw new NotFoundException(
-          `Client #${updatePrescriptionDto.client_id} not found`
+          `Client #${updatePrescriptionDto.client_id} not found`,
         );
       }
 
@@ -88,13 +92,16 @@
     // Mise à jour des autres champs
     const updatedPrescription = {
       ...prescription,
-      prescribed_by: updatePrescriptionDto.prescribed_by ?? prescription.prescribed_by,
-      medication_details: updatePrescriptionDto.medication_details ??
+      prescribed_by:
+        updatePrescriptionDto.prescribed_by ?? prescription.prescribed_by,
+      medication_details:
+        updatePrescriptionDto.medication_details ??
         prescription.medication_details,
-      expiry_date: updatePrescriptionDto.expiry_date ?? prescription.expiry_date,
+      expiry_date:
+        updatePrescriptionDto.expiry_date ?? prescription.expiry_date,
       file_url: updatePrescriptionDto.file_url ?? prescription.file_url,
       is_custom: updatePrescriptionDto.is_custom ?? prescription.is_custom,
-      notes: updatePrescriptionDto.notes ?? prescription.notes
+      notes: updatePrescriptionDto.notes ?? prescription.notes,
     };
 
     await this.prescriptionRepository.save(updatedPrescription);
@@ -111,15 +118,15 @@
       where: { client_id: clientId },
       relations: ['client'],
       order: {
-        issue_date: 'DESC'
-      }
+        issue_date: 'DESC',
+      },
     });
   }
 
   async verifyPrescription(
     id: number,
     pharmacistId: number,
-    status: PrescriptionStatus
+    status: PrescriptionStatus,
   ): Promise<Prescription> {
     const prescription = await this.findOne(id);
 
@@ -129,4 +136,4 @@
 
     return this.prescriptionRepository.save(prescription);
   }
-}
\ No newline at end of file
+}
Index: api/src/model/Administrator/administrator.controller.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/controllers/administrator.controller.ts\r\nimport { Controller, Post, Body, Get, Param, Patch, Delete, UseGuards } from '@nestjs/common';\r\nimport { UpdateAdministratorDto } from './dto/update-administrator.dto';\r\nimport { Administrator } from './administrator.entity';\r\nimport { CreateAdministratorDto } from './dto/create-administrator.dto';\r\nimport { AdministratorService } from './administrator.service';\r\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\r\n\r\n@ApiTags('administrators')\r\n@Controller('administrators')\r\n//@ApiBearerAuth('access-token') // Indique que ce contrôleur nécessite un token d'accès\r\nexport class AdministratorController {\r\n  constructor(private readonly administratorService: AdministratorService) {}\r\n\r\n  @Post()\r\n  async create(@Body() createAdministratorDto: CreateAdministratorDto): Promise<Administrator> {\r\n    return this.administratorService.create(createAdministratorDto);\r\n  }\r\n\r\n  @Get()\r\n  async findAll(): Promise<Administrator[]> {\r\n    return this.administratorService.findAll();\r\n  }\r\n\r\n  @Get(':id')\r\n  async findOne(@Param('id') id: number): Promise<Administrator> {\r\n    return this.administratorService.findOne(id);\r\n  }\r\n\r\n  @Patch(':id')\r\n  async update(@Param('id') id: number, @Body() updateAdministratorDto: UpdateAdministratorDto): Promise<Administrator> {\r\n    return this.administratorService.update(id, updateAdministratorDto);\r\n  }\r\n\r\n  @Delete(':id')\r\n  async remove(@Param('id') id: number): Promise<void> {\r\n    return this.administratorService.remove(id);\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Administrator/administrator.controller.ts b/api/src/model/Administrator/administrator.controller.ts
--- a/api/src/model/Administrator/administrator.controller.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Administrator/administrator.controller.ts	(date 1736262015380)
@@ -1,5 +1,14 @@
 // src/controllers/administrator.controller.ts
-import { Controller, Post, Body, Get, Param, Patch, Delete, UseGuards } from '@nestjs/common';
+import {
+  Controller,
+  Post,
+  Body,
+  Get,
+  Param,
+  Patch,
+  Delete,
+  UseGuards,
+} from '@nestjs/common';
 import { UpdateAdministratorDto } from './dto/update-administrator.dto';
 import { Administrator } from './administrator.entity';
 import { CreateAdministratorDto } from './dto/create-administrator.dto';
@@ -13,7 +22,9 @@
   constructor(private readonly administratorService: AdministratorService) {}
 
   @Post()
-  async create(@Body() createAdministratorDto: CreateAdministratorDto): Promise<Administrator> {
+  async create(
+    @Body() createAdministratorDto: CreateAdministratorDto,
+  ): Promise<Administrator> {
     return this.administratorService.create(createAdministratorDto);
   }
 
@@ -28,7 +39,10 @@
   }
 
   @Patch(':id')
-  async update(@Param('id') id: number, @Body() updateAdministratorDto: UpdateAdministratorDto): Promise<Administrator> {
+  async update(
+    @Param('id') id: number,
+    @Body() updateAdministratorDto: UpdateAdministratorDto,
+  ): Promise<Administrator> {
     return this.administratorService.update(id, updateAdministratorDto);
   }
 
Index: api/src/model/Administrator/administrator.entity.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Entity, PrimaryGeneratedColumn, OneToOne, JoinColumn, OneToMany } from 'typeorm';\r\nimport { User } from '../User/user.entity';\r\nimport { Appointment } from 'model/Appointment/appointment.entity';\r\n\r\n@Entity()\r\nexport class Administrator {\r\n  @PrimaryGeneratedColumn()\r\n  adminId: number;\r\n\r\n  @OneToOne(() => User, (user) => user.administrator)\r\n  @JoinColumn()\r\n  user: User;\r\n  @OneToMany(() => Appointment, (appointment) => appointment.administrator)\r\n  appointments: Appointment[];\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Administrator/administrator.entity.ts b/api/src/model/Administrator/administrator.entity.ts
--- a/api/src/model/Administrator/administrator.entity.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Administrator/administrator.entity.ts	(date 1736262015380)
@@ -1,4 +1,10 @@
-import { Entity, PrimaryGeneratedColumn, OneToOne, JoinColumn, OneToMany } from 'typeorm';
+import {
+  Entity,
+  PrimaryGeneratedColumn,
+  OneToOne,
+  JoinColumn,
+  OneToMany,
+} from 'typeorm';
 import { User } from '../User/user.entity';
 import { Appointment } from 'model/Appointment/appointment.entity';
 
@@ -12,5 +18,4 @@
   user: User;
   @OneToMany(() => Appointment, (appointment) => appointment.administrator)
   appointments: Appointment[];
-
 }
Index: api/src/model/Administrator/administrator.module.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/Administrator/administrator.module.ts\r\nimport { Module, forwardRef } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { AdministratorService } from './administrator.service';\r\nimport { UserModule } from '../User/user.module'; // Importez le UserModule\r\nimport { AdministratorController } from './administrator.controller';\r\nimport { Administrator } from './administrator.entity';\r\n\r\n\r\n@Module({\r\n\r\n  imports: [\r\n    TypeOrmModule.forFeature([Administrator]),\r\n    UserModule,\r\n    forwardRef(() => UserModule), // Utilisez forwardRef ici\r\n  ],\r\n  controllers: [AdministratorController],\r\n  providers: [AdministratorService],\r\n  exports: [AdministratorService, TypeOrmModule.forFeature([Administrator])], // Exportez le repository si nécessaire\r\n})\r\nexport class AdministratorModule {}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Administrator/administrator.module.ts b/api/src/model/Administrator/administrator.module.ts
--- a/api/src/model/Administrator/administrator.module.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Administrator/administrator.module.ts	(date 1736262015380)
@@ -6,9 +6,7 @@
 import { AdministratorController } from './administrator.controller';
 import { Administrator } from './administrator.entity';
 
-
 @Module({
-
   imports: [
     TypeOrmModule.forFeature([Administrator]),
     UserModule,
Index: api/src/model/Administrator/dto/update-administrator.dto.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/dto/update-administrator.dto.ts\r\nimport { ApiProperty } from '@nestjs/swagger';\r\nimport { IsNotEmpty, IsOptional } from 'class-validator';\r\n\r\nexport class UpdateAdministratorDto {\r\n  @IsNotEmpty()\r\n  @ApiProperty({ description: \"The ID of the user (required)\" })\r\n  userId: number;\r\n\r\n  @IsOptional()\r\n  @ApiProperty({ description: \"Optional: Username or other administrator properties to update\" })\r\n  user?: string; // Propriétés facultatives à mettre à jour (comme le nom d'utilisateur, par exemple)\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Administrator/dto/update-administrator.dto.ts b/api/src/model/Administrator/dto/update-administrator.dto.ts
--- a/api/src/model/Administrator/dto/update-administrator.dto.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Administrator/dto/update-administrator.dto.ts	(date 1736262015380)
@@ -4,10 +4,13 @@
 
 export class UpdateAdministratorDto {
   @IsNotEmpty()
-  @ApiProperty({ description: "The ID of the user (required)" })
+  @ApiProperty({ description: 'The ID of the user (required)' })
   userId: number;
 
   @IsOptional()
-  @ApiProperty({ description: "Optional: Username or other administrator properties to update" })
+  @ApiProperty({
+    description:
+      'Optional: Username or other administrator properties to update',
+  })
   user?: string; // Propriétés facultatives à mettre à jour (comme le nom d'utilisateur, par exemple)
 }
Index: api/src/model/ProductPromotion/productPromotion.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/services/productPromotion.service.ts\r\nimport { Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { ProductPromotion } from './productPromotion.entity';\r\n\r\n\r\nimport { CreateProductPromotionDto } from './dto/create-productPromotion.dto';\r\nimport { UpdateProductPromotionDto } from './dto/update-productPromotion.dto';\r\nimport { Product } from 'model/Product/product.entity';\r\nimport { Promotion } from 'model/Promotion/promotion.entity';\r\n\r\n@Injectable()\r\nexport class ProductPromotionService {\r\n  constructor(\r\n    @InjectRepository(ProductPromotion)\r\n    private readonly productPromotionRepository: Repository<ProductPromotion>,\r\n    @InjectRepository(Product)\r\n    private readonly productRepository: Repository<Product>,\r\n    @InjectRepository(Promotion)\r\n    private readonly promotionRepository: Repository<Promotion>,\r\n  ) {}\r\n\r\n  async create(createProductPromotionDto: CreateProductPromotionDto): Promise<ProductPromotion> {\r\n    const product = await this.productRepository.findOne({ where: { id_product: createProductPromotionDto.productId } });\r\n    const promotion = await this.promotionRepository.findOne({ where: { id_promotion: createProductPromotionDto.promotionId } });\r\n\r\n    if (!product || !promotion) {\r\n      throw new NotFoundException('Product or Promotion not found');\r\n    }\r\n\r\n    const productPromotion = this.productPromotionRepository.create({\r\n      product,\r\n      promotion,\r\n    });\r\n\r\n    return this.productPromotionRepository.save(productPromotion);\r\n  }\r\n\r\n  async findAll(): Promise<ProductPromotion[]> {\r\n    return this.productPromotionRepository.find({ relations: ['product', 'promotion'] });\r\n  }\r\n\r\n  async findOne(id: number): Promise<ProductPromotion> {\r\n    const productPromotion = await this.productPromotionRepository.findOne({\r\n      where: { id_product_promotion: id },\r\n      relations: ['product', 'promotion'],\r\n    });\r\n    if (!productPromotion) {\r\n      throw new NotFoundException(`ProductPromotion with ID ${id} not found`);\r\n    }\r\n    return productPromotion;\r\n  }\r\n\r\n  async update(id: number, updateProductPromotionDto: UpdateProductPromotionDto): Promise<ProductPromotion> {\r\n    const productPromotion = await this.findOne(id);\r\n\r\n    if (updateProductPromotionDto.productId) {\r\n      const product = await this.productRepository.findOne({ where: { id_product: updateProductPromotionDto.productId } });\r\n      if (!product) {\r\n        throw new NotFoundException('Product not found');\r\n      }\r\n      productPromotion.product = product;\r\n    }\r\n\r\n    if (updateProductPromotionDto.promotionId) {\r\n      const promotion = await this.promotionRepository.findOne({ where: { id_promotion: updateProductPromotionDto.promotionId } });\r\n      if (!promotion) {\r\n        throw new NotFoundException('Promotion not found');\r\n      }\r\n      productPromotion.promotion = promotion;\r\n    }\r\n\r\n    return this.productPromotionRepository.save(productPromotion);\r\n  }\r\n\r\n  async remove(id: number): Promise<void> {\r\n    const productPromotion = await this.findOne(id);\r\n    await this.productPromotionRepository.remove(productPromotion);\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/ProductPromotion/productPromotion.service.ts b/api/src/model/ProductPromotion/productPromotion.service.ts
--- a/api/src/model/ProductPromotion/productPromotion.service.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/ProductPromotion/productPromotion.service.ts	(date 1736262015382)
@@ -4,7 +4,6 @@
 import { Repository } from 'typeorm';
 import { ProductPromotion } from './productPromotion.entity';
 
-
 import { CreateProductPromotionDto } from './dto/create-productPromotion.dto';
 import { UpdateProductPromotionDto } from './dto/update-productPromotion.dto';
 import { Product } from 'model/Product/product.entity';
@@ -21,9 +20,15 @@
     private readonly promotionRepository: Repository<Promotion>,
   ) {}
 
-  async create(createProductPromotionDto: CreateProductPromotionDto): Promise<ProductPromotion> {
-    const product = await this.productRepository.findOne({ where: { id_product: createProductPromotionDto.productId } });
-    const promotion = await this.promotionRepository.findOne({ where: { id_promotion: createProductPromotionDto.promotionId } });
+  async create(
+    createProductPromotionDto: CreateProductPromotionDto,
+  ): Promise<ProductPromotion> {
+    const product = await this.productRepository.findOne({
+      where: { id_product: createProductPromotionDto.productId },
+    });
+    const promotion = await this.promotionRepository.findOne({
+      where: { id_promotion: createProductPromotionDto.promotionId },
+    });
 
     if (!product || !promotion) {
       throw new NotFoundException('Product or Promotion not found');
@@ -38,7 +43,9 @@
   }
 
   async findAll(): Promise<ProductPromotion[]> {
-    return this.productPromotionRepository.find({ relations: ['product', 'promotion'] });
+    return this.productPromotionRepository.find({
+      relations: ['product', 'promotion'],
+    });
   }
 
   async findOne(id: number): Promise<ProductPromotion> {
@@ -52,11 +59,16 @@
     return productPromotion;
   }
 
-  async update(id: number, updateProductPromotionDto: UpdateProductPromotionDto): Promise<ProductPromotion> {
+  async update(
+    id: number,
+    updateProductPromotionDto: UpdateProductPromotionDto,
+  ): Promise<ProductPromotion> {
     const productPromotion = await this.findOne(id);
 
     if (updateProductPromotionDto.productId) {
-      const product = await this.productRepository.findOne({ where: { id_product: updateProductPromotionDto.productId } });
+      const product = await this.productRepository.findOne({
+        where: { id_product: updateProductPromotionDto.productId },
+      });
       if (!product) {
         throw new NotFoundException('Product not found');
       }
@@ -64,7 +76,9 @@
     }
 
     if (updateProductPromotionDto.promotionId) {
-      const promotion = await this.promotionRepository.findOne({ where: { id_promotion: updateProductPromotionDto.promotionId } });
+      const promotion = await this.promotionRepository.findOne({
+        where: { id_promotion: updateProductPromotionDto.promotionId },
+      });
       if (!promotion) {
         throw new NotFoundException('Promotion not found');
       }
Index: api/src/model/Administrator/administrator.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Inject, Injectable, NotFoundException, forwardRef } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { Administrator } from './administrator.entity';\r\nimport { CreateAdministratorDto } from './dto/create-administrator.dto';\r\nimport { UpdateAdministratorDto } from './dto/update-administrator.dto';\r\nimport { User } from '../User/user.entity'; // Assurez-vous d'importer l'entité User\r\nimport { UserService } from 'model/User/user.service';\r\n\r\n\r\n@Injectable()\r\nexport class AdministratorService {\r\n  constructor(\r\n    @InjectRepository(Administrator)\r\n    private readonly administratorRepository: Repository<Administrator>,\r\n    @Inject(forwardRef(() => UserService))\r\n    @InjectRepository(User)\r\n    private readonly userRepository: Repository<User>,\r\n  ) {}\r\n\r\n  async create(createAdminDto: CreateAdministratorDto): Promise<Administrator> {\r\n    const administrator = this.administratorRepository.create({\r\n      user: { userId: createAdminDto.userId } // Utilisez la référence correcte\r\n    });\r\n\r\n    return await this.administratorRepository.save(administrator);\r\n  }\r\n\r\n  async findAll(): Promise<Administrator[]> {\r\n    return this.administratorRepository.find({ relations: ['user'] }); // Inclure les relations si nécessaire\r\n  }\r\n\r\n  async findOne(id: number): Promise<Administrator> {\r\n    const administrator = await this.administratorRepository.findOne({\r\n      where: { adminId: id },\r\n      relations: ['user'],\r\n    });\r\n    if (!administrator) {\r\n      throw new NotFoundException(`Administrateur avec l'ID ${id} non trouvé`);\r\n    }\r\n    return administrator;\r\n  }\r\n\r\n  async update(id: number, updateAdministratorDto: UpdateAdministratorDto): Promise<Administrator> {\r\n    const administrator = await this.findOne(id);\r\n    const user = await this.userRepository.findOne({ where: { userId: updateAdministratorDto.userId } });\r\n    if (!user) {\r\n      throw new NotFoundException(`Utilisateur avec l'ID ${updateAdministratorDto.userId} non trouvé`);\r\n    }\r\n\r\n    this.administratorRepository.merge(administrator, {\r\n      user,\r\n      // Ajoutez d'autres propriétés si nécessaire\r\n    });\r\n    return this.administratorRepository.save(administrator);\r\n  }\r\n\r\n  async remove(id: number): Promise<void> {\r\n    const administrator = await this.findOne(id);\r\n    await this.administratorRepository.remove(administrator);\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Administrator/administrator.service.ts b/api/src/model/Administrator/administrator.service.ts
--- a/api/src/model/Administrator/administrator.service.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Administrator/administrator.service.ts	(date 1736262015380)
@@ -1,4 +1,9 @@
-import { Inject, Injectable, NotFoundException, forwardRef } from '@nestjs/common';
+import {
+  Inject,
+  Injectable,
+  NotFoundException,
+  forwardRef,
+} from '@nestjs/common';
 import { InjectRepository } from '@nestjs/typeorm';
 import { Repository } from 'typeorm';
 import { Administrator } from './administrator.entity';
@@ -7,7 +12,6 @@
 import { User } from '../User/user.entity'; // Assurez-vous d'importer l'entité User
 import { UserService } from 'model/User/user.service';
 
-
 @Injectable()
 export class AdministratorService {
   constructor(
@@ -20,7 +24,7 @@
 
   async create(createAdminDto: CreateAdministratorDto): Promise<Administrator> {
     const administrator = this.administratorRepository.create({
-      user: { userId: createAdminDto.userId } // Utilisez la référence correcte
+      user: { userId: createAdminDto.userId }, // Utilisez la référence correcte
     });
 
     return await this.administratorRepository.save(administrator);
@@ -41,11 +45,18 @@
     return administrator;
   }
 
-  async update(id: number, updateAdministratorDto: UpdateAdministratorDto): Promise<Administrator> {
+  async update(
+    id: number,
+    updateAdministratorDto: UpdateAdministratorDto,
+  ): Promise<Administrator> {
     const administrator = await this.findOne(id);
-    const user = await this.userRepository.findOne({ where: { userId: updateAdministratorDto.userId } });
+    const user = await this.userRepository.findOne({
+      where: { userId: updateAdministratorDto.userId },
+    });
     if (!user) {
-      throw new NotFoundException(`Utilisateur avec l'ID ${updateAdministratorDto.userId} non trouvé`);
+      throw new NotFoundException(
+        `Utilisateur avec l'ID ${updateAdministratorDto.userId} non trouvé`,
+      );
     }
 
     this.administratorRepository.merge(administrator, {
Index: api/src/model/Administrator/dto/create-administrator.dto.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/dto/create-administrator.dto.ts\r\nimport { ApiProperty } from '@nestjs/swagger';\r\nimport { IsNotEmpty, IsNumber } from 'class-validator';\r\n\r\nexport class CreateAdministratorDto {\r\n  @IsNotEmpty()\r\n  @ApiProperty()\r\n  @IsNumber()\r\n  userId: number; // The ID of the user\r\n  @ApiProperty()\r\n  ID_admin: number; // Si c'est auto-généré, ne l'incluez pas ici\r\n  @ApiProperty()\r\n  user: string; // Assurez-vous que cela existe dans l'entité\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/Administrator/dto/create-administrator.dto.ts b/api/src/model/Administrator/dto/create-administrator.dto.ts
--- a/api/src/model/Administrator/dto/create-administrator.dto.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/Administrator/dto/create-administrator.dto.ts	(date 1736262015380)
@@ -12,4 +12,3 @@
   @ApiProperty()
   user: string; // Assurez-vous que cela existe dans l'entité
 }
-
Index: api/src/model/ProductPromotion/productPromotion.entity.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Product } from \"model/Product/product.entity\";\r\nimport { Promotion } from \"model/Promotion/promotion.entity\";\r\nimport { Column, Entity, JoinColumn, ManyToOne, PrimaryGeneratedColumn } from \"typeorm\";\r\n\r\n@Entity('product_promotion')\r\nexport class ProductPromotion {\r\n  @PrimaryGeneratedColumn()\r\n  id_product_promotion: number;\r\n\r\n  @Column({ name: 'id_product', type: 'integer', nullable: false })\r\n  id_product: number;\r\n\r\n  @Column({ name: 'id_promotion', type: 'integer', nullable: false })\r\n  id_promotion: number;\r\n\r\n  @ManyToOne(() => Product, { nullable: false })\r\n  @JoinColumn({ name: 'id_product' })\r\n  product: Product;\r\n\r\n  @ManyToOne(() => Promotion, { nullable: false })\r\n  @JoinColumn({ name: 'id_promotion' })\r\n  promotion: Promotion;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/ProductPromotion/productPromotion.entity.ts b/api/src/model/ProductPromotion/productPromotion.entity.ts
--- a/api/src/model/ProductPromotion/productPromotion.entity.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/ProductPromotion/productPromotion.entity.ts	(date 1736262015382)
@@ -1,6 +1,12 @@
-import { Product } from "model/Product/product.entity";
-import { Promotion } from "model/Promotion/promotion.entity";
-import { Column, Entity, JoinColumn, ManyToOne, PrimaryGeneratedColumn } from "typeorm";
+import { Product } from 'model/Product/product.entity';
+import { Promotion } from 'model/Promotion/promotion.entity';
+import {
+  Column,
+  Entity,
+  JoinColumn,
+  ManyToOne,
+  PrimaryGeneratedColumn,
+} from 'typeorm';
 
 @Entity('product_promotion')
 export class ProductPromotion {
@@ -20,4 +26,4 @@
   @ManyToOne(() => Promotion, { nullable: false })
   @JoinColumn({ name: 'id_promotion' })
   promotion: Promotion;
-}
\ No newline at end of file
+}
Index: api/src/model/ProductPromotion/productPromotion.controller.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/controllers/productPromotion.controller.ts\r\nimport { Controller, Get, Post, Body, Param, Put, Delete } from '@nestjs/common';\r\nimport { ProductPromotionService } from './productPromotion.service';\r\nimport { CreateProductPromotionDto } from './dto/create-productPromotion.dto';\r\nimport { UpdateProductPromotionDto } from './dto/update-productPromotion.dto';\r\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\r\n\r\n@ApiTags('product-promotions')\r\n@ApiBearerAuth('access-token')\r\n@Controller('product-promotions')\r\nexport class ProductPromotionController {\r\n  constructor(private readonly productPromotionService: ProductPromotionService) {}\r\n\r\n  @Post()\r\n  create(@Body() createProductPromotionDto: CreateProductPromotionDto) {\r\n    return this.productPromotionService.create(createProductPromotionDto);\r\n  }\r\n\r\n  @Get()\r\n  findAll() {\r\n    return this.productPromotionService.findAll();\r\n  }\r\n\r\n  @Get(':id')\r\n  findOne(@Param('id') id: string) {\r\n    return this.productPromotionService.findOne(+id);\r\n  }\r\n\r\n  @Put(':id')\r\n  update(@Param('id') id: string, @Body() updateProductPromotionDto: UpdateProductPromotionDto) {\r\n    return this.productPromotionService.update(+id, updateProductPromotionDto);\r\n  }\r\n\r\n  @Delete(':id')\r\n  remove(@Param('id') id: string) {\r\n    return this.productPromotionService.remove(+id);\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/ProductPromotion/productPromotion.controller.ts b/api/src/model/ProductPromotion/productPromotion.controller.ts
--- a/api/src/model/ProductPromotion/productPromotion.controller.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/ProductPromotion/productPromotion.controller.ts	(date 1736262015382)
@@ -1,5 +1,13 @@
 // src/controllers/productPromotion.controller.ts
-import { Controller, Get, Post, Body, Param, Put, Delete } from '@nestjs/common';
+import {
+  Controller,
+  Get,
+  Post,
+  Body,
+  Param,
+  Put,
+  Delete,
+} from '@nestjs/common';
 import { ProductPromotionService } from './productPromotion.service';
 import { CreateProductPromotionDto } from './dto/create-productPromotion.dto';
 import { UpdateProductPromotionDto } from './dto/update-productPromotion.dto';
@@ -9,7 +17,9 @@
 @ApiBearerAuth('access-token')
 @Controller('product-promotions')
 export class ProductPromotionController {
-  constructor(private readonly productPromotionService: ProductPromotionService) {}
+  constructor(
+    private readonly productPromotionService: ProductPromotionService,
+  ) {}
 
   @Post()
   create(@Body() createProductPromotionDto: CreateProductPromotionDto) {
@@ -27,7 +37,10 @@
   }
 
   @Put(':id')
-  update(@Param('id') id: string, @Body() updateProductPromotionDto: UpdateProductPromotionDto) {
+  update(
+    @Param('id') id: string,
+    @Body() updateProductPromotionDto: UpdateProductPromotionDto,
+  ) {
     return this.productPromotionService.update(+id, updateProductPromotionDto);
   }
 
Index: api/src/model/ProductPromotion/productPromotion.module.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/modules/productPromotion.module.ts\r\nimport { Module } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { ProductPromotionService } from './productPromotion.service';\r\nimport { ProductPromotionController } from './productPromotion.controller';\r\nimport { ProductPromotion } from './productPromotion.entity';\r\n\r\n\r\n@Module({\r\n  imports: [\r\n    TypeOrmModule.forFeature([ProductPromotion]),\r\n  ],\r\n  exports: [TypeOrmModule],\r\n})\r\nexport class ProductPromotionModule {}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/ProductPromotion/productPromotion.module.ts b/api/src/model/ProductPromotion/productPromotion.module.ts
--- a/api/src/model/ProductPromotion/productPromotion.module.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/ProductPromotion/productPromotion.module.ts	(date 1736262015382)
@@ -5,11 +5,8 @@
 import { ProductPromotionController } from './productPromotion.controller';
 import { ProductPromotion } from './productPromotion.entity';
 
-
 @Module({
-  imports: [
-    TypeOrmModule.forFeature([ProductPromotion]),
-  ],
+  imports: [TypeOrmModule.forFeature([ProductPromotion])],
   exports: [TypeOrmModule],
 })
 export class ProductPromotionModule {}
Index: api/src/common/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export * from './config';\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/common/index.ts b/api/src/common/index.ts
--- a/api/src/common/index.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/common/index.ts	(date 1736262015378)
@@ -1,2 +1,1 @@
 export * from './config';
-
Index: api/src/model/ProductPromotion/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/model/ProductPromotion/index.ts\r\nexport * from './productPromotion.entity';\r\nexport * from './productPromotion.module';
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/model/ProductPromotion/index.ts b/api/src/model/ProductPromotion/index.ts
--- a/api/src/model/ProductPromotion/index.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/model/ProductPromotion/index.ts	(date 1736262015382)
@@ -1,3 +1,3 @@
 // src/model/ProductPromotion/index.ts
 export * from './productPromotion.entity';
-export * from './productPromotion.module';
\ No newline at end of file
+export * from './productPromotion.module';
Index: api/src/common/config/config.manager.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {TypeOrmModuleOptions} from '@nestjs/typeorm';\r\nimport { ConfigKey, configMinimalKeys } from \"./enum\";\r\n\r\nrequire('dotenv').config();\r\nclass ConfigManager {\r\n  constructor(private env: { [k: string]: string | undefined }) {}\r\n  public ensureValues(keys: ConfigKey[]): ConfigManager {\r\n    keys.forEach((k: ConfigKey) => this.getValue(k, true));\r\n    return this;\r\n  }\r\n  public getTypeOrmConfig(): TypeOrmModuleOptions {\r\n    return {\r\n      type: this.getValue(ConfigKey.DB_TYPE) as any,\r\n      host: this.getValue(ConfigKey.DB_HOST),\r\n      port: parseInt(this.getValue(ConfigKey.DB_PORT)),\r\n      username: this.getValue(ConfigKey.DB_USER),\r\n      password: this.getValue(ConfigKey.DB_PASSWORD),\r\n      database: this.getValue(ConfigKey.DB_DATABASE),\r\n      entities: [__dirname + '/../../**/*.entity{.ts,.js}'],\r\n      synchronize: (this.getValue(ConfigKey.DB_SYNC)=== 'true'),\r\n    }\r\n  }\r\n  getValue(key: ConfigKey, throwOnMissing = true): string {\r\n    const value = this.env[key];\r\n    if (!value && throwOnMissing) {\r\n      throw new Error(`config error - missing env.${key}`);\r\n    }\r\n    return value;\r\n  }\r\n}\r\nconst configManager = new ConfigManager(process.env).ensureValues(configMinimalKeys);\r\nexport {configManager}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/common/config/config.manager.ts b/api/src/common/config/config.manager.ts
--- a/api/src/common/config/config.manager.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/common/config/config.manager.ts	(date 1736262015378)
@@ -1,5 +1,5 @@
-import {TypeOrmModuleOptions} from '@nestjs/typeorm';
-import { ConfigKey, configMinimalKeys } from "./enum";
+import { TypeOrmModuleOptions } from '@nestjs/typeorm';
+import { ConfigKey, configMinimalKeys } from './enum';
 
 require('dotenv').config();
 class ConfigManager {
@@ -17,8 +17,8 @@
       password: this.getValue(ConfigKey.DB_PASSWORD),
       database: this.getValue(ConfigKey.DB_DATABASE),
       entities: [__dirname + '/../../**/*.entity{.ts,.js}'],
-      synchronize: (this.getValue(ConfigKey.DB_SYNC)=== 'true'),
-    }
+      synchronize: this.getValue(ConfigKey.DB_SYNC) === 'true',
+    };
   }
   getValue(key: ConfigKey, throwOnMissing = true): string {
     const value = this.env[key];
@@ -28,5 +28,7 @@
     return value;
   }
 }
-const configManager = new ConfigManager(process.env).ensureValues(configMinimalKeys);
-export {configManager}
\ No newline at end of file
+const configManager = new ConfigManager(process.env).ensureValues(
+  configMinimalKeys,
+);
+export { configManager };
Index: api/src/common/config/api/http-exception.filter.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nimport { Response } from 'express';\r\nimport { ArgumentsHost, Catch, ExceptionFilter, HttpException, Logger } from \"@nestjs/common\";\r\n\r\n@Catch(HttpException)\r\nexport class HttpExceptionFilter implements ExceptionFilter {\r\n  catch(exception: HttpException, host: ArgumentsHost) {\r\n\r\n    const ctx = host.switchToHttp();\r\n    const response = ctx.getResponse<Response>();\r\n    response\r\n      .status(exception.getStatus())\r\n      .json(exception.getResponse());\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/common/config/api/http-exception.filter.ts b/api/src/common/config/api/http-exception.filter.ts
--- a/api/src/common/config/api/http-exception.filter.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/common/config/api/http-exception.filter.ts	(date 1736262015378)
@@ -1,15 +1,17 @@
-
 import { Response } from 'express';
-import { ArgumentsHost, Catch, ExceptionFilter, HttpException, Logger } from "@nestjs/common";
+import {
+  ArgumentsHost,
+  Catch,
+  ExceptionFilter,
+  HttpException,
+  Logger,
+} from '@nestjs/common';
 
 @Catch(HttpException)
 export class HttpExceptionFilter implements ExceptionFilter {
   catch(exception: HttpException, host: ArgumentsHost) {
-
     const ctx = host.switchToHttp();
     const response = ctx.getResponse<Response>();
-    response
-      .status(exception.getStatus())
-      .json(exception.getResponse());
+    response.status(exception.getStatus()).json(exception.getResponse());
   }
 }
Index: api/src/common/config/api/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export * from './model';\r\nexport * from './enum';\r\nexport * from './http-exception.filter';\r\nexport * from './api.interceptor';
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/common/config/api/index.ts b/api/src/common/config/api/index.ts
--- a/api/src/common/config/api/index.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/common/config/api/index.ts	(date 1736262015378)
@@ -1,4 +1,4 @@
 export * from './model';
 export * from './enum';
 export * from './http-exception.filter';
-export * from './api.interceptor';
\ No newline at end of file
+export * from './api.interceptor';
Index: api/src/common/config/typeorm.config.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { TypeOrmModuleOptions } from '@nestjs/typeorm';\r\n\r\nexport const typeOrmConfig: TypeOrmModuleOptions = {\r\n  type: process.env.DB_TYPE as 'mysql' | 'postgres' | 'sqlite' | 'mariadb' | 'mongodb',\r\n  host: process.env.DB_HOST,\r\n  port: parseInt(process.env.DB_PORT, 10) || 3306,\r\n  username: process.env.DB_USER,\r\n  password: process.env.DB_PASSWORD,\r\n  database: process.env.DB_DATABASE,\r\n  entities: [__dirname + '/../**/*.entity{.ts,.js}'],\r\n  synchronize: process.env.DB_SYNC === 'true',\r\n};\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/common/config/typeorm.config.ts b/api/src/common/config/typeorm.config.ts
--- a/api/src/common/config/typeorm.config.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/common/config/typeorm.config.ts	(date 1736262015378)
@@ -1,7 +1,12 @@
 import { TypeOrmModuleOptions } from '@nestjs/typeorm';
 
 export const typeOrmConfig: TypeOrmModuleOptions = {
-  type: process.env.DB_TYPE as 'mysql' | 'postgres' | 'sqlite' | 'mariadb' | 'mongodb',
+  type: process.env.DB_TYPE as
+    | 'mysql'
+    | 'postgres'
+    | 'sqlite'
+    | 'mariadb'
+    | 'mongodb',
   host: process.env.DB_HOST,
   port: parseInt(process.env.DB_PORT, 10) || 3306,
   username: process.env.DB_USER,
Index: api/src/common/config/api/enum/api-code.response.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { appendSuffixesIfMatch } from 'ts-loader/dist/utils';\r\n\r\nexport enum ApiCodeResponse{\r\n  TEST='api.result.test',\r\n  NO_TOKEN_FOUNDED='api.security.token-not-founded',\r\n  USER_NOT_FOUND='api.security.error.user-not-founded',\r\n  TOKEN_EXPIRED='api.security.error.token-expired',\r\n  SIGNUP_ERROR='api.credential.error.signup',\r\n  CREDENTIAL_DELETE_ERROR='api.credential.error.delete',\r\n  USER_ALREADY_EXIST='api.user.error.already-exist',\r\n  TOKEN_GEN_ERROR='api.token.error.gen',\r\n  PAYLOAD_IS_NOT_VALID = 'api.payload.error.is.not-valid',\r\n  PAYLOAD_PARAM_IS_MISSING ='api.payload.error.param-is-missing',\r\n  COMMON_SUCCESS = 'api.common.success',\r\n\r\n\r\n  //SIGNUP PART\r\n  ACCOUNT_SIGNUP_SUCCESS = 'api.feature.security.success.signup',\r\n  USERNAME_IS_NOT_EMPTY = 'api.feature.security.error.signup.username-is-not-empty',\r\n  USERNAME_MIN_LENGTH = 'api.feature.security.error.signup.username-min-length',\r\n\r\n  COMMON_ERROR = \"COMMON_ERROR\",\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/common/config/api/enum/api-code.response.ts b/api/src/common/config/api/enum/api-code.response.ts
--- a/api/src/common/config/api/enum/api-code.response.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/common/config/api/enum/api-code.response.ts	(date 1736262015378)
@@ -1,24 +1,22 @@
 import { appendSuffixesIfMatch } from 'ts-loader/dist/utils';
 
-export enum ApiCodeResponse{
-  TEST='api.result.test',
-  NO_TOKEN_FOUNDED='api.security.token-not-founded',
-  USER_NOT_FOUND='api.security.error.user-not-founded',
-  TOKEN_EXPIRED='api.security.error.token-expired',
-  SIGNUP_ERROR='api.credential.error.signup',
-  CREDENTIAL_DELETE_ERROR='api.credential.error.delete',
-  USER_ALREADY_EXIST='api.user.error.already-exist',
-  TOKEN_GEN_ERROR='api.token.error.gen',
+export enum ApiCodeResponse {
+  TEST = 'api.result.test',
+  NO_TOKEN_FOUNDED = 'api.security.token-not-founded',
+  USER_NOT_FOUND = 'api.security.error.user-not-founded',
+  TOKEN_EXPIRED = 'api.security.error.token-expired',
+  SIGNUP_ERROR = 'api.credential.error.signup',
+  CREDENTIAL_DELETE_ERROR = 'api.credential.error.delete',
+  USER_ALREADY_EXIST = 'api.user.error.already-exist',
+  TOKEN_GEN_ERROR = 'api.token.error.gen',
   PAYLOAD_IS_NOT_VALID = 'api.payload.error.is.not-valid',
-  PAYLOAD_PARAM_IS_MISSING ='api.payload.error.param-is-missing',
+  PAYLOAD_PARAM_IS_MISSING = 'api.payload.error.param-is-missing',
   COMMON_SUCCESS = 'api.common.success',
 
-
   //SIGNUP PART
   ACCOUNT_SIGNUP_SUCCESS = 'api.feature.security.success.signup',
   USERNAME_IS_NOT_EMPTY = 'api.feature.security.error.signup.username-is-not-empty',
   USERNAME_MIN_LENGTH = 'api.feature.security.error.signup.username-min-length',
 
-  COMMON_ERROR = "COMMON_ERROR",
-
-}
\ No newline at end of file
+  COMMON_ERROR = 'COMMON_ERROR',
+}
Index: api/src/common/config/api/model/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export * from './api.response';\r\nexport * from './api.exception';\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/common/config/api/model/index.ts b/api/src/common/config/api/model/index.ts
--- a/api/src/common/config/api/model/index.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/common/config/api/model/index.ts	(date 1736262015378)
@@ -1,4 +1,2 @@
 export * from './api.response';
 export * from './api.exception';
-
-
Index: api/src/common/config/api/api.interceptor.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { CallHandler, ExecutionContext, Injectable, Logger, NestInterceptor } from \"@nestjs/common\";\r\nimport { ApiCodeResponse } from \"./enum\";\r\nimport { configManager } from '@common/config';\r\nimport { ConfigKey } from \"../enum\";\r\nimport { isNil } from \"lodash\";\r\nimport { Observable, map, catchError, of } from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class ApiInterceptor implements NestInterceptor {\r\n  private readonly logger = new Logger(ApiInterceptor.name);\r\n\r\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\r\n    const ctx = context.switchToHttp();\r\n    const path = ctx.getRequest().route.path;\r\n\r\n    return next\r\n      .handle()\r\n      .pipe(\r\n        map((response: any) => {\r\n          return { code: this.map(path), data: response, result: true };\r\n        }),\r\n        catchError((error) => {\r\n          this.logger.error(error);\r\n          return of({ code: ApiCodeResponse.COMMON_ERROR, data: null, result: false });\r\n        })\r\n      );\r\n  }\r\n\r\n  map(path: string): ApiCodeResponse {\r\n    this.logger.log(`path ${path}`);\r\n    const part = path\r\n      .replace(configManager.getValue(ConfigKey.APP_BASE_URL), '')\r\n      .split('/')\r\n      .filter(s => s.length > 0)\r\n      .slice(0, 2)\r\n      .map(s => s.toUpperCase());\r\n\r\n    console.log(`codeResponse: ${part.join('_')}_SUCCESS`);\r\n    const code = ApiCodeResponse[`${part.join('_')}_SUCCESS` as keyof typeof ApiCodeResponse];\r\n    return isNil(code) ? ApiCodeResponse.COMMON_SUCCESS : code;\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/common/config/api/api.interceptor.ts b/api/src/common/config/api/api.interceptor.ts
--- a/api/src/common/config/api/api.interceptor.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/common/config/api/api.interceptor.ts	(date 1736262015378)
@@ -1,9 +1,15 @@
-import { CallHandler, ExecutionContext, Injectable, Logger, NestInterceptor } from "@nestjs/common";
-import { ApiCodeResponse } from "./enum";
+import {
+  CallHandler,
+  ExecutionContext,
+  Injectable,
+  Logger,
+  NestInterceptor,
+} from '@nestjs/common';
+import { ApiCodeResponse } from './enum';
 import { configManager } from '@common/config';
-import { ConfigKey } from "../enum";
-import { isNil } from "lodash";
-import { Observable, map, catchError, of } from "rxjs";
+import { ConfigKey } from '../enum';
+import { isNil } from 'lodash';
+import { Observable, map, catchError, of } from 'rxjs';
 
 @Injectable()
 export class ApiInterceptor implements NestInterceptor {
@@ -13,17 +19,19 @@
     const ctx = context.switchToHttp();
     const path = ctx.getRequest().route.path;
 
-    return next
-      .handle()
-      .pipe(
-        map((response: any) => {
-          return { code: this.map(path), data: response, result: true };
-        }),
-        catchError((error) => {
-          this.logger.error(error);
-          return of({ code: ApiCodeResponse.COMMON_ERROR, data: null, result: false });
-        })
-      );
+    return next.handle().pipe(
+      map((response: any) => {
+        return { code: this.map(path), data: response, result: true };
+      }),
+      catchError((error) => {
+        this.logger.error(error);
+        return of({
+          code: ApiCodeResponse.COMMON_ERROR,
+          data: null,
+          result: false,
+        });
+      }),
+    );
   }
 
   map(path: string): ApiCodeResponse {
@@ -31,12 +39,15 @@
     const part = path
       .replace(configManager.getValue(ConfigKey.APP_BASE_URL), '')
       .split('/')
-      .filter(s => s.length > 0)
+      .filter((s) => s.length > 0)
       .slice(0, 2)
-      .map(s => s.toUpperCase());
+      .map((s) => s.toUpperCase());
 
     console.log(`codeResponse: ${part.join('_')}_SUCCESS`);
-    const code = ApiCodeResponse[`${part.join('_')}_SUCCESS` as keyof typeof ApiCodeResponse];
+    const code =
+      ApiCodeResponse[
+        `${part.join('_')}_SUCCESS` as keyof typeof ApiCodeResponse
+      ];
     return isNil(code) ? ApiCodeResponse.COMMON_SUCCESS : code;
   }
 }
Index: api/src/common/config/enum/config-key.enum.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export enum ConfigKey {\r\n  DB_HOST = 'DB_HOST',\r\n  DB_PORT = 'DB_PORT',\r\n  DB_USER = 'DB_USER',\r\n  DB_PASSWORD = 'DB_PASSWORD',\r\n  DB_DATABASE = 'DB_DATABASE',\r\n  JWT_TOKEN_SECRET = 'JWT_TOKEN_SECRET',\r\n  JWT_TOKEN_EXPIRE_IN = 'JWT_TOKEN_EXPIRE_IN',\r\n  JWT_REFRESH_TOKEN_SECRET = 'JWT_REFRESH_TOKEN_SECRET',\r\n  JWT_REFRESH_TOKEN_EXPIRE_IN = 'JWT_REFRESH_TOKEN_EXPIRE_IN',\r\n  APP_BASE_URL = 'APP_BASE_URL',\r\n  APP_MODE = 'APP_MODE',\r\n  APP_PORT = 'APP_PORT',\r\n  DB_TYPE='DB_TYPE',\r\n  DB_SYNC='DB_SYNC'\r\n\r\n}\r\nexport const configMinimalKeys: ConfigKey[] = Object.keys(ConfigKey) as ConfigKey[];
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/common/config/enum/config-key.enum.ts b/api/src/common/config/enum/config-key.enum.ts
--- a/api/src/common/config/enum/config-key.enum.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/common/config/enum/config-key.enum.ts	(date 1736262015378)
@@ -11,8 +11,9 @@
   APP_BASE_URL = 'APP_BASE_URL',
   APP_MODE = 'APP_MODE',
   APP_PORT = 'APP_PORT',
-  DB_TYPE='DB_TYPE',
-  DB_SYNC='DB_SYNC'
-
+  DB_TYPE = 'DB_TYPE',
+  DB_SYNC = 'DB_SYNC',
 }
-export const configMinimalKeys: ConfigKey[] = Object.keys(ConfigKey) as ConfigKey[];
\ No newline at end of file
+export const configMinimalKeys: ConfigKey[] = Object.keys(
+  ConfigKey,
+) as ConfigKey[];
Index: api/src/common/config/enum/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export * from './config-key.enum';
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/common/config/enum/index.ts b/api/src/common/config/enum/index.ts
--- a/api/src/common/config/enum/index.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/common/config/enum/index.ts	(date 1736262015378)
@@ -1,1 +1,1 @@
-export * from './config-key.enum';
\ No newline at end of file
+export * from './config-key.enum';
Index: api/src/common/config/api/model/api.response.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { ApiCodeResponse } from \"../enum\";\r\n\r\nexport interface ApiResponse{\r\n  code:ApiCodeResponse;\r\n  data:any;\r\n  result:boolean;\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/common/config/api/model/api.response.ts b/api/src/common/config/api/model/api.response.ts
--- a/api/src/common/config/api/model/api.response.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/common/config/api/model/api.response.ts	(date 1736262015378)
@@ -1,8 +1,7 @@
-import { ApiCodeResponse } from "../enum";
+import { ApiCodeResponse } from '../enum';
 
-export interface ApiResponse{
-  code:ApiCodeResponse;
-  data:any;
-  result:boolean;
-
-}
\ No newline at end of file
+export interface ApiResponse {
+  code: ApiCodeResponse;
+  data: any;
+  result: boolean;
+}
Index: api/src/common/config/api/model/api.exception.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { HttpException, ValidationError } from \"@nestjs/common\";\r\nimport { ApiCodeResponse } from \"../enum\";\r\nimport { ApiResponse } from '@common/config';\r\nimport { isNil, result } from \"lodash\";\r\n\r\n\r\nexport class ApiException extends HttpException{\r\n\r\n  constructor(code:ApiCodeResponse, status:number) {\r\n    const apiResponse:ApiResponse =\r\n      {\r\n        code: code,\r\n        data: null,\r\n        result: false\r\n      }\r\n    super(apiResponse, status);\r\n  }\r\n}\r\nexport class ValidationException extends HttpException{\r\n\r\n  constructor(errors: ValidationError[]) {\r\n    const apiResponse:ApiResponse ={\r\n      code: ApiCodeResponse.PAYLOAD_IS_NOT_VALID,\r\n      data: errors.map((e:ValidationError) =>validationErrorToApiCodeResponse(e)).flat(),\r\n      result : false\r\n    }\r\n    super(apiResponse, 499);\r\n  }\r\n}\r\nexport const validationErrorToApiCodeResponse = (error: ValidationError): ApiCodeResponse[] =>\r\n{\r\n\r\n  console.log(error.constraints);\r\n  console.log(Object.keys (error.constraints));\r\n  console.log(Object.values(error.constraints));\r\n\r\n  return Object.keys(error.constraints).map((k: string) => {\r\n    console.log(`${camelToSnake(error.property)}_${camelToSnake(k)}`, `${camelToSnake(error.property)}_${camelToSnake(k)}`);\r\n    const code = ApiCodeResponse[`${camelToSnake(error.property)}_${camelToSnake(k)}` as\r\n      keyof typeof ApiCodeResponse];\r\n    return isNil(code) ? ApiCodeResponse.PAYLOAD_PARAM_IS_MISSING : code;\r\n  });\r\n}\r\nexport const camelToSnake = (str: string): string => {\r\n  return str.replace(/([A-Z])/g, \" $1\").split(' ').join('_').toUpperCase();\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/common/config/api/model/api.exception.ts b/api/src/common/config/api/model/api.exception.ts
--- a/api/src/common/config/api/model/api.exception.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/common/config/api/model/api.exception.ts	(date 1736262015378)
@@ -1,46 +1,53 @@
-import { HttpException, ValidationError } from "@nestjs/common";
-import { ApiCodeResponse } from "../enum";
+import { HttpException, ValidationError } from '@nestjs/common';
+import { ApiCodeResponse } from '../enum';
 import { ApiResponse } from '@common/config';
-import { isNil, result } from "lodash";
-
+import { isNil, result } from 'lodash';
 
-export class ApiException extends HttpException{
-
-  constructor(code:ApiCodeResponse, status:number) {
-    const apiResponse:ApiResponse =
-      {
-        code: code,
-        data: null,
-        result: false
-      }
+export class ApiException extends HttpException {
+  constructor(code: ApiCodeResponse, status: number) {
+    const apiResponse: ApiResponse = {
+      code: code,
+      data: null,
+      result: false,
+    };
     super(apiResponse, status);
   }
 }
-export class ValidationException extends HttpException{
-
+export class ValidationException extends HttpException {
   constructor(errors: ValidationError[]) {
-    const apiResponse:ApiResponse ={
+    const apiResponse: ApiResponse = {
       code: ApiCodeResponse.PAYLOAD_IS_NOT_VALID,
-      data: errors.map((e:ValidationError) =>validationErrorToApiCodeResponse(e)).flat(),
-      result : false
-    }
+      data: errors
+        .map((e: ValidationError) => validationErrorToApiCodeResponse(e))
+        .flat(),
+      result: false,
+    };
     super(apiResponse, 499);
   }
 }
-export const validationErrorToApiCodeResponse = (error: ValidationError): ApiCodeResponse[] =>
-{
-
+export const validationErrorToApiCodeResponse = (
+  error: ValidationError,
+): ApiCodeResponse[] => {
   console.log(error.constraints);
-  console.log(Object.keys (error.constraints));
+  console.log(Object.keys(error.constraints));
   console.log(Object.values(error.constraints));
 
   return Object.keys(error.constraints).map((k: string) => {
-    console.log(`${camelToSnake(error.property)}_${camelToSnake(k)}`, `${camelToSnake(error.property)}_${camelToSnake(k)}`);
-    const code = ApiCodeResponse[`${camelToSnake(error.property)}_${camelToSnake(k)}` as
-      keyof typeof ApiCodeResponse];
+    console.log(
+      `${camelToSnake(error.property)}_${camelToSnake(k)}`,
+      `${camelToSnake(error.property)}_${camelToSnake(k)}`,
+    );
+    const code =
+      ApiCodeResponse[
+        `${camelToSnake(error.property)}_${camelToSnake(k)}` as keyof typeof ApiCodeResponse
+      ];
     return isNil(code) ? ApiCodeResponse.PAYLOAD_PARAM_IS_MISSING : code;
   });
-}
+};
 export const camelToSnake = (str: string): string => {
-  return str.replace(/([A-Z])/g, " $1").split(' ').join('_').toUpperCase();
-}
\ No newline at end of file
+  return str
+    .replace(/([A-Z])/g, ' $1')
+    .split(' ')
+    .join('_')
+    .toUpperCase();
+};
Index: api/src/common/config/metadata/public.metadata.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { SetMetadata } from '@nestjs/common';\r\nexport const IS_PUBLIC_KEY = 'isPublic';\r\nexport const Public = () => SetMetadata(IS_PUBLIC_KEY, true);\r\nexport const Private = () => SetMetadata(IS_PUBLIC_KEY, false);
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/common/config/metadata/public.metadata.ts b/api/src/common/config/metadata/public.metadata.ts
--- a/api/src/common/config/metadata/public.metadata.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/common/config/metadata/public.metadata.ts	(date 1736262015378)
@@ -1,4 +1,4 @@
 import { SetMetadata } from '@nestjs/common';
 export const IS_PUBLIC_KEY = 'isPublic';
 export const Public = () => SetMetadata(IS_PUBLIC_KEY, true);
-export const Private = () => SetMetadata(IS_PUBLIC_KEY, false);
\ No newline at end of file
+export const Private = () => SetMetadata(IS_PUBLIC_KEY, false);
Index: api/src/common/config/metadata/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export * from './public.metadata';\r\nexport * from './user.metadata';
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/common/config/metadata/index.ts b/api/src/common/config/metadata/index.ts
--- a/api/src/common/config/metadata/index.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/common/config/metadata/index.ts	(date 1736262015378)
@@ -1,2 +1,2 @@
 export * from './public.metadata';
-export * from './user.metadata';
\ No newline at end of file
+export * from './user.metadata';
Index: api/src/common/config/metadata/user.metadata.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { ExecutionContext, createParamDecorator } from \"@nestjs/common\";\r\n\r\nexport const User = createParamDecorator(\r\n  (data: unknown, ctx: ExecutionContext) => {\r\n    const request = ctx.switchToHttp().getRequest();\r\n    return request.user;\r\n  },\r\n);
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/common/config/metadata/user.metadata.ts b/api/src/common/config/metadata/user.metadata.ts
--- a/api/src/common/config/metadata/user.metadata.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/common/config/metadata/user.metadata.ts	(date 1736262015378)
@@ -1,8 +1,8 @@
-import { ExecutionContext, createParamDecorator } from "@nestjs/common";
+import { ExecutionContext, createParamDecorator } from '@nestjs/common';
 
 export const User = createParamDecorator(
   (data: unknown, ctx: ExecutionContext) => {
     const request = ctx.switchToHttp().getRequest();
     return request.user;
   },
-);
\ No newline at end of file
+);
Index: api/src/common/decorators/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export * from './user.decorator';
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/common/decorators/index.ts b/api/src/common/decorators/index.ts
--- a/api/src/common/decorators/index.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/common/decorators/index.ts	(date 1736262015378)
@@ -1,1 +1,1 @@
-export * from './user.decorator';
\ No newline at end of file
+export * from './user.decorator';
Index: api/src/config/orm.config.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// src/config/orm.config.ts\r\nimport { DataSource } from 'typeorm';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport { TypeOrmModuleOptions } from '@nestjs/typeorm';\r\n\r\nconst configService = new ConfigService();\r\n\r\n// Configuration commune\r\nconst commonConfig = {\r\n  type: 'postgres' as const,\r\n  host: configService.get('DB_HOST', 'localhost'), // Valeur par défaut\r\n  port: configService.get('DB_PORT'),\r\n  username: configService.get('pwd_user4001'),\r\n  password: configService.get('P@ssword4001'),\r\n  database: configService.get('pwd_ser4001'),\r\n  entities: ['dist/**/*.entity{.ts,.js}'],\r\n  migrations: ['dist/migrations/*{.ts,.js}'],\r\n  synchronize: false,\r\n  logging: true,\r\n  migrationsRun: true\r\n};\r\nconsole.log('Database Config:', {\r\n  host: configService.get('DB_HOST'),\r\n  port: configService.get('DB_PORT'),\r\n  username: configService.get('pwd_user4001'),\r\n  password: configService.get('P@ssword4001'),\r\n  database: configService.get('pwd_ser4001'),\r\n});\r\n// Configuration pour DataSource (utilisée pour les migrations)\r\nexport default new DataSource(commonConfig);\r\n\r\n// Configuration pour TypeORM Module (utilisée par NestJS)\r\nexport const typeOrmConfig: TypeOrmModuleOptions = {\r\n  ...commonConfig,\r\n  autoLoadEntities: true  // Option spécifique à NestJS\r\n};
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/config/orm.config.ts b/api/src/config/orm.config.ts
--- a/api/src/config/orm.config.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/config/orm.config.ts	(date 1736262015378)
@@ -17,7 +17,7 @@
   migrations: ['dist/migrations/*{.ts,.js}'],
   synchronize: false,
   logging: true,
-  migrationsRun: true
+  migrationsRun: true,
 };
 console.log('Database Config:', {
   host: configService.get('DB_HOST'),
@@ -32,5 +32,5 @@
 // Configuration pour TypeORM Module (utilisée par NestJS)
 export const typeOrmConfig: TypeOrmModuleOptions = {
   ...commonConfig,
-  autoLoadEntities: true  // Option spécifique à NestJS
-};
\ No newline at end of file
+  autoLoadEntities: true, // Option spécifique à NestJS
+};
Index: api/src/common/config/documentation/swagger.configuration.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { INestApplication } from \"@nestjs/common\";\r\nimport {SwaggerModule, DocumentBuilder } from \"@nestjs/swagger\";\r\n\r\nclass SwaggerConfiguration {\r\n  constructor() {\r\n  }\r\n  config(app: INestApplication<any>) {\r\n    const config = new DocumentBuilder()\r\n      .setTitle('NestJS API')\r\n      .setDescription('NestJS swagger document')\r\n      .setVersion('1.0')\r\n      .addBearerAuth(\r\n        {\r\n          description: `Please enter token`,\r\n          name: 'Authorization',\r\n          bearerFormat: 'Bearer',\r\n          scheme: 'Bearer',\r\n          type: 'http',\r\n          in: 'Header'\r\n        },\r\n        'access-token',\r\n      )\r\n      .build();\r\n    const document = SwaggerModule.createDocument(app, config);\r\n    SwaggerModule.setup('docs', app, document);\r\n  }\r\n}\r\nconst swaggerConfiguration = new SwaggerConfiguration();\r\nexport {swaggerConfiguration};
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/common/config/documentation/swagger.configuration.ts b/api/src/common/config/documentation/swagger.configuration.ts
--- a/api/src/common/config/documentation/swagger.configuration.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/common/config/documentation/swagger.configuration.ts	(date 1736262015378)
@@ -1,9 +1,8 @@
-import { INestApplication } from "@nestjs/common";
-import {SwaggerModule, DocumentBuilder } from "@nestjs/swagger";
+import { INestApplication } from '@nestjs/common';
+import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';
 
 class SwaggerConfiguration {
-  constructor() {
-  }
+  constructor() {}
   config(app: INestApplication<any>) {
     const config = new DocumentBuilder()
       .setTitle('NestJS API')
@@ -16,7 +15,7 @@
           bearerFormat: 'Bearer',
           scheme: 'Bearer',
           type: 'http',
-          in: 'Header'
+          in: 'Header',
         },
         'access-token',
       )
@@ -26,4 +25,4 @@
   }
 }
 const swaggerConfiguration = new SwaggerConfiguration();
-export {swaggerConfiguration};
\ No newline at end of file
+export { swaggerConfiguration };
Index: api/src/common/decorators/user.decorator.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { createParamDecorator, ExecutionContext, UnauthorizedException, BadRequestException } from '@nestjs/common';\r\n\r\n// Interface pour définir la structure attendue de l'utilisateur\r\ninterface JwtUser {\r\n  credentialId: number;\r\n  clientId: number;\r\n  isAdmin: boolean;\r\n  email?: string;\r\n  roles?: string[];\r\n  // autres propriétés...\r\n}\r\n\r\nexport const User = createParamDecorator(\r\n  (data: keyof JwtUser | undefined, ctx: ExecutionContext) => {\r\n    const request = ctx.switchToHttp().getRequest();\r\n    const user = request.user as JwtUser | undefined;\r\n\r\n    // Vérification de base de l'utilisateur\r\n    if (!user) {\r\n      throw new UnauthorizedException(\r\n        'Aucun utilisateur trouvé dans la requête. Veuillez vous authentifier.'\r\n      );\r\n    }\r\n\r\n    // Si une propriété spécifique est demandée\r\n    if (data) {\r\n      // Vérifier que la propriété existe\r\n      if (!(data in user)) {\r\n        throw new BadRequestException(\r\n          `La propriété '${data}' n'existe pas dans l'objet utilisateur`\r\n        );\r\n      }\r\n\r\n      // Traitement spécial pour clientId\r\n      if (data === 'clientId') {\r\n        const clientId = Number(user[data]);\r\n        if (isNaN(clientId)) {\r\n          throw new BadRequestException('ID client invalide');\r\n        }\r\n        return clientId;\r\n      }\r\n\r\n      // Traitement spécial pour isAdmin\r\n      if (data === 'isAdmin') {\r\n        return Boolean(user[data]);\r\n      }\r\n\r\n      return user[data];\r\n    }\r\n\r\n    // Si aucune propriété n'est spécifiée, retourner l'utilisateur complet\r\n    return user;\r\n  },\r\n);
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/common/decorators/user.decorator.ts b/api/src/common/decorators/user.decorator.ts
--- a/api/src/common/decorators/user.decorator.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/common/decorators/user.decorator.ts	(date 1736262015378)
@@ -1,4 +1,9 @@
-import { createParamDecorator, ExecutionContext, UnauthorizedException, BadRequestException } from '@nestjs/common';
+import {
+  createParamDecorator,
+  ExecutionContext,
+  UnauthorizedException,
+  BadRequestException,
+} from '@nestjs/common';
 
 // Interface pour définir la structure attendue de l'utilisateur
 interface JwtUser {
@@ -18,7 +23,7 @@
     // Vérification de base de l'utilisateur
     if (!user) {
       throw new UnauthorizedException(
-        'Aucun utilisateur trouvé dans la requête. Veuillez vous authentifier.'
+        'Aucun utilisateur trouvé dans la requête. Veuillez vous authentifier.',
       );
     }
 
@@ -27,7 +32,7 @@
       // Vérifier que la propriété existe
       if (!(data in user)) {
         throw new BadRequestException(
-          `La propriété '${data}' n'existe pas dans l'objet utilisateur`
+          `La propriété '${data}' n'existe pas dans l'objet utilisateur`,
         );
       }
 
@@ -51,4 +56,4 @@
     // Si aucune propriété n'est spécifiée, retourner l'utilisateur complet
     return user;
   },
-);
\ No newline at end of file
+);
Index: api/src/feature/root/app.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Injectable } from \"@nestjs/common\";\r\nimport { SayHelloException } from \"./app.exception\";\r\n\r\n\r\n@Injectable()\r\n\r\nexport class AppService {\r\n\r\n  getHello(): string {\r\n    this.checkIfIsAdmin(true);\r\n    return 'Hello SAMY';\r\n  }\r\n\r\n  checkIfIsAdmin(admin: boolean): void {\r\n    if (!admin) {\r\n      throw new SayHelloException();\r\n    }\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/feature/root/app.service.ts b/api/src/feature/root/app.service.ts
--- a/api/src/feature/root/app.service.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/feature/root/app.service.ts	(date 1736262015378)
@@ -1,11 +1,8 @@
-import { Injectable } from "@nestjs/common";
-import { SayHelloException } from "./app.exception";
-
+import { Injectable } from '@nestjs/common';
+import { SayHelloException } from './app.exception';
 
 @Injectable()
-
 export class AppService {
-
   getHello(): string {
     this.checkIfIsAdmin(true);
     return 'Hello SAMY';
@@ -16,4 +13,4 @@
       throw new SayHelloException();
     }
   }
-}
\ No newline at end of file
+}
Index: api/src/feature/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export * from './root';
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/feature/index.ts b/api/src/feature/index.ts
--- a/api/src/feature/index.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/feature/index.ts	(date 1736262015378)
@@ -1,1 +1,1 @@
-export * from './root';
\ No newline at end of file
+export * from './root';
Index: api/src/feature/root/app.exception.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { ApiException } from \"@common/config\";\r\nimport { ApiCodeResponse } from \"common/config/api/enum\";\r\n\r\n\r\n\r\nexport class SayHelloException extends ApiException {\r\n  constructor() {\r\n    // Call the super constructor with the appropriate API code response and status code\r\n    super(ApiCodeResponse.TEST, 200);\r\n  }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/feature/root/app.exception.ts b/api/src/feature/root/app.exception.ts
--- a/api/src/feature/root/app.exception.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/feature/root/app.exception.ts	(date 1736262015378)
@@ -1,7 +1,5 @@
-import { ApiException } from "@common/config";
-import { ApiCodeResponse } from "common/config/api/enum";
-
-
+import { ApiException } from '@common/config';
+import { ApiCodeResponse } from 'common/config/api/enum';
 
 export class SayHelloException extends ApiException {
   constructor() {
@@ -9,5 +7,3 @@
     super(ApiCodeResponse.TEST, 200);
   }
 }
-
-
Index: api/src/feature/root/app.swagger.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { ApiOperationOptions } from \"@nestjs/swagger\";\r\n\r\n\r\nexport const AppControllerHelloWorld\r\n  : ApiOperationOptions = {\r\n  summary: 'Hello world',\r\n  description: \"My great description for this method\",\r\n}\r\nexport const AppControllerHelloWorld2: ApiOperationOptions ={summary:'sum', description:'desc'}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/feature/root/app.swagger.ts b/api/src/feature/root/app.swagger.ts
--- a/api/src/feature/root/app.swagger.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/feature/root/app.swagger.ts	(date 1736262015378)
@@ -1,9 +1,10 @@
-import { ApiOperationOptions } from "@nestjs/swagger";
+import { ApiOperationOptions } from '@nestjs/swagger';
 
-
-export const AppControllerHelloWorld
-  : ApiOperationOptions = {
+export const AppControllerHelloWorld: ApiOperationOptions = {
   summary: 'Hello world',
-  description: "My great description for this method",
-}
-export const AppControllerHelloWorld2: ApiOperationOptions ={summary:'sum', description:'desc'}
\ No newline at end of file
+  description: 'My great description for this method',
+};
+export const AppControllerHelloWorld2: ApiOperationOptions = {
+  summary: 'sum',
+  description: 'desc',
+};
Index: api/src/feature/root/app.controller.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Controller, Get, Post } from '@nestjs/common';\r\nimport { AppService } from './app.service';\r\nimport { ApiOperation } from '@nestjs/swagger';\r\nimport { ApiCodeResponse, ApiResponse } from '@common/config';\r\n\r\n@Controller('start')\r\nexport class AppController {\r\n  constructor(private readonly appService: AppService) {}\r\n\r\n  @ApiOperation({ summary: 'Hello World endpoint' })\r\n  @Get('hello')\r\n  getHello(): ApiResponse {\r\n    return { result: true, code: ApiCodeResponse.TEST, data: this.appService.getHello() };\r\n  }\r\n\r\n  @ApiOperation({ summary: 'Hello World 2 endpoint' })\r\n\r\n  @Post('hello2')\r\n  getHello2(): ApiResponse {\r\n    return { result: true, code: ApiCodeResponse.TEST, data: this.appService.getHello() };\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/feature/root/app.controller.ts b/api/src/feature/root/app.controller.ts
--- a/api/src/feature/root/app.controller.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/feature/root/app.controller.ts	(date 1736262015378)
@@ -10,13 +10,20 @@
   @ApiOperation({ summary: 'Hello World endpoint' })
   @Get('hello')
   getHello(): ApiResponse {
-    return { result: true, code: ApiCodeResponse.TEST, data: this.appService.getHello() };
+    return {
+      result: true,
+      code: ApiCodeResponse.TEST,
+      data: this.appService.getHello(),
+    };
   }
 
   @ApiOperation({ summary: 'Hello World 2 endpoint' })
-
   @Post('hello2')
   getHello2(): ApiResponse {
-    return { result: true, code: ApiCodeResponse.TEST, data: this.appService.getHello() };
+    return {
+      result: true,
+      code: ApiCodeResponse.TEST,
+      data: this.appService.getHello(),
+    };
   }
 }
Index: api/src/feature/root/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export * from './app.module';\r\nexport * from './app.swagger';\r\nexport * from './app.service';\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/feature/root/index.ts b/api/src/feature/root/index.ts
--- a/api/src/feature/root/index.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/feature/root/index.ts	(date 1736262015378)
@@ -1,5 +1,3 @@
 export * from './app.module';
 export * from './app.swagger';
 export * from './app.service';
-
-
Index: api/src/feature/security/security.controller.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Body, Controller, Delete, Get, Logger, Param, Post, UseGuards } from \"@nestjs/common\";\r\nimport { ApiBearerAuth, ApiResponse, ApiTags } from \"@nestjs/swagger\";\r\nimport { SecurityService } from \"./service\";\r\nimport { Credential, RefreshTokenPayload, SignInPayload, SignupPayload, Token } from './data';\r\nimport { Public, User } from \"@common/config\";\r\nimport { JwtGuard } from '@feature/security/guard';\r\nimport { ConflictException } from \"@nestjs/common\";\r\n\r\ninterface CheckEmailResponse {\r\n  exists: boolean;\r\n}\r\n\r\n@ApiBearerAuth('access-token')\r\n@ApiTags('Account')\r\n@Controller('account')\r\nexport class SecurityController {\r\n\r\n  private readonly logger = new Logger(SecurityController.name);\r\n  constructor(private readonly service: SecurityService) {}\r\n\r\n  @Public()\r\n  @Post('signin')\r\n  @ApiResponse({ status: 200, description: 'User signed in successfully.', type: Token })\r\n  @ApiResponse({ status: 401, description: 'Invalid credentials.' })\r\n  public async signIn(@Body() payload: SignInPayload): Promise<Token> {\r\n    this.logger.debug(`SignIn payload: ${JSON.stringify(payload)}`);\r\n    try {\r\n      const token = await this.service.signIn(payload, false);\r\n      this.logger.debug(`SignIn successful: ${JSON.stringify(token)}`);\r\n      return token;\r\n    } catch (error) {\r\n      this.logger.error(`SignIn error: ${error.message}`);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  @Public()\r\n  @Post('admin-signin')\r\n  @ApiResponse({ status: 200, description: 'Admin signed in successfully.', type: Token })\r\n  @ApiResponse({ status: 401, description: 'Invalid credentials.' })\r\n  public async adminSignIn(@Body() payload: SignInPayload): Promise<Token> {\r\n    this.logger.debug(`AdminSignIn payload: ${JSON.stringify(payload)}`);\r\n    try {\r\n      const token = await this.service.signIn(payload, true);\r\n      this.logger.debug(`AdminSignIn successful: ${JSON.stringify(token)}`);\r\n      return token;\r\n    } catch (error) {\r\n      this.logger.error(`AdminSignIn error: ${error.message}`);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  @Public()\r\n  @Post('signup')\r\n  @ApiResponse({ status: 201, description: 'User signed up successfully.', type: Credential })\r\n  @ApiResponse({ status: 409, description: 'User already exists.' })\r\n  public async signUp(@Body() payload: SignupPayload): Promise<Credential> {\r\n    this.logger.debug(`SignUp payload: ${JSON.stringify(payload)}`);\r\n    try {\r\n      const credential = await this.service.signup(payload);\r\n      if (!credential) {\r\n        throw new ConflictException('Erreur lors de l\\'inscription. Utilisateur déjà existant.');\r\n      }\r\n      this.logger.debug(`SignUp successful: ${JSON.stringify(credential)}`);\r\n      return credential;\r\n    } catch (error) {\r\n      this.logger.error(`SignUp error: ${error.message}`);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  @Public()\r\n  @Post('admin-signup')\r\n  @ApiResponse({ status: 201, description: 'Admin signed up successfully.', type: Credential })\r\n  @ApiResponse({ status: 409, description: 'User already exists.' })\r\n  public async adminSignUp(@Body() payload: SignupPayload): Promise<Credential | null> {\r\n    return this.service.signup(payload, true);\r\n  }\r\n\r\n  @Public()\r\n  @Post('refresh')\r\n  @ApiResponse({ status: 200, description: 'Tokens refreshed successfully.', type: Token })\r\n  public refresh(@Body() payload: RefreshTokenPayload): Promise<Token> {\r\n    return this.service.refresh(payload);\r\n  }\r\n\r\n  //UseGuards(JwtGuard) // Protège cette route avec JwtGuard\r\n  @Get('me')\r\n  @ApiResponse({ status: 200, description: 'User details.', type: Credential })\r\n  public me(@User() user: Credential): Credential {\r\n    return user;\r\n  }\r\n\r\n  @UseGuards(JwtGuard) // Protège cette route avec JwtGuard\r\n  @Delete('delete/:id')\r\n  @ApiResponse({ status: 200, description: 'User deleted successfully.' })\r\n  @ApiResponse({ status: 404, description: 'User not found.' })\r\n  public delete(@Param('id') credential_id: string): Promise<void> {\r\n    return this.service.delete(credential_id);\r\n  }\r\n\r\n  @Public()\r\n  @Get('check-email/:email')  // Changé de POST à GET\r\n  @ApiResponse({ status: 200, description: 'Check if user exists' })\r\n  public async checkEmail(@Param('email') email: string): Promise<{ exists: boolean }> {\r\n    try {\r\n      const user = await this.service.findByEmail(email);\r\n      return { exists: !!user };\r\n    } catch (error) {\r\n      this.logger.error(`CheckEmail error: ${error.message}`);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/feature/security/security.controller.ts b/api/src/feature/security/security.controller.ts
--- a/api/src/feature/security/security.controller.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/feature/security/security.controller.ts	(date 1736262015380)
@@ -1,10 +1,25 @@
-import { Body, Controller, Delete, Get, Logger, Param, Post, UseGuards } from "@nestjs/common";
-import { ApiBearerAuth, ApiResponse, ApiTags } from "@nestjs/swagger";
-import { SecurityService } from "./service";
-import { Credential, RefreshTokenPayload, SignInPayload, SignupPayload, Token } from './data';
-import { Public, User } from "@common/config";
+import {
+  Body,
+  Controller,
+  Delete,
+  Get,
+  Logger,
+  Param,
+  Post,
+  UseGuards,
+} from '@nestjs/common';
+import { ApiBearerAuth, ApiResponse, ApiTags } from '@nestjs/swagger';
+import { SecurityService } from './service';
+import {
+  Credential,
+  RefreshTokenPayload,
+  SignInPayload,
+  SignupPayload,
+  Token,
+} from './data';
+import { Public, User } from '@common/config';
 import { JwtGuard } from '@feature/security/guard';
-import { ConflictException } from "@nestjs/common";
+import { ConflictException } from '@nestjs/common';
 
 interface CheckEmailResponse {
   exists: boolean;
@@ -14,13 +29,16 @@
 @ApiTags('Account')
 @Controller('account')
 export class SecurityController {
-
   private readonly logger = new Logger(SecurityController.name);
   constructor(private readonly service: SecurityService) {}
 
   @Public()
   @Post('signin')
-  @ApiResponse({ status: 200, description: 'User signed in successfully.', type: Token })
+  @ApiResponse({
+    status: 200,
+    description: 'User signed in successfully.',
+    type: Token,
+  })
   @ApiResponse({ status: 401, description: 'Invalid credentials.' })
   public async signIn(@Body() payload: SignInPayload): Promise<Token> {
     this.logger.debug(`SignIn payload: ${JSON.stringify(payload)}`);
@@ -36,7 +54,11 @@
 
   @Public()
   @Post('admin-signin')
-  @ApiResponse({ status: 200, description: 'Admin signed in successfully.', type: Token })
+  @ApiResponse({
+    status: 200,
+    description: 'Admin signed in successfully.',
+    type: Token,
+  })
   @ApiResponse({ status: 401, description: 'Invalid credentials.' })
   public async adminSignIn(@Body() payload: SignInPayload): Promise<Token> {
     this.logger.debug(`AdminSignIn payload: ${JSON.stringify(payload)}`);
@@ -52,14 +74,20 @@
 
   @Public()
   @Post('signup')
-  @ApiResponse({ status: 201, description: 'User signed up successfully.', type: Credential })
+  @ApiResponse({
+    status: 201,
+    description: 'User signed up successfully.',
+    type: Credential,
+  })
   @ApiResponse({ status: 409, description: 'User already exists.' })
   public async signUp(@Body() payload: SignupPayload): Promise<Credential> {
     this.logger.debug(`SignUp payload: ${JSON.stringify(payload)}`);
     try {
       const credential = await this.service.signup(payload);
       if (!credential) {
-        throw new ConflictException('Erreur lors de l\'inscription. Utilisateur déjà existant.');
+        throw new ConflictException(
+          "Erreur lors de l'inscription. Utilisateur déjà existant.",
+        );
       }
       this.logger.debug(`SignUp successful: ${JSON.stringify(credential)}`);
       return credential;
@@ -71,15 +99,25 @@
 
   @Public()
   @Post('admin-signup')
-  @ApiResponse({ status: 201, description: 'Admin signed up successfully.', type: Credential })
+  @ApiResponse({
+    status: 201,
+    description: 'Admin signed up successfully.',
+    type: Credential,
+  })
   @ApiResponse({ status: 409, description: 'User already exists.' })
-  public async adminSignUp(@Body() payload: SignupPayload): Promise<Credential | null> {
+  public async adminSignUp(
+    @Body() payload: SignupPayload,
+  ): Promise<Credential | null> {
     return this.service.signup(payload, true);
   }
 
   @Public()
   @Post('refresh')
-  @ApiResponse({ status: 200, description: 'Tokens refreshed successfully.', type: Token })
+  @ApiResponse({
+    status: 200,
+    description: 'Tokens refreshed successfully.',
+    type: Token,
+  })
   public refresh(@Body() payload: RefreshTokenPayload): Promise<Token> {
     return this.service.refresh(payload);
   }
@@ -100,9 +138,11 @@
   }
 
   @Public()
-  @Get('check-email/:email')  // Changé de POST à GET
+  @Get('check-email/:email') // Changé de POST à GET
   @ApiResponse({ status: 200, description: 'Check if user exists' })
-  public async checkEmail(@Param('email') email: string): Promise<{ exists: boolean }> {
+  public async checkEmail(
+    @Param('email') email: string,
+  ): Promise<{ exists: boolean }> {
     try {
       const user = await this.service.findByEmail(email);
       return { exists: !!user };
Index: api/src/feature/root/app.module.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Module } from '@nestjs/common';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { configManager } from '@common/config';\r\nimport { Client } from '../../model/Client/client.entity';\r\n\r\n// Modules de fonctionnalités\r\nimport { SecurityModule } from '@feature/security';\r\n\r\n// Modules métier\r\nimport { AdministratorModule } from 'model/Administrator/administrator.module';\r\nimport { ClientModule } from 'model/Client/client.module';\r\nimport { UserModule } from 'model/User/user.module';\r\nimport { ProductModule } from 'model/Product/product.module';\r\nimport { TypeModule } from 'model/Type/type.module';\r\nimport { CartModule } from 'model/Cart/cart.module';\r\nimport { OrderModule } from 'model/Order/order.module';\r\nimport { OrderStatusModule } from 'model/OrderStatus/orderStatus.module';\r\nimport { ServiceModule } from 'model/Service/service.module';\r\nimport { AppointmentModule } from 'model/Appointment/appointment.module';\r\nimport { PromotionModule } from 'model/Promotion/promotion.module';\r\nimport { InvoiceModule } from 'model/Invoice/invoice.module';\r\n\r\n// Entités (si nécessaire pour TypeORM.forFeature)\r\nimport { Service } from 'model/Service/service.entity';\r\nimport { Appointment } from 'model/Appointment/appointment.entity';\r\nimport { OrderDetailModule } from 'model/Order/OrderDetail/order-detail.module';\r\nimport { StockModule } from 'model/Stock/stock.module';\r\nimport { PaymentModule } from '../../model/Payment/payment.module';\r\nimport { PrescriptionModule } from '../../model/Prescription/prescription.module';\r\n\r\n@Module({\r\n  imports: [\r\n    // Configuration TypeORM\r\n    TypeOrmModule.forRoot(configManager.getTypeOrmConfig()),\r\n    TypeOrmModule.forFeature([Service, Appointment, Client]),\r\n\r\n    // Module de sécurité\r\n    SecurityModule,\r\n    ClientModule,\r\n\r\n    // Modules utilisateurs\r\n    UserModule,\r\n    ClientModule,\r\n    AdministratorModule,\r\n\r\n    // Modules produits et catalogue\r\n    ProductModule,\r\n    TypeModule,\r\n    CartModule,\r\n    PromotionModule,\r\n    StockModule,\r\n    PaymentModule,\r\n    PrescriptionModule,\r\n\r\n\r\n\r\n    // Modules commandes et facturation\r\n    OrderModule,\r\n    OrderStatusModule,\r\n    OrderDetailModule,\r\n    InvoiceModule,\r\n\r\n    // Modules services et rendez-vous\r\n    ServiceModule,\r\n    AppointmentModule,\r\n  ],\r\n\r\n})\r\nexport class AppModule {}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/feature/root/app.module.ts b/api/src/feature/root/app.module.ts
--- a/api/src/feature/root/app.module.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/feature/root/app.module.ts	(date 1736262015378)
@@ -52,8 +52,6 @@
     PaymentModule,
     PrescriptionModule,
 
-
-
     // Modules commandes et facturation
     OrderModule,
     OrderStatusModule,
@@ -64,6 +62,5 @@
     ServiceModule,
     AppointmentModule,
   ],
-
 })
 export class AppModule {}
Index: api/src/feature/security/security.module.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// security.module.ts\r\nimport { Module } from '@nestjs/common';\r\nimport { JwtModule, JwtService } from '@nestjs/jwt';\r\nimport { TypeOrmModule } from '@nestjs/typeorm';\r\nimport { Reflector } from '@nestjs/core';\r\nimport { PassportModule } from '@nestjs/passport';\r\n\r\n// Services\r\nimport { SecurityService, TokenService } from './service';\r\n\r\n// Entities\r\nimport { Credential, Token } from './data';\r\nimport { Client } from '../../model/Client/client.entity';\r\n\r\n// Guards & Strategy\r\nimport { JwtGuard } from './guard';\r\nimport { JwtStrategy } from './guard/jwt.strategy';\r\n\r\n// Configuration\r\nimport { configManager } from '@common/config';\r\nimport { ConfigKey } from '@common/config/enum';\r\n\r\n// Controller\r\nimport { SecurityController } from './security.controller';\r\nimport { ClientModule } from '../../model/Client/client.module';\r\nimport { ClientService } from '../../model/Client/client.service';\r\nimport { ConfigModule } from '@nestjs/config';\r\n\r\n@Module({\r\n  imports: [ConfigModule,  // Ajout du ConfigModule\r\n    // TypeORM Configuration\r\n    TypeOrmModule.forFeature([Credential, Token, Client]),\r\n\r\n    // Passport Configuration\r\n    PassportModule.register({ defaultStrategy: 'jwt' }),\r\n\r\n    // JWT Configuration\r\n    JwtModule.register({\r\n      global: true,\r\n      secret: configManager.getValue(ConfigKey.JWT_TOKEN_SECRET),\r\n      signOptions: {\r\n        expiresIn: configManager.getValue(ConfigKey.JWT_TOKEN_EXPIRE_IN)\r\n      },\r\n    }),\r\n\r\n    // Client Module for ClientService\r\n    ClientModule\r\n  ],\r\n  providers: [\r\n    SecurityService,\r\n    TokenService,\r\n    JwtGuard,\r\n    JwtStrategy, // Ajout de JwtStrategy\r\n    Reflector,\r\n    ClientService // Ajout de ClientService\r\n  ],\r\n  controllers: [SecurityController],\r\n  exports: [\r\n    SecurityService,\r\n    JwtGuard,\r\n    JwtModule,\r\n    PassportModule,TokenService\r\n  ],\r\n})\r\nexport class SecurityModule {}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/feature/security/security.module.ts b/api/src/feature/security/security.module.ts
--- a/api/src/feature/security/security.module.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/feature/security/security.module.ts	(date 1736262015380)
@@ -27,7 +27,8 @@
 import { ConfigModule } from '@nestjs/config';
 
 @Module({
-  imports: [ConfigModule,  // Ajout du ConfigModule
+  imports: [
+    ConfigModule, // Ajout du ConfigModule
     // TypeORM Configuration
     TypeOrmModule.forFeature([Credential, Token, Client]),
 
@@ -39,12 +40,12 @@
       global: true,
       secret: configManager.getValue(ConfigKey.JWT_TOKEN_SECRET),
       signOptions: {
-        expiresIn: configManager.getValue(ConfigKey.JWT_TOKEN_EXPIRE_IN)
+        expiresIn: configManager.getValue(ConfigKey.JWT_TOKEN_EXPIRE_IN),
       },
     }),
 
     // Client Module for ClientService
-    ClientModule
+    ClientModule,
   ],
   providers: [
     SecurityService,
@@ -52,14 +53,9 @@
     JwtGuard,
     JwtStrategy, // Ajout de JwtStrategy
     Reflector,
-    ClientService // Ajout de ClientService
+    ClientService, // Ajout de ClientService
   ],
   controllers: [SecurityController],
-  exports: [
-    SecurityService,
-    JwtGuard,
-    JwtModule,
-    PassportModule,TokenService
-  ],
+  exports: [SecurityService, JwtGuard, JwtModule, PassportModule, TokenService],
 })
-export class SecurityModule {}
\ No newline at end of file
+export class SecurityModule {}
Index: api/src/feature/security/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export *from './security.module';\r\nexport *from './guard';\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/feature/security/index.ts b/api/src/feature/security/index.ts
--- a/api/src/feature/security/index.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/feature/security/index.ts	(date 1736262015378)
@@ -1,3 +1,2 @@
-export *from './security.module';
-export *from './guard';
-
+export * from './security.module';
+export * from './guard';
Index: api/src/feature/security/data/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export*from './entity';\r\nexport*from './payload';\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/feature/security/data/index.ts b/api/src/feature/security/data/index.ts
--- a/api/src/feature/security/data/index.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/feature/security/data/index.ts	(date 1736262015378)
@@ -1,3 +1,2 @@
-export*from './entity';
-export*from './payload';
-
+export * from './entity';
+export * from './payload';
Index: api/src/feature/security/data/entity/credential.entity.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Column, CreateDateColumn, Entity, PrimaryColumn, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';\r\nimport { ulid } from 'ulid';\r\n@Entity()\r\nexport class Credential {\r\n  @PrimaryColumn('varchar', { length:26, default: () => `'${ulid()}'` })\r\n  credential_id: string;\r\n  @Column({nullable: false, unique: true})\r\n  username: string;\r\n  @Column({nullable: true})\r\n  password: string;\r\n  @Column({nullable: false, unique: true})\r\n  mail: string;\r\n  @Column({nullable: true, unique: false})\r\n  facebookHash: string;\r\n  @Column({nullable: true, unique: false})\r\n  googleHash: string;\r\n  @Column({default:true})\r\n  isAdmin:boolean;\r\n  @Column({default: true})\r\n  active: boolean;\r\n  @CreateDateColumn()\r\n  created: Date;\r\n  @UpdateDateColumn()\r\n  updated: Date;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/feature/security/data/entity/credential.entity.ts b/api/src/feature/security/data/entity/credential.entity.ts
--- a/api/src/feature/security/data/entity/credential.entity.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/feature/security/data/entity/credential.entity.ts	(date 1736262015378)
@@ -1,22 +1,29 @@
-import { Column, CreateDateColumn, Entity, PrimaryColumn, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';
+import {
+  Column,
+  CreateDateColumn,
+  Entity,
+  PrimaryColumn,
+  PrimaryGeneratedColumn,
+  UpdateDateColumn,
+} from 'typeorm';
 import { ulid } from 'ulid';
 @Entity()
 export class Credential {
-  @PrimaryColumn('varchar', { length:26, default: () => `'${ulid()}'` })
+  @PrimaryColumn('varchar', { length: 26, default: () => `'${ulid()}'` })
   credential_id: string;
-  @Column({nullable: false, unique: true})
+  @Column({ nullable: false, unique: true })
   username: string;
-  @Column({nullable: true})
+  @Column({ nullable: true })
   password: string;
-  @Column({nullable: false, unique: true})
+  @Column({ nullable: false, unique: true })
   mail: string;
-  @Column({nullable: true, unique: false})
+  @Column({ nullable: true, unique: false })
   facebookHash: string;
-  @Column({nullable: true, unique: false})
+  @Column({ nullable: true, unique: false })
   googleHash: string;
-  @Column({default:true})
-  isAdmin:boolean;
-  @Column({default: true})
+  @Column({ default: true })
+  isAdmin: boolean;
+  @Column({ default: true })
   active: boolean;
   @CreateDateColumn()
   created: Date;
Index: api/src/feature/security/data/payload/refresh.payload.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {ApiProperty} from '@nestjs/swagger';\r\nexport class RefreshTokenPayload {\r\n  @ApiProperty()\r\n  refresh: string;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/feature/security/data/payload/refresh.payload.ts b/api/src/feature/security/data/payload/refresh.payload.ts
--- a/api/src/feature/security/data/payload/refresh.payload.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/feature/security/data/payload/refresh.payload.ts	(date 1736262015378)
@@ -1,4 +1,4 @@
-import {ApiProperty} from '@nestjs/swagger';
+import { ApiProperty } from '@nestjs/swagger';
 export class RefreshTokenPayload {
   @ApiProperty()
   refresh: string;
Index: api/src/feature/security/data/entity/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export*from './credential.entity';\r\nexport*from './token.entity';\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/feature/security/data/entity/index.ts b/api/src/feature/security/data/entity/index.ts
--- a/api/src/feature/security/data/entity/index.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/feature/security/data/entity/index.ts	(date 1736262015378)
@@ -1,4 +1,2 @@
-export*from './credential.entity';
-export*from './token.entity';
-
-
+export * from './credential.entity';
+export * from './token.entity';
Index: api/src/feature/security/data/entity/token.entity.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Column, Entity, JoinColumn, OneToOne, PrimaryColumn } from 'typeorm';\r\nimport { ulid } from 'ulid';\r\nimport { Credential } from \"@feature/security/data\";\r\n\r\n@Entity('token')  // Nom explicite de la table\r\nexport class Token {\r\n  @PrimaryColumn('varchar', { length: 26 })\r\n  token_id: string = ulid();\r\n\r\n  @Column({ nullable: false })\r\n  token: string;\r\n\r\n  @Column({ nullable: false })\r\n  refreshToken: string;\r\n\r\n  @OneToOne(() => Credential, { eager: true })\r\n  @JoinColumn({ name: 'credential_id' })\r\n  credential: Credential;\r\n\r\n  @Column({ name: 'credential_id' })\r\n  credentialId: string;\r\n  @Column({ nullable: true }) // Ajoutez l'option nullable si ce champ n'est pas obligatoire\r\n  clientId?: number;\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/feature/security/data/entity/token.entity.ts b/api/src/feature/security/data/entity/token.entity.ts
--- a/api/src/feature/security/data/entity/token.entity.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/feature/security/data/entity/token.entity.ts	(date 1736262015378)
@@ -1,8 +1,8 @@
 import { Column, Entity, JoinColumn, OneToOne, PrimaryColumn } from 'typeorm';
 import { ulid } from 'ulid';
-import { Credential } from "@feature/security/data";
+import { Credential } from '@feature/security/data';
 
-@Entity('token')  // Nom explicite de la table
+@Entity('token') // Nom explicite de la table
 export class Token {
   @PrimaryColumn('varchar', { length: 26 })
   token_id: string = ulid();
@@ -21,5 +21,4 @@
   credentialId: string;
   @Column({ nullable: true }) // Ajoutez l'option nullable si ce champ n'est pas obligatoire
   clientId?: number;
-
 }
Index: api/src/feature/security/guard/admin.guard.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n// src/guards/admin.guard.ts\r\nimport { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\r\nimport { JwtService } from '@nestjs/jwt';\r\nimport { UnauthorizedException } from '@nestjs/common';\r\n\r\n@Injectable()\r\nexport class AdminGuard implements CanActivate {\r\n  constructor(private jwtService: JwtService) {}\r\n\r\n  async canActivate(context: ExecutionContext): Promise<boolean> {\r\n    const request = context.switchToHttp().getRequest();\r\n    const token = this.extractTokenFromHeader(request);\r\n\r\n    if (!token) {\r\n      throw new UnauthorizedException('Token manquant');\r\n    }\r\n\r\n    try {\r\n      const payload = await this.jwtService.verifyAsync(token);\r\n\r\n      // Vérifier si l'utilisateur est un admin\r\n      if (payload.role !== 'ADMIN') {\r\n        throw new UnauthorizedException('Accès non autorisé');\r\n      }\r\n\r\n      request.user = payload;\r\n      return true;\r\n    } catch {\r\n      throw new UnauthorizedException('Token invalide');\r\n    }\r\n  }\r\n\r\n  private extractTokenFromHeader(request: any): string | undefined {\r\n    const [type, token] = request.headers.authorization?.split(' ') ?? [];\r\n    return type === 'Bearer' ? token : undefined;\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/feature/security/guard/admin.guard.ts b/api/src/feature/security/guard/admin.guard.ts
--- a/api/src/feature/security/guard/admin.guard.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/feature/security/guard/admin.guard.ts	(date 1736262015378)
@@ -1,4 +1,3 @@
-
 // src/guards/admin.guard.ts
 import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';
 import { JwtService } from '@nestjs/jwt';
@@ -35,4 +34,4 @@
     const [type, token] = request.headers.authorization?.split(' ') ?? [];
     return type === 'Bearer' ? token : undefined;
   }
-}
\ No newline at end of file
+}
Index: api/src/feature/security/data/payload/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export* from './refresh.payload';\r\nexport* from './signin.payload';\r\nexport* from './signup.payload';\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/feature/security/data/payload/index.ts b/api/src/feature/security/data/payload/index.ts
--- a/api/src/feature/security/data/payload/index.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/feature/security/data/payload/index.ts	(date 1736262015378)
@@ -1,3 +1,3 @@
-export* from './refresh.payload';
-export* from './signin.payload';
-export* from './signup.payload';
+export * from './refresh.payload';
+export * from './signin.payload';
+export * from './signup.payload';
Index: api/src/feature/security/data/payload/signin.payload.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { ApiProperty } from \"@nestjs/swagger\";\r\n\r\nexport class SignInPayload {\r\n  @ApiProperty()\r\n  mail: string;\r\n\r\n  @ApiProperty()\r\n  password: string;\r\n\r\n  @ApiProperty({ required: false })\r\n  googleHash?: string;\r\n\r\n  @ApiProperty({ required: false })\r\n  facebookHash?: string;\r\n\r\n  @ApiProperty({ required: false, default: false })\r\n  socialLogin?: boolean;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/feature/security/data/payload/signin.payload.ts b/api/src/feature/security/data/payload/signin.payload.ts
--- a/api/src/feature/security/data/payload/signin.payload.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/feature/security/data/payload/signin.payload.ts	(date 1736262015378)
@@ -1,4 +1,4 @@
-import { ApiProperty } from "@nestjs/swagger";
+import { ApiProperty } from '@nestjs/swagger';
 
 export class SignInPayload {
   @ApiProperty()
@@ -15,4 +15,4 @@
 
   @ApiProperty({ required: false, default: false })
   socialLogin?: boolean;
-}
\ No newline at end of file
+}
Index: api/src/feature/security/guard/jwt-auth.guard.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Injectable, UnauthorizedException } from '@nestjs/common';\r\nimport { AuthGuard } from '@nestjs/passport';\r\n\r\n@Injectable()\r\nexport class JwtAuthGuard extends AuthGuard('jwt') {\r\n  handleRequest(err: any, user: any, info: any) {\r\n    if (err || !user) {\r\n      console.error('Erreur JWT Guard:', { err, info });\r\n      throw err || new UnauthorizedException('Non authentifié');\r\n    }\r\n    return user;\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/feature/security/guard/jwt-auth.guard.ts b/api/src/feature/security/guard/jwt-auth.guard.ts
--- a/api/src/feature/security/guard/jwt-auth.guard.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/feature/security/guard/jwt-auth.guard.ts	(date 1736262015378)
@@ -10,4 +10,4 @@
     }
     return user;
   }
-}
\ No newline at end of file
+}
Index: api/src/feature/security/guard/jwt.strategy.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { ExtractJwt, Strategy } from 'passport-jwt';\r\nimport { PassportStrategy } from '@nestjs/passport';\r\nimport { Injectable, UnauthorizedException, Logger } from '@nestjs/common';\r\nimport { ClientService } from 'model/Client/client.service';\r\n\r\ninterface JwtPayload {\r\n  sub: string;\r\n  email: string;\r\n  isAdmin: boolean;\r\n  iat: number;\r\n  exp: number;\r\n}\r\n\r\n@Injectable()\r\nexport class JwtStrategy extends PassportStrategy(Strategy) {\r\n  private readonly logger = new Logger(JwtStrategy.name);\r\n\r\n  constructor(private clientService: ClientService) {\r\n    super({\r\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\r\n      ignoreExpiration: false,\r\n      secretOrKey: process.env.JWT_TOKEN_SECRET\r\n    });\r\n  }\r\n\r\n  async validate(payload: JwtPayload): Promise<any> {\r\n    try {\r\n      this.logger.debug('JWT Payload:', payload);\r\n\r\n      // Pour les admins, on peut retourner directement les infos sans chercher le client\r\n      if (payload.isAdmin) {\r\n        this.logger.debug('Utilisateur admin détecté');\r\n        return {\r\n          credentialId: payload.sub,\r\n          email: payload.email,\r\n          isAdmin: true\r\n        };\r\n      }\r\n\r\n      // Pour les clients normaux, on vérifie l'existence dans la base\r\n      const client = await this.clientService.findByCredentialId(payload.sub);\r\n      this.logger.debug('Client trouvé:', client);\r\n\r\n      if (!client && !payload.isAdmin) {\r\n        this.logger.error(`Client non trouvé pour credential ${payload.sub}`);\r\n        throw new UnauthorizedException('Client non trouvé');\r\n      }\r\n\r\n      return {\r\n        credentialId: payload.sub,\r\n        clientId: client?.clientId,\r\n        email: payload.email,\r\n        isAdmin: payload.isAdmin\r\n      };\r\n    } catch (error) {\r\n      this.logger.error('Erreur validation JWT:', error);\r\n      throw new UnauthorizedException('Token invalide');\r\n    }\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/feature/security/guard/jwt.strategy.ts b/api/src/feature/security/guard/jwt.strategy.ts
--- a/api/src/feature/security/guard/jwt.strategy.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/feature/security/guard/jwt.strategy.ts	(date 1736262015378)
@@ -19,7 +19,7 @@
     super({
       jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
       ignoreExpiration: false,
-      secretOrKey: process.env.JWT_TOKEN_SECRET
+      secretOrKey: process.env.JWT_TOKEN_SECRET,
     });
   }
 
@@ -33,7 +33,7 @@
         return {
           credentialId: payload.sub,
           email: payload.email,
-          isAdmin: true
+          isAdmin: true,
         };
       }
 
@@ -50,11 +50,11 @@
         credentialId: payload.sub,
         clientId: client?.clientId,
         email: payload.email,
-        isAdmin: payload.isAdmin
+        isAdmin: payload.isAdmin,
       };
     } catch (error) {
       this.logger.error('Erreur validation JWT:', error);
       throw new UnauthorizedException('Token invalide');
     }
   }
-}
\ No newline at end of file
+}
Index: api/src/feature/security/guard/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export * from './jwt.guard';
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/feature/security/guard/index.ts b/api/src/feature/security/guard/index.ts
--- a/api/src/feature/security/guard/index.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/feature/security/guard/index.ts	(date 1736262015378)
@@ -1,1 +1,1 @@
-export * from './jwt.guard';
\ No newline at end of file
+export * from './jwt.guard';
Index: api/src/feature/security/guard/jwt.guard.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { CanActivate, ExecutionContext, Injectable, Logger, UnauthorizedException } from '@nestjs/common';\r\nimport { JwtService } from '@nestjs/jwt';\r\nimport { ClientService } from 'model/Client/client.service';\r\n\r\n@Injectable()\r\nexport class JwtGuard implements CanActivate {\r\n  private readonly logger = new Logger(JwtGuard.name);\r\n\r\n  constructor(\r\n    private jwtService: JwtService,\r\n    private clientService: ClientService,\r\n  ) {}\r\n\r\n  async canActivate(context: ExecutionContext): Promise<boolean> {\r\n    const request = context.switchToHttp().getRequest();\r\n    const authHeader = request.headers['authorization'];\r\n\r\n    if (!authHeader) {\r\n      this.logger.warn('No authorization header found in request');\r\n      throw new UnauthorizedException('Token manquant');\r\n    }\r\n\r\n    const [type, token] = authHeader.split(' ');\r\n\r\n    if (type !== 'Bearer' || !token) {\r\n      this.logger.warn('Invalid authorization header format');\r\n      throw new UnauthorizedException('Format d\\'autorisation invalide');\r\n    }\r\n\r\n    try {\r\n      const payload = this.jwtService.verify(token);\r\n      // Chercher le client associé au credential_id\r\n      const client = await this.clientService.findByCredentialId(payload.sub);\r\n\r\n      if (!client) {\r\n        this.logger.error('Client not found for the given credential ID');\r\n        throw new UnauthorizedException('Client non trouvé');\r\n      }\r\n\r\n      // Attacher le client à la requête\r\n      request.user = {\r\n        clientId: client.clientId,\r\n        credentialId: payload.sub,\r\n        isAdmin: payload.isAdmin,\r\n      };\r\n\r\n      return true;\r\n    } catch (error) {\r\n      this.logger.error('JWT validation error:', error);\r\n      throw new UnauthorizedException('Token invalide');\r\n    }\r\n  }\r\n\r\n  private extractTokenFromHeader(request: any): string | undefined {\r\n    const authHeader = request.headers['authorization'];\r\n    if (!authHeader) {\r\n      return undefined;\r\n    }\r\n\r\n    const [type, token] = authHeader.split(' ');\r\n    return type === 'Bearer' ? token : undefined;\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/feature/security/guard/jwt.guard.ts b/api/src/feature/security/guard/jwt.guard.ts
--- a/api/src/feature/security/guard/jwt.guard.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/feature/security/guard/jwt.guard.ts	(date 1736262015378)
@@ -1,4 +1,10 @@
-import { CanActivate, ExecutionContext, Injectable, Logger, UnauthorizedException } from '@nestjs/common';
+import {
+  CanActivate,
+  ExecutionContext,
+  Injectable,
+  Logger,
+  UnauthorizedException,
+} from '@nestjs/common';
 import { JwtService } from '@nestjs/jwt';
 import { ClientService } from 'model/Client/client.service';
 
@@ -24,7 +30,7 @@
 
     if (type !== 'Bearer' || !token) {
       this.logger.warn('Invalid authorization header format');
-      throw new UnauthorizedException('Format d\'autorisation invalide');
+      throw new UnauthorizedException("Format d'autorisation invalide");
     }
 
     try {
Index: api/src/feature/security/utils/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export * from './password.utils'
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/feature/security/utils/index.ts b/api/src/feature/security/utils/index.ts
--- a/api/src/feature/security/utils/index.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/feature/security/utils/index.ts	(date 1736262015380)
@@ -1,1 +1,1 @@
-export * from './password.utils'
\ No newline at end of file
+export * from './password.utils';
Index: api/src/feature/security/service/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export * from './token.service';\r\nexport * from './security.service';
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/feature/security/service/index.ts b/api/src/feature/security/service/index.ts
--- a/api/src/feature/security/service/index.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/feature/security/service/index.ts	(date 1736262015378)
@@ -1,2 +1,2 @@
 export * from './token.service';
-export * from './security.service';
\ No newline at end of file
+export * from './security.service';
Index: api/src/feature/security/utils/password.utils.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import * as bcrypt from 'bcrypt';\r\n\r\nexport const encryptPassword = async (plaintextPassword: string): Promise<string> =>\r\n\r\n  await bcrypt.hash(plaintextPassword, 10);\r\nexport const comparePassword = async (plaintextPassword: string, hash: string):\r\n  Promise<boolean> => await bcrypt.compare(plaintextPassword, hash)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/feature/security/utils/password.utils.ts b/api/src/feature/security/utils/password.utils.ts
--- a/api/src/feature/security/utils/password.utils.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/feature/security/utils/password.utils.ts	(date 1736262015380)
@@ -1,7 +1,9 @@
 import * as bcrypt from 'bcrypt';
 
-export const encryptPassword = async (plaintextPassword: string): Promise<string> =>
-
-  await bcrypt.hash(plaintextPassword, 10);
-export const comparePassword = async (plaintextPassword: string, hash: string):
-  Promise<boolean> => await bcrypt.compare(plaintextPassword, hash)
\ No newline at end of file
+export const encryptPassword = async (
+  plaintextPassword: string,
+): Promise<string> => await bcrypt.hash(plaintextPassword, 10);
+export const comparePassword = async (
+  plaintextPassword: string,
+  hash: string,
+): Promise<boolean> => await bcrypt.compare(plaintextPassword, hash);
Index: api/src/feature/security/service/token.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Injectable, Logger, UnauthorizedException } from \"@nestjs/common\";\r\nimport { Credential, RefreshTokenPayload, Token } from \"../data\";\r\nimport { JwtService } from \"@nestjs/jwt\";\r\nimport { Repository } from \"typeorm\";\r\nimport { InjectRepository } from \"@nestjs/typeorm\";\r\nimport { Client } from \"model/Client/client.entity\";\r\nimport { configManager } from \"@common/config/config.manager\";\r\nimport { ConfigKey } from \"@common/config/enum\";\r\nimport { TokenExpiredException, TokenGenerationException } from \"../security.exception\";\r\nimport { ulid } from \"ulid\";\r\n\r\n@Injectable()\r\nexport class TokenService {\r\n  private readonly logger = new Logger(TokenService.name);\r\n\r\n  constructor(\r\n    @InjectRepository(Token)\r\n    private readonly repository: Repository<Token>,\r\n    @InjectRepository(Credential)\r\n    private readonly credentialRepository: Repository<Credential>,\r\n    @InjectRepository(Client)\r\n    private readonly clientRepository: Repository<Client>,\r\n    private readonly jwtService: JwtService\r\n  ) {}\r\n\r\n  async getTokens(credential: Credential): Promise<Token> {\r\n    try {\r\n      // 1. Supprimer les anciens tokens\r\n      await this.deleteFor(credential);\r\n\r\n      // 2. Trouver le client associé\r\n      const client = await this.clientRepository.findOne({\r\n        where: { credentialId: credential.credential_id }\r\n      });\r\n\r\n      // 3. Créer le payload avec le clientId\r\n      const payload = {\r\n        sub: credential.credential_id,\r\n        email: credential.mail,\r\n        isAdmin: credential.isAdmin,\r\n        clientId: client?.clientId\r\n      };\r\n\r\n      // 4. Générer les tokens\r\n      const [token, refreshToken] = await Promise.all([\r\n        this.jwtService.signAsync(payload, {\r\n          secret: configManager.getValue(ConfigKey.JWT_TOKEN_SECRET),\r\n          expiresIn: configManager.getValue(ConfigKey.JWT_TOKEN_EXPIRE_IN)\r\n        }),\r\n        this.jwtService.signAsync(payload, {\r\n          secret: configManager.getValue(ConfigKey.JWT_REFRESH_TOKEN_SECRET),\r\n          expiresIn: configManager.getValue(ConfigKey.JWT_REFRESH_TOKEN_EXPIRE_IN)\r\n        })\r\n      ]);\r\n\r\n      // 5. Créer et sauvegarder le nouveau token\r\n      const newToken = this.repository.create({\r\n        token_id: ulid(),\r\n        token,\r\n        refreshToken,\r\n        credential,\r\n        credentialId: credential.credential_id,\r\n        clientId: client?.clientId\r\n      });\r\n\r\n      return await this.repository.save(newToken);\r\n\r\n    } catch (error) {\r\n      this.logger.error('Token generation error:', error);\r\n      throw new TokenGenerationException();\r\n    }\r\n  }\r\n  async deleteFor(credential: Credential): Promise<void> {\r\n    try {\r\n      // Supprimer tous les tokens existants pour cet utilisateur\r\n      await this.repository.delete({ credential: { credential_id: credential.credential_id } });\r\n    } catch (error) {\r\n      this.logger.error('Error deleting tokens:', error);\r\n      // Continue même si la suppression échoue\r\n    }\r\n  }\r\n  //part refresh\r\n\r\n  async refresh(payload: RefreshTokenPayload): Promise<Token> {\r\n    try {\r\n      const decoded = this.jwtService.verify(payload.refresh, {\r\n        secret: configManager.getValue(ConfigKey.JWT_REFRESH_TOKEN_SECRET)\r\n      });\r\n\r\n      const credential = await this.credentialRepository.findOneBy({\r\n        credential_id: decoded.sub\r\n      });\r\n\r\n      if (!credential) {\r\n        throw new UnauthorizedException('Credential not found');\r\n      }\r\n\r\n      return this.getTokens(credential);\r\n\r\n    } catch (error) {\r\n      this.logger.error('Refresh token error:', error);\r\n      throw new TokenExpiredException();\r\n    }\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/feature/security/service/token.service.ts b/api/src/feature/security/service/token.service.ts
--- a/api/src/feature/security/service/token.service.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/feature/security/service/token.service.ts	(date 1736266069672)
@@ -1,13 +1,16 @@
-import { Injectable, Logger, UnauthorizedException } from "@nestjs/common";
-import { Credential, RefreshTokenPayload, Token } from "../data";
-import { JwtService } from "@nestjs/jwt";
-import { Repository } from "typeorm";
-import { InjectRepository } from "@nestjs/typeorm";
-import { Client } from "model/Client/client.entity";
-import { configManager } from "@common/config/config.manager";
-import { ConfigKey } from "@common/config/enum";
-import { TokenExpiredException, TokenGenerationException } from "../security.exception";
-import { ulid } from "ulid";
+import { Injectable, Logger, UnauthorizedException } from '@nestjs/common';
+import { Credential, RefreshTokenPayload, Token } from '../data';
+import { JwtService } from '@nestjs/jwt';
+import { Repository } from 'typeorm';
+import { InjectRepository } from '@nestjs/typeorm';
+import { Client } from 'model/Client/client.entity';
+import { configManager } from '@common/config/config.manager';
+import { ConfigKey } from '@common/config/enum';
+import {
+  TokenExpiredException,
+  TokenGenerationException,
+} from '../security.exception';
+import { ulid } from 'ulid';
 
 @Injectable()
 export class TokenService {
@@ -20,7 +23,7 @@
     private readonly credentialRepository: Repository<Credential>,
     @InjectRepository(Client)
     private readonly clientRepository: Repository<Client>,
-    private readonly jwtService: JwtService
+    private readonly jwtService: JwtService,
   ) {}
 
   async getTokens(credential: Credential): Promise<Token> {
@@ -30,7 +33,7 @@
 
       // 2. Trouver le client associé
       const client = await this.clientRepository.findOne({
-        where: { credentialId: credential.credential_id }
+        where: { credentialId: credential.credential_id },
       });
 
       // 3. Créer le payload avec le clientId
@@ -38,19 +41,21 @@
         sub: credential.credential_id,
         email: credential.mail,
         isAdmin: credential.isAdmin,
-        clientId: client?.clientId
+        clientId: client?.clientId,
       };
 
       // 4. Générer les tokens
       const [token, refreshToken] = await Promise.all([
         this.jwtService.signAsync(payload, {
           secret: configManager.getValue(ConfigKey.JWT_TOKEN_SECRET),
-          expiresIn: configManager.getValue(ConfigKey.JWT_TOKEN_EXPIRE_IN)
+          expiresIn: configManager.getValue(ConfigKey.JWT_TOKEN_EXPIRE_IN),
         }),
         this.jwtService.signAsync(payload, {
           secret: configManager.getValue(ConfigKey.JWT_REFRESH_TOKEN_SECRET),
-          expiresIn: configManager.getValue(ConfigKey.JWT_REFRESH_TOKEN_EXPIRE_IN)
-        })
+          expiresIn: configManager.getValue(
+            ConfigKey.JWT_REFRESH_TOKEN_EXPIRE_IN,
+          ),
+        }),
       ]);
 
       // 5. Créer et sauvegarder le nouveau token
@@ -60,11 +65,10 @@
         refreshToken,
         credential,
         credentialId: credential.credential_id,
-        clientId: client?.clientId
+        clientId: client?.clientId,
       });
 
       return await this.repository.save(newToken);
-
     } catch (error) {
       this.logger.error('Token generation error:', error);
       throw new TokenGenerationException();
@@ -73,7 +77,9 @@
   async deleteFor(credential: Credential): Promise<void> {
     try {
       // Supprimer tous les tokens existants pour cet utilisateur
-      await this.repository.delete({ credential: { credential_id: credential.credential_id } });
+      await this.repository.delete({
+        credential: { credential_id: credential.credential_id },
+      });
     } catch (error) {
       this.logger.error('Error deleting tokens:', error);
       // Continue même si la suppression échoue
@@ -84,11 +90,11 @@
   async refresh(payload: RefreshTokenPayload): Promise<Token> {
     try {
       const decoded = this.jwtService.verify(payload.refresh, {
-        secret: configManager.getValue(ConfigKey.JWT_REFRESH_TOKEN_SECRET)
+        secret: configManager.getValue(ConfigKey.JWT_REFRESH_TOKEN_SECRET),
       });
 
       const credential = await this.credentialRepository.findOneBy({
-        credential_id: decoded.sub
+        credential_id: decoded.sub,
       });
 
       if (!credential) {
@@ -96,7 +102,6 @@
       }
 
       return this.getTokens(credential);
-
     } catch (error) {
       this.logger.error('Refresh token error:', error);
       throw new TokenExpiredException();
Index: api/src/feature/security/service/security.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Injectable, Logger } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { DeepPartial, Repository } from 'typeorm';\r\nimport { TokenService } from './token.service';\r\nimport { Credential, RefreshTokenPayload, SignInPayload, SignupPayload, Token } from \"@feature/security/data\";\r\nimport { CredentialDeleteException, SignupException, UserAlreadyExistException, UserNotFoundException } from \"@feature/security/security.exception\";\r\nimport { Builder } from 'builder-pattern';\r\nimport { isNil } from 'lodash';\r\nimport { ulid } from 'ulid';\r\nimport { comparePassword, encryptPassword } from '../utils';\r\nimport { Client } from 'model/Client/client.entity'\r\n\r\n@Injectable()\r\nexport class SecurityService {\r\n  private readonly logger = new Logger(SecurityService.name);\r\n\r\n  constructor(\r\n    @InjectRepository(Credential)\r\n    private readonly repository: Repository<Credential>,\r\n    @InjectRepository(Client)    // Ajoutez cette injection\r\n    private readonly clientRepository: Repository<Client>,\r\n    private readonly tokenService: TokenService\r\n  ) {}\r\n\r\n  // Part detail\r\n  async detail(id: string): Promise<Credential> {\r\n    const result: Credential = await this.repository.findOne({ where: { credential_id: id } });\r\n\r\n    if (!isNil(result)) {\r\n      return result;\r\n    }\r\n    throw new UserNotFoundException();\r\n  }\r\n\r\n  // Part signIn\r\n  async signIn(payload: SignInPayload, isAdmin: boolean): Promise<Token> {\r\n    try {\r\n      const credential = await this.repository.findOneBy({ mail: payload.mail });\r\n\r\n      if (!credential) {\r\n        throw new UserNotFoundException();\r\n      }\r\n\r\n      // Trouver le client associé directement avec le repository\r\n      const client = await this.clientRepository.findOne({\r\n        where: { credentialId: credential.credential_id }\r\n      });\r\n\r\n      console.log('Client trouvé:', client);\r\n\r\n      // Générer le token\r\n      const token = await this.tokenService.getTokens(credential);\r\n\r\n      // Ajouter le clientId à la réponse si disponible\r\n      return {\r\n        ...token,\r\n        clientId: client?.clientId\r\n      };\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n  // Ajout d'une méthode de validation des identifiants\r\n  private async validateCredentials(\r\n    email: string,\r\n    password: string,\r\n    isAdmin: boolean\r\n  ): Promise<Credential> {\r\n    const user = await this.repository.findOneBy({ mail: email });\r\n\r\n    if (!user || user.isAdmin !== isAdmin || !(await comparePassword(password, user.password))) {\r\n      throw new UserNotFoundException('Identifiants invalides');\r\n    }\r\n\r\n    if (!user.active) {\r\n      throw new UserNotFoundException('Compte désactivé');\r\n    }\r\n\r\n    return user;\r\n  }\r\n  async checkUserRole(userId: string, requiredRole: 'admin' | 'client'): Promise<boolean> {\r\n    try {\r\n      const user = await this.detail(userId);\r\n      return requiredRole === 'admin' ? user.isAdmin : !user.isAdmin;\r\n    } catch (error) {\r\n      this.logger.error(`Error checking user role:`, error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async signup(payload: SignupPayload, isAdmin: boolean = false): Promise<Credential> {\r\n    try {\r\n      // Créer l'objet Credential\r\n      const credential = Builder<Credential>()\r\n        .credential_id(ulid())\r\n        .username(payload.username)\r\n        .password(await encryptPassword(payload.password))\r\n        .mail(payload.mail)\r\n        .isAdmin(isAdmin)\r\n        .active(true)\r\n        .build();\r\n\r\n      // Sauvegarder l'objet Credential\r\n      const savedCredential = await this.repository.save(credential);\r\n\r\n      // Créer le client si ce n'est pas un admin\r\n      if (!isAdmin) {\r\n        const client = this.clientRepository.create({\r\n          firstName: payload.username,\r\n          lastName: '',\r\n          address: '',\r\n          credential: savedCredential as DeepPartial<Credential>, // Utiliser DeepPartial<Credential>\r\n        });\r\n\r\n        await this.clientRepository.save(client);\r\n      }\r\n\r\n      return savedCredential;\r\n    } catch (error) {\r\n      if (error instanceof UserAlreadyExistException) {\r\n        throw error; // Relancer l'exception si c'est une UserAlreadyExistException\r\n      }\r\n      this.logger.error(`Error during signup: ${error.message}`);\r\n      throw new SignupException('Erreur lors de la création du compte');\r\n    }\r\n  }\r\n  // Part refresh\r\n  async refresh(payload: RefreshTokenPayload): Promise<Token | null> {\r\n    return this.tokenService.refresh(payload);\r\n  }\r\n\r\n  // Part Delete\r\n  async delete(id: string): Promise<void> {\r\n    try {\r\n      const detail = await this.detail(id);\r\n      await this.tokenService.deleteFor(detail);\r\n      await this.repository.remove(detail);\r\n    } catch (e) {\r\n      throw new CredentialDeleteException();\r\n    }\r\n  }\r\n  async findByEmail(email: string): Promise<Credential | null> {\r\n    return this.repository.findOneBy({ mail: email });\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/src/feature/security/service/security.service.ts b/api/src/feature/security/service/security.service.ts
--- a/api/src/feature/security/service/security.service.ts	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/api/src/feature/security/service/security.service.ts	(date 1736268337182)
@@ -2,13 +2,24 @@
 import { InjectRepository } from '@nestjs/typeorm';
 import { DeepPartial, Repository } from 'typeorm';
 import { TokenService } from './token.service';
-import { Credential, RefreshTokenPayload, SignInPayload, SignupPayload, Token } from "@feature/security/data";
-import { CredentialDeleteException, SignupException, UserAlreadyExistException, UserNotFoundException } from "@feature/security/security.exception";
+import {
+  Credential,
+  RefreshTokenPayload,
+  SignInPayload,
+  SignupPayload,
+  Token,
+} from '@feature/security/data';
+import {
+  CredentialDeleteException,
+  SignupException,
+  UserAlreadyExistException,
+  UserNotFoundException,
+} from '@feature/security/security.exception';
 import { Builder } from 'builder-pattern';
 import { isNil } from 'lodash';
 import { ulid } from 'ulid';
 import { comparePassword, encryptPassword } from '../utils';
-import { Client } from 'model/Client/client.entity'
+import { Client } from 'model/Client/client.entity';
 
 @Injectable()
 export class SecurityService {
@@ -17,14 +28,16 @@
   constructor(
     @InjectRepository(Credential)
     private readonly repository: Repository<Credential>,
-    @InjectRepository(Client)    // Ajoutez cette injection
+    @InjectRepository(Client) // Ajoutez cette injection
     private readonly clientRepository: Repository<Client>,
-    private readonly tokenService: TokenService
+    private readonly tokenService: TokenService,
   ) {}
 
   // Part detail
   async detail(id: string): Promise<Credential> {
-    const result: Credential = await this.repository.findOne({ where: { credential_id: id } });
+    const result: Credential = await this.repository.findOne({
+      where: { credential_id: id },
+    });
 
     if (!isNil(result)) {
       return result;
@@ -32,18 +45,33 @@
     throw new UserNotFoundException();
   }
 
-  // Part signIn
+  // Part signIn (correction claudio client-admin)
   async signIn(payload: SignInPayload, isAdmin: boolean): Promise<Token> {
     try {
-      const credential = await this.repository.findOneBy({ mail: payload.mail });
+      // Recherche de l'utilisateur par email
+      const credential = await this.repository.findOneBy({
+        mail: payload.mail,
+      });
 
+      // Vérifier si l'utilisateur existe
       if (!credential) {
-        throw new UserNotFoundException();
+        throw new UserNotFoundException('Utilisateur introuvable');
+      }
+
+      // Vérifier le mot de passe (en utilisant une fonction de comparaison sécurisée)
+      const isPasswordValid = await comparePassword(payload.password, credential.password);
+      if (!isPasswordValid) {
+        throw new UserNotFoundException('Mot de passe incorrect');
+      }
+
+      // Si connexion en tant qu'admin, vérifier le rôle
+      if (isAdmin && !credential.isAdmin) {
+        throw new Error('Cet utilisateur n\'a pas les droits administrateur');
       }
 
-      // Trouver le client associé directement avec le repository
+      // Trouver le client associé directement avec le repository (si besoin)
       const client = await this.clientRepository.findOne({
-        where: { credentialId: credential.credential_id }
+        where: { credentialId: credential.credential_id },
       });
 
       console.log('Client trouvé:', client);
@@ -54,21 +82,29 @@
       // Ajouter le clientId à la réponse si disponible
       return {
         ...token,
-        clientId: client?.clientId
+        clientId: client?.clientId,
       };
     } catch (error) {
       throw error;
     }
   }
+
+
+
+
   // Ajout d'une méthode de validation des identifiants
   private async validateCredentials(
     email: string,
     password: string,
-    isAdmin: boolean
+    isAdmin: boolean,
   ): Promise<Credential> {
     const user = await this.repository.findOneBy({ mail: email });
 
-    if (!user || user.isAdmin !== isAdmin || !(await comparePassword(password, user.password))) {
+    if (
+      !user ||
+      user.isAdmin !== isAdmin ||
+      !(await comparePassword(password, user.password))
+    ) {
       throw new UserNotFoundException('Identifiants invalides');
     }
 
@@ -78,7 +114,10 @@
 
     return user;
   }
-  async checkUserRole(userId: string, requiredRole: 'admin' | 'client'): Promise<boolean> {
+  async checkUserRole(
+    userId: string,
+    requiredRole: 'admin' | 'client',
+  ): Promise<boolean> {
     try {
       const user = await this.detail(userId);
       return requiredRole === 'admin' ? user.isAdmin : !user.isAdmin;
@@ -88,7 +127,10 @@
     }
   }
 
-  async signup(payload: SignupPayload, isAdmin: boolean = false): Promise<Credential> {
+  async signup(
+    payload: SignupPayload,
+    isAdmin: boolean = false,
+  ): Promise<Credential> {
     try {
       // Créer l'objet Credential
       const credential = Builder<Credential>()
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"b7d382ad-49c7-432b-86f3-9d0a39a078e1\" name=\"Changes\" comment=\"j'ai commit 2 pages\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;ColClaudio&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/Samy801172/projet_abdel_andrea_claudio.git&quot;,\r\n    &quot;accountId&quot;: &quot;d462dddc-003b-4091-b082-58c17864c027&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 8\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2r5MvxxiZ3bP7XkbkrElTimmzon\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main__claudio&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/projetfin/my-app&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;ts.external.directory.path&quot;: &quot;C:\\\\projetfin\\\\my-app\\\\node_modules\\\\typescript\\\\lib&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-deb605915726-JavaScript-WS-243.22562.222\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"b7d382ad-49c7-432b-86f3-9d0a39a078e1\" name=\"Changes\" comment=\"\" />\r\n      <created>1735844721319</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1735844721319</updated>\r\n      <workItem from=\"1735844722665\" duration=\"1611000\" />\r\n      <workItem from=\"1736184568475\" duration=\"41000\" />\r\n      <workItem from=\"1736187249000\" duration=\"249000\" />\r\n      <workItem from=\"1736193792006\" duration=\"325000\" />\r\n      <workItem from=\"1736196367220\" duration=\"423000\" />\r\n      <workItem from=\"1736222523259\" duration=\"82000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"j'ai commit 2 pages\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1736196744818</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1736196744818</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"2\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n    <option name=\"exactExcludedFiles\">\r\n      <list>\r\n        <option value=\"$PROJECT_DIR$/api/src/common/config/api/http-exception.filter.js\" />\r\n        <option value=\"$PROJECT_DIR$/api/src/main.js\" />\r\n        <option value=\"$PROJECT_DIR$/api/src/common/index.js\" />\r\n        <option value=\"$PROJECT_DIR$/api/src/common/config/index.js\" />\r\n        <option value=\"$PROJECT_DIR$/api/src/common/config/api/index.js\" />\r\n        <option value=\"$PROJECT_DIR$/api/src/common/config/api/enum/index.js\" />\r\n        <option value=\"$PROJECT_DIR$/api/src/common/config/api/enum/api-code.response.js\" />\r\n        <option value=\"$PROJECT_DIR$/api/src/common/config/api/model/index.js\" />\r\n        <option value=\"$PROJECT_DIR$/api/src/common/config/api/model/api.response.js\" />\r\n        <option value=\"$PROJECT_DIR$/api/src/common/config/api/model/api.exception.js\" />\r\n        <option value=\"$PROJECT_DIR$/api/src/common/config/documentation/index.js\" />\r\n        <option value=\"$PROJECT_DIR$/api/src/common/config/documentation/swagger.configuration.js\" />\r\n        <option value=\"$PROJECT_DIR$/api/src/feature/root/app.module.js\" />\r\n        <option value=\"$PROJECT_DIR$/api/src/feature/index.js\" />\r\n        <option value=\"$PROJECT_DIR$/api/src/feature/root/app.service.js\" />\r\n        <option value=\"$PROJECT_DIR$/api/src/feature/root/app.controller.js\" />\r\n        <option value=\"$PROJECT_DIR$/api/src/feature/root/index.js\" />\r\n        <option value=\"$PROJECT_DIR$/api/src/feature/root/app.exception.js\" />\r\n        <option value=\"$PROJECT_DIR$/api/src/feature/root/app.swagger.js\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"j'ai commit 2 pages\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"j'ai commit 2 pages\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 938c5a62a24de00fd66ce4697fbb2bbf8f05e985)
+++ b/.idea/workspace.xml	(date 1736269144228)
@@ -6,6 +6,173 @@
   <component name="ChangeListManager">
     <list default="true" id="b7d382ad-49c7-432b-86f3-9d0a39a078e1" name="Changes" comment="j'ai commit 2 pages">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/.eslintrc.js" beforeDir="false" afterPath="$PROJECT_DIR$/api/.eslintrc.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/.prettierrc" beforeDir="false" afterPath="$PROJECT_DIR$/api/.prettierc" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/package-lock.json" beforeDir="false" afterPath="$PROJECT_DIR$/api/package-lock.json" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/package.json" beforeDir="false" afterPath="$PROJECT_DIR$/api/package.json" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/common/config/api/api.interceptor.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/common/config/api/api.interceptor.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/common/config/api/enum/api-code.response.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/common/config/api/enum/api-code.response.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/common/config/api/enum/index.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/common/config/api/enum/index.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/common/config/api/http-exception.filter.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/common/config/api/http-exception.filter.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/common/config/api/index.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/common/config/api/index.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/common/config/api/model/api.exception.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/common/config/api/model/api.exception.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/common/config/api/model/api.response.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/common/config/api/model/api.response.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/common/config/api/model/index.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/common/config/api/model/index.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/common/config/config.manager.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/common/config/config.manager.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/common/config/documentation/index.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/common/config/documentation/index.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/common/config/documentation/swagger.configuration.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/common/config/documentation/swagger.configuration.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/common/config/enum/config-key.enum.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/common/config/enum/config-key.enum.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/common/config/enum/index.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/common/config/enum/index.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/common/config/index.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/common/config/index.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/common/config/metadata/index.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/common/config/metadata/index.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/common/config/metadata/public.metadata.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/common/config/metadata/public.metadata.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/common/config/metadata/user.metadata.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/common/config/metadata/user.metadata.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/common/config/typeorm.config.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/common/config/typeorm.config.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/common/decorators/index.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/common/decorators/index.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/common/decorators/user.decorator.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/common/decorators/user.decorator.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/common/index.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/common/index.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/config/orm.config.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/config/orm.config.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/feature/index.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/feature/index.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/feature/root/app.controller.spec.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/feature/root/app.controller.spec.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/feature/root/app.controller.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/feature/root/app.controller.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/feature/root/app.exception.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/feature/root/app.exception.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/feature/root/app.module.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/feature/root/app.module.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/feature/root/app.service.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/feature/root/app.service.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/feature/root/app.swagger.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/feature/root/app.swagger.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/feature/root/index.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/feature/root/index.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/feature/security/data/entity/credential.entity.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/feature/security/data/entity/credential.entity.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/feature/security/data/entity/index.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/feature/security/data/entity/index.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/feature/security/data/entity/token.entity.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/feature/security/data/entity/token.entity.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/feature/security/data/index.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/feature/security/data/index.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/feature/security/data/payload/index.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/feature/security/data/payload/index.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/feature/security/data/payload/refresh.payload.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/feature/security/data/payload/refresh.payload.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/feature/security/data/payload/signin.payload.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/feature/security/data/payload/signin.payload.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/feature/security/data/payload/signup.payload.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/feature/security/data/payload/signup.payload.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/feature/security/guard/admin.guard.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/feature/security/guard/admin.guard.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/feature/security/guard/index.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/feature/security/guard/index.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/feature/security/guard/jwt-auth.guard.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/feature/security/guard/jwt-auth.guard.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/feature/security/guard/jwt.guard.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/feature/security/guard/jwt.guard.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/feature/security/guard/jwt.strategy.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/feature/security/guard/jwt.strategy.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/feature/security/index.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/feature/security/index.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/feature/security/security.controller.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/feature/security/security.controller.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/feature/security/security.exception.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/feature/security/security.exception.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/feature/security/security.module.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/feature/security/security.module.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/feature/security/service/index.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/feature/security/service/index.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/feature/security/service/security.service.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/feature/security/service/security.service.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/feature/security/service/token.service.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/feature/security/service/token.service.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/feature/security/utils/index.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/feature/security/utils/index.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/feature/security/utils/password.utils.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/feature/security/utils/password.utils.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/main.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/main.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Administrator/administrator.controller.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Administrator/administrator.controller.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Administrator/administrator.entity.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Administrator/administrator.entity.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Administrator/administrator.module.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Administrator/administrator.module.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Administrator/administrator.service.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Administrator/administrator.service.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Administrator/dto/create-administrator.dto.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Administrator/dto/create-administrator.dto.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Administrator/dto/update-administrator.dto.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Administrator/dto/update-administrator.dto.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Appointment/appointment.controller.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Appointment/appointment.controller.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Appointment/appointment.entity.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Appointment/appointment.entity.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Appointment/appointment.module.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Appointment/appointment.module.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Appointment/appointment.service.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Appointment/appointment.service.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Appointment/dto/create-appointment.dto.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Appointment/dto/create-appointment.dto.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Appointment/dto/update-appointment.dto.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Appointment/dto/update-appointment.dto.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Cart/cart.controller.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Cart/cart.controller.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Cart/cart.entity.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Cart/cart.entity.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Cart/cart.module.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Cart/cart.module.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Cart/cart.service.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Cart/cart.service.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Cart/dto/create-cart.dto.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Cart/dto/create-cart.dto.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Cart/dto/update-cart.dto.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Cart/dto/update-cart.dto.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Client/client.controller.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Client/client.controller.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Client/client.entity.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Client/client.entity.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Client/client.module.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Client/client.module.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Client/client.service.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Client/client.service.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Client/dto/create-client.dto.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Client/dto/create-client.dto.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Client/dto/update-client.dto.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Client/dto/update-client.dto.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Invoice/dto/create-invoice.dto.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Invoice/dto/create-invoice.dto.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Invoice/dto/update-invoice.dto.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Invoice/dto/update-invoice.dto.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Invoice/invoice.controller.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Invoice/invoice.controller.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Invoice/invoice.entity.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Invoice/invoice.entity.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Invoice/invoice.module.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Invoice/invoice.module.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Invoice/invoice.service.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Invoice/invoice.service.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Order/OrderDetail/order-detail.entity.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Order/OrderDetail/order-detail.entity.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Order/OrderDetail/order-detail.module.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Order/OrderDetail/order-detail.module.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Order/dto/create-order.dto.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Order/dto/create-order.dto.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Order/dto/order-line.dto.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Order/dto/order-line.dto.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Order/dto/update-order-.dto.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Order/dto/update-order-.dto.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Order/order.controller.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Order/order.controller.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Order/order.entity.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Order/order.entity.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Order/order.module.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Order/order.module.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Order/order.service.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Order/order.service.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/OrderStatus/dto/create-orderStatus.dto.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/OrderStatus/dto/create-orderStatus.dto.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/OrderStatus/dto/order-status.enum.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/OrderStatus/dto/order-status.enum.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/OrderStatus/dto/update-orderStatus.dto.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/OrderStatus/dto/update-orderStatus.dto.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/OrderStatus/orderStatus.controller.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/OrderStatus/orderStatus.controller.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/OrderStatus/orderStatus.entity.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/OrderStatus/orderStatus.entity.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/OrderStatus/orderStatus.module.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/OrderStatus/orderStatus.module.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/OrderStatus/orderStatus.service.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/OrderStatus/orderStatus.service.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Payment/dto/create-payment.dto.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Payment/dto/create-payment.dto.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Payment/dto/update-payment.dto.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Payment/dto/update-payment.dto.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Payment/payment.controller.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Payment/payment.controller.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Payment/payment.entity.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Payment/payment.entity.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Payment/payment.module.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Payment/payment.module.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Payment/payment.service.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Payment/payment.service.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Paypal/dto/paypal-capture.dto.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Paypal/dto/paypal-capture.dto.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Paypal/dto/paypal-response.dto.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Paypal/dto/paypal-response.dto.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Paypal/dto/paypal.dto.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Paypal/dto/paypal.dto.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Paypal/dto/paypalOrder.dto.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Paypal/dto/paypalOrder.dto.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Paypal/paypal.controller.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Paypal/paypal.controller.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Paypal/paypal.entity.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Paypal/paypal.entity.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Paypal/paypal.module.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Paypal/paypal.module.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Paypal/paypal.service.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Paypal/paypal.service.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Prescription/dto/create-prescription.dto.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Prescription/dto/create-prescription.dto.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Prescription/dto/update-prescription.dto.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Prescription/dto/update-prescription.dto.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Prescription/prescription.controller.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Prescription/prescription.controller.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Prescription/prescription.entity.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Prescription/prescription.entity.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Prescription/prescription.module.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Prescription/prescription.module.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Prescription/prescription.service.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Prescription/prescription.service.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Product/dto/create-product.dto.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Product/dto/create-product.dto.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Product/dto/update-product.dto.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Product/dto/update-product.dto.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Product/product.controller.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Product/product.controller.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Product/product.entity.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Product/product.entity.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Product/product.module.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Product/product.module.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Product/product.service.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Product/product.service.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/ProductPromotion/dto/create-productPromotion.dto.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/ProductPromotion/dto/create-productPromotion.dto.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/ProductPromotion/dto/update-productPromotion.dto.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/ProductPromotion/dto/update-productPromotion.dto.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/ProductPromotion/index.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/ProductPromotion/index.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/ProductPromotion/productPromotion.controller.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/ProductPromotion/productPromotion.controller.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/ProductPromotion/productPromotion.entity.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/ProductPromotion/productPromotion.entity.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/ProductPromotion/productPromotion.module.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/ProductPromotion/productPromotion.module.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/ProductPromotion/productPromotion.service.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/ProductPromotion/productPromotion.service.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Promotion/dto/create-promotion.dto.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Promotion/dto/create-promotion.dto.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Promotion/promotion.controller.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Promotion/promotion.controller.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Promotion/promotion.entity.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Promotion/promotion.entity.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Promotion/promotion.module.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Promotion/promotion.module.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Promotion/promotion.service.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Promotion/promotion.service.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Service/dto/create-service.dto.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Service/dto/create-service.dto.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Service/dto/update-service.dto.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Service/dto/update-service.dto.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Service/service.controller.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Service/service.controller.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Service/service.entity.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Service/service.entity.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Service/service.module.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Service/service.module.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Service/service.service.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Service/service.service.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Stock/dto/stock-alert.dto.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Stock/dto/stock-alert.dto.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Stock/stock.controller.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Stock/stock.controller.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Stock/stock.entity.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Stock/stock.entity.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Stock/stock.module.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Stock/stock.module.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Stock/stock.service.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Stock/stock.service.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Type/dto/create-type.dto.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Type/dto/create-type.dto.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Type/dto/update-type.dto.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Type/dto/update-type.dto.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Type/type.controller.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Type/type.controller.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Type/type.entity.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Type/type.entity.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Type/type.module.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Type/type.module.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/Type/type.service.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/Type/type.service.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/User/dto/createUser.dto.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/User/dto/createUser.dto.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/User/dto/updateUser.dto.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/User/dto/updateUser.dto.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/User/user.controller.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/User/user.controller.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/User/user.entity.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/User/user.entity.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/User/user.module.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/User/user.module.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/User/user.service.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/User/user.service.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/src/model/index.ts" beforeDir="false" afterPath="$PROJECT_DIR$/api/src/model/index.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/my-app/src/app/components/Login/login.component.ts" beforeDir="false" afterPath="$PROJECT_DIR$/my-app/src/app/components/Login/login.component.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/my-app/src/app/services/auth/auth.service.ts" beforeDir="false" afterPath="$PROJECT_DIR$/my-app/src/app/services/auth/auth.service.ts" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -30,6 +197,16 @@
   &quot;selectedUrlAndAccountId&quot;: {
     &quot;url&quot;: &quot;https://github.com/Samy801172/projet_abdel_andrea_claudio.git&quot;,
     &quot;accountId&quot;: &quot;d462dddc-003b-4091-b082-58c17864c027&quot;
+  },
+  &quot;recentNewPullRequestHead&quot;: {
+    &quot;server&quot;: {
+      &quot;useHttp&quot;: false,
+      &quot;host&quot;: &quot;github.com&quot;,
+      &quot;port&quot;: null,
+      &quot;suffix&quot;: null
+    },
+    &quot;owner&quot;: &quot;Samy801172&quot;,
+    &quot;repository&quot;: &quot;projet_abdel_andrea_claudio&quot;
   }
 }</component>
   <component name="ProjectColorInfo">{
@@ -44,7 +221,7 @@
   &quot;keyToString&quot;: {
     &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
     &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
-    &quot;git-widget-placeholder&quot;: &quot;main__claudio&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;#1 on main__claudio&quot;,
     &quot;last_opened_file_path&quot;: &quot;C:/projetfin/my-app&quot;,
     &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
     &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
@@ -76,6 +253,9 @@
       <workItem from="1736193792006" duration="325000" />
       <workItem from="1736196367220" duration="423000" />
       <workItem from="1736222523259" duration="82000" />
+      <workItem from="1736266970346" duration="159000" />
+      <workItem from="1736267244898" duration="657000" />
+      <workItem from="1736268579590" duration="559000" />
     </task>
     <task id="LOCAL-00001" summary="j'ai commit 2 pages">
       <option name="closed" value="true" />
diff --git a/api/.prettierrc b/api/.prettierc
rename from api/.prettierrc
rename to api/.prettierc
