{
  "version": 3,
  "sources": ["src/app/feature/Dashboard/guard/auth.guard.ts", "src/app/services/payment/payment.service.ts", "src/app/components/PayPal/paypal-button.component.ts", "src/app/components/checkout/checkout.component.ts", "src/app/components/checkout/checkout.component.html", "src/app/components/Promotion/promotion-timer.component.ts"],
  "sourcesContent": ["// feature/Dashboard/guard/auth.guard.ts\r\nimport { Injectable } from '@angular/core';\r\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot} from '@angular/router';\r\nimport { AuthService } from '../../../services/auth/auth.service';\r\nimport {NotificationService} from '../../../services/notification/notification.service';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class AuthGuard implements CanActivate {\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private notificationService: NotificationService\r\n  ) {}\r\n  isAuthenticated(): boolean {\r\n    const token = localStorage.getItem('token');\r\n    return !!token;\r\n  }\r\n\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n    if (this.authService.isAuthenticated()) {\r\n      return true;\r\n    }\r\n\r\n    this.notificationService.error('Veuillez vous connecter pour accéder à cette page');\r\n    this.router.navigate(['/login'], {\r\n      queryParams: { returnUrl: state.url }\r\n    });\r\n    return false;\r\n  }\r\n\r\n\r\n}\r\n", "import { Injectable } from '@angular/core'; // Permet de marquer la classe comme un service injectable dans Angular\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http'; // Importation de HttpClient et HttpHeaders pour effectuer des requêtes HTTP\r\nimport { Observable, throwError } from 'rxjs'; // Utilisation de RxJS pour les observables et la gestion des erreurs\r\nimport { catchError, tap, switchMap } from 'rxjs/operators'; // Importation des opérateurs RxJS pour le traitement des flux\r\nimport { environment } from '../../../environments/environment'; // Importation des variables d'environnement (ex: URL de l'API)\r\nimport { NotificationService } from '../notification/notification.service'; // Service pour afficher des notifications d'erreurs ou de succès\r\nimport { OrderService } from '../order/order.service'; // Service pour interagir avec les ordres (pas utilisé ici mais importé)\r\n\r\n@Injectable({\r\n  providedIn: 'root' // Déclare ce service comme étant disponible globalement dans toute l'application\r\n})\r\nexport class PaymentService {\r\n  private apiUrl = environment.apiUrl; // URL de base de l'API (dépend de l'environnement configuré)\r\n\r\n  constructor(\r\n    private http: HttpClient, // Injection de HttpClient pour effectuer des requêtes HTTP\r\n    private notificationService: NotificationService, // Injection du service pour afficher des notifications\r\n    private orderService: OrderService // Injection du service de gestion des commandes (pas utilisé ici mais injecté)\r\n  ) {}\r\n\r\n  // Méthode pour créer un ordre de paiement PayPal\r\n  createPayPalOrder(amount: number, isDeposit: boolean = false, manufacturingId?: number): Observable<any> {\r\n    const clientId = localStorage.getItem('clientId'); // Récupère l'ID client depuis le localStorage\r\n    if (!clientId) { // Vérifie si le clientId existe dans le localStorage\r\n      return throwError(() => new Error('Non autorisé')); // Si clientId n'est pas trouvé, lance une erreur\r\n    }\r\n\r\n    // Crée l'objet de données à envoyer dans la requête\r\n    const payload = {\r\n      amount: Number(amount.toFixed(2)), // Formate le montant en nombre à 2 décimales\r\n      clientId: Number(clientId), // Convertit clientId en nombre\r\n      manufacturingId, // Optionnel: ID de fabrication\r\n      currency: 'EUR', // Monnaie EUR\r\n      isManufacturing: !!manufacturingId // Indique si le paiement est pour un produit de fabrication\r\n    };\r\n\r\n    // Envoie une requête HTTP POST pour créer une commande PayPal\r\n    return this.http.post(\r\n      `${this.apiUrl}/payments/paypal/create`, // URL de l'API pour créer la commande PayPal\r\n      payload, // Données envoyées dans la requête\r\n      { headers: this.getHeaders() } // En-têtes HTTP contenant le token d'authentification\r\n    ).pipe(\r\n      tap(response => console.log('Ordre PayPal créé:', response)), // Logge la réponse à la requête\r\n      catchError(error => { // Si une erreur survient, la loggue et la lance\r\n        console.error('Erreur création commande PayPal:', error);\r\n        return throwError(() => error); // Relance l'erreur pour qu'elle soit gérée en aval\r\n      })\r\n    );\r\n  }\r\n\r\n  // Méthode pour capturer un ordre PayPal\r\n  capturePayPalOrder(paypalOrderId: string, manufacturingId: number): Observable<any> {\r\n    const clientId = localStorage.getItem('clientId'); // Récupère l'ID client depuis le localStorage\r\n    if (!clientId) { // Si clientId est absent, renvoie une erreur\r\n      return throwError(() => new Error('Non autorisé'));\r\n    }\r\n\r\n    // Crée l'objet de données à envoyer dans la requête\r\n    const payload = {\r\n      paypalOrderId, // ID de la commande PayPal\r\n      clientId: Number(clientId), // ID client\r\n      manufacturingId, // ID de fabrication\r\n      status: 'COMPLETED', // Statut de la commande\r\n      isManufacturing: !!manufacturingId // Indique si c'est un paiement de fabrication\r\n    };\r\n\r\n    // Envoie une requête HTTP POST pour capturer la commande PayPal\r\n    return this.http.post(\r\n      `${this.apiUrl}/payments/paypal/capture/${paypalOrderId}`, // URL de l'API pour capturer la commande PayPal\r\n      payload, // Données envoyées dans la requête\r\n      { headers: this.getHeaders() } // En-têtes HTTP avec le token d'authentification\r\n    ).pipe(\r\n      tap(response => console.log('Capture PayPal réussie:', response)), // Logge la réponse de la capture\r\n      catchError(error => { // Si une erreur survient, la loggue et affiche une notification d'erreur\r\n        console.error('Erreur capture PayPal:', error);\r\n        this.notificationService.error('Erreur lors de la capture du paiement'); // Notification d'erreur\r\n        return throwError(() => error); // Relance l'erreur\r\n      })\r\n    );\r\n  }\r\n\r\n  // Méthode privée pour obtenir les en-têtes HTTP (notamment pour l'authentification)\r\n  private getHeaders(): HttpHeaders {\r\n    const token = localStorage.getItem('token'); // Récupère le token d'authentification depuis le localStorage\r\n    return new HttpHeaders({\r\n      'Authorization': `Bearer ${token}`, // Ajoute le token dans l'en-tête Authorization\r\n      'Content-Type': 'application/json' // Définit le type de contenu en JSON\r\n    });\r\n  }\r\n}\r\n", "import { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { NotificationService } from '../../services/notification/notification.service';\nimport { PaymentService } from '../../services/payment/payment.service';\nimport { environment } from '../../../environments/environment';\nimport { NgZone } from '@angular/core';\nimport { CartService } from '../../services/cart/cart.service';\nimport { switchMap } from 'rxjs/operators';\n\n// Déclare l'objet global `window` pour inclure PayPal\ndeclare global {\n  interface Window {\n    paypal?: any;\n  }\n}\n\n@Component({\n  selector: 'app-paypal-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: `\n    <div class=\"paypal-button-container\">\n      <div id=\"paypal-button\"></div>\n    </div>\n  `,\n  styles: [`\n    .paypal-button-container {\n      margin: 20px 0;\n      text-align: center;\n    }\n  `]\n})\nexport class PaypalButtonComponent implements OnInit {\n  // Montant du paiement (requis)\n  @Input() amount!: number;\n  // Indique si le paiement concerne un acompte\n  @Input() isDeposit: boolean = false;\n  // Identifiant d'une demande de fabrication (optionnel)\n  @Input() manufacturingRequestId?: number;\n  // Événement émis lors d'un paiement réussi\n  @Output() paymentSuccess = new EventEmitter<any>();\n  // Tableau pour stocker les articles du panier\n  cartItems: any[] = [];\n\n  constructor(\n    private paymentService: PaymentService, // Service de gestion des paiements\n    private cartService: CartService, // Service de gestion du panier\n    private router: Router, // Service de navigation\n    private notificationService: NotificationService, // Service de notifications utilisateur\n    private ngZone: NgZone // Gestion du cycle de vie Angular dans des processus asynchrones\n  ) {\n    this.loadCartItems(); // Charge les articles du panier dès l'initialisation du composant\n  }\n\n  ngOnInit() {\n    // Vérifie si un montant a été fourni\n    if (!this.amount) {\n      console.error('Amount is required'); // Affiche une erreur si le montant est manquant\n      return;\n    }\n    this.initPayPalButton(); // Initialise le bouton PayPal\n  }\n\n  // Récupère les articles du panier depuis le service CartService\n  private loadCartItems() {\n    this.cartService.getCartItems().subscribe(items => {\n      this.cartItems = items;\n    });\n  }\n\n  // Initialise le bouton PayPal et configure ses fonctionnalités\n  private initPayPalButton() {\n    // Vérifie si le script PayPal est bien chargé\n    if (!window.paypal) {\n      console.error('PayPal script not loaded'); // Affiche une erreur si PayPal n'est pas chargé\n      return;\n    }\n\n    // Configuration des boutons PayPal\n    window.paypal.Buttons({\n      // Création de la commande PayPal\n      createOrder: async (data: any, actions: any) => {\n        try {\n          console.log('Creating PayPal order with:', {\n            amount: this.amount,\n            isDeposit: this.isDeposit,\n            manufacturingRequestId: this.manufacturingRequestId\n          });\n\n          // Envoie la requête de création de commande au service PaymentService\n          const response = await this.paymentService.createPayPalOrder(\n            this.amount,\n            this.isDeposit,\n            this.manufacturingRequestId\n          ).toPromise();\n          \n          console.log('PayPal order created:', response);\n          return response.paypalOrderId; // Retourne l'ID de la commande PayPal\n        } catch (error) {\n          console.error('Erreur création commande:', error);\n          this.notificationService.error('Erreur lors de la création de la commande');\n          throw error; // Lève une erreur si la création échoue\n        }\n      },\n\n      // Validation du paiement après approbation\n      onApprove: async (data: any) => {\n        try {\n          console.log('Capturing PayPal order:', {\n            orderId: data.orderID,\n            manufacturingId: this.manufacturingRequestId\n          });\n\n          // Capture le paiement en appelant le service PaymentService\n          const result = await this.paymentService.capturePayPalOrder(\n            data.orderID,\n            this.manufacturingRequestId || 0\n          ).toPromise();\n\n          console.log('PayPal capture result:', result);\n\n          // Utilisation de NgZone pour mettre à jour l'interface utilisateur après une opération asynchrone\n          this.ngZone.run(() => {\n            this.notificationService.success('Paiement effectué avec succès');\n            \n            // Redirection en fonction du type de paiement\n            if (this.isDeposit && this.manufacturingRequestId) {\n              this.router.navigate(['/manufacturing/confirmation', this.manufacturingRequestId]);\n            } else {\n              this.router.navigate(['/payment-success']);\n            }\n            this.paymentSuccess.emit(result); // Émet un événement de succès\n          });\n        } catch (error) {\n          console.error('Erreur capture PayPal:', error);\n          this.notificationService.error('Erreur lors de la finalisation du paiement');\n        }\n      },\n\n      // Gestion des erreurs de paiement\n      onError: (err: any) => {\n        console.error('PayPal Error:', err);\n        this.ngZone.run(() => {\n          this.notificationService.error('Erreur lors du paiement');\n        });\n      }\n    }).render('#paypal-button'); // Rendu du bouton PayPal dans l'élément HTML ciblé\n  }\n}\n", "import { Component, OnInit } from '@angular/core'; // Importation des modules Angular nécessaires\r\nimport { CommonModule } from '@angular/common'; // Importation du module commun d'Angular\r\nimport { Router } from '@angular/router'; // Importation du module de routage Angular\r\nimport { CartService } from '../../services/cart/cart.service'; // Importation du service CartService\r\nimport { NotificationService } from '../../services/notification/notification.service'; // Importation du service NotificationService\r\nimport { PaypalButtonComponent } from '../PayPal/paypal-button.component'; // Importation du composant PayPal\r\nimport { CartItem } from '../../models/cart/cart-item.model'; // Importation du modèle CartItem\r\n\r\n@Component({\r\n  selector: 'app-checkout', // Définition du sélecteur du composant\r\n  standalone: true, // Indique que le composant est autonome\r\n  imports: [CommonModule, PaypalButtonComponent], // Importation des modules nécessaires\r\n  templateUrl: './checkout.component.html', // Lien vers le fichier HTML du composant\r\n  styleUrls: ['./checkout.component.scss'] // Lien vers le fichier SCSS du composant\r\n})\r\nexport class CheckoutComponent implements OnInit {\r\n  cartItems: CartItem[] = []; // Déclaration d'un tableau pour stocker les articles du panier\r\n  total: number = 0; // Initialisation du total du panier à 0\r\n  amount: number = 0; // Initialisation du montant à payer\r\n  isProcessing = false; // Indicateur de traitement du paiement\r\n\r\n  constructor(\r\n    private cartService: CartService, // Injection du service CartService\r\n    private router: Router, // Injection du service Router\r\n    private notificationService: NotificationService // Injection du service NotificationService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.loadCart(); // Chargement du panier lors de l'initialisation du composant\r\n  }\r\n\r\n  loadCart() {\r\n    this.cartService.getCartItems().subscribe({\r\n      next: (items) => {\r\n        this.cartItems = items; // Stocke les articles récupérés\r\n        this.total = this.calculateTotal(items); // Calcule le total du panier\r\n        this.amount = this.total; // Définit le montant à payer\r\n      },\r\n      error: (error) => {\r\n        console.error('Erreur chargement panier:', error);\r\n        this.notificationService.error('Erreur lors du chargement du panier'); // Affiche une erreur en cas d'échec\r\n      }\r\n    });\r\n  }\r\n\r\n  calculateTotal(items: CartItem[]): number {\r\n    return items.reduce((sum, item) => \r\n      sum + (this.hasActivePromotion(item) \r\n        ? this.calculateDiscountedPrice(item) \r\n        : Number(item.product.price)) * item.quantity, \r\n      0\r\n    ); // Calcule le total du panier en appliquant les promotions actives\r\n  }\r\n\r\n  hasActivePromotion(item: CartItem): boolean {\r\n    if (!item.product.activePromotion) {\r\n      return false; // Vérifie si une promotion est active sur le produit\r\n    }\r\n    \r\n    const endDate = item.product.activePromotion.endDate;\r\n    if (!endDate) {\r\n      return false; // Vérifie si une date de fin de promotion est définie\r\n    }\r\n\r\n    return new Date(endDate) > new Date(); // Vérifie si la promotion est encore valide\r\n  }\r\n\r\n  calculateDiscountedPrice(item: CartItem): number {\r\n    const activePromotion = item.product.activePromotion;\r\n    if (!activePromotion || !this.hasActivePromotion(item)) {\r\n      return Number(item.product.price); // Retourne le prix normal si pas de promotion\r\n    }\r\n    \r\n    const discountPercentage = activePromotion.discountPercentage ?? 0;\r\n    const discount = discountPercentage / 100;\r\n    return Number(item.product.price) * (1 - discount); // Applique la réduction sur le prix\r\n  }\r\n\r\n  returnToCart(): void {\r\n    this.router.navigate(['/client/cart']); // Redirection vers la page du panier\r\n  }\r\n\r\n  handlePaymentSuccess(event: any): void {\r\n    console.log('Paiement réussi:', event);\r\n    this.notificationService.success('Paiement effectué avec succès'); // Notification de succès après paiement\r\n  }\r\n\r\n  payWithBancontact(): void {\r\n    this.isProcessing = true;\r\n    this.notificationService.info('Paiement Bancontact bientôt disponible'); // Indication que le paiement Bancontact est en cours de développement\r\n  }\r\n\r\n  payWithCard(): void {\r\n    this.isProcessing = true;\r\n    this.notificationService.info('Paiement par carte bientôt disponible'); // Indication que le paiement par carte est en cours de développement\r\n  }\r\n}\r\n", "<div class=\"payment-container\">\r\n  <h3 class=\"title\">Paiement sécurisé</h3>\r\n  <div class=\"amount\">Total à payer: {{ amount | currency:'EUR' }}</div>\r\n\r\n  <div class=\"cart-summary\">\r\n    <h4>Résumé de la commande</h4>\r\n    @for (item of cartItems; track item.id) {\r\n      <div class=\"cart-item-summary\">\r\n        <span>{{ item.product.name }} x{{ item.quantity }}</span>\r\n        <span>\r\n          @if (hasActivePromotion(item)) {\r\n            <span class=\"original-price\">{{ item.product.price | currency:'EUR' }}</span>\r\n            <span class=\"discount-price\">{{ calculateDiscountedPrice(item) | currency:'EUR' }}</span>\r\n          } @else {\r\n            {{ item.product.price | currency:'EUR' }}\r\n          }\r\n        </span>\r\n      </div>\r\n    }\r\n    \r\n    <div class=\"total-line\">\r\n      <strong>Total:</strong>\r\n      <span>{{ amount | currency:'EUR' }}</span>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Boutons de paiement -->\r\n  <div class=\"payment-methods\">\r\n    <app-paypal-button \r\n      [amount]=\"amount\"\r\n      (onPaymentSuccess)=\"handlePaymentSuccess($event)\"\r\n    ></app-paypal-button>\r\n\r\n    <button class=\"btn bancontact\" (click)=\"payWithBancontact()\">\r\n      Payer avec Bancontact\r\n    </button>\r\n\r\n    <button class=\"btn card\" (click)=\"payWithCard()\">\r\n      Payer par Carte\r\n    </button>\r\n\r\n    <button routerLink=\"/client/cart\" class=\"btn secondary\">\r\n      Retour au panier\r\n    </button>\r\n  </div>\r\n</div>\r\n", "// src/app/components/Promotion/promotion-timer.component.ts\r\n\r\nimport { Component, Input } from '@angular/core'; // Importation des modules Angular nécessaires\r\nimport { CommonModule } from '@angular/common'; // Importation du module commun pour les fonctionnalités de base d’Angular\r\n\r\n@Component({\r\n  selector: 'app-promotion-timer', // Définition du sélecteur du composant\r\n  standalone: true, // Indique que le composant peut être utilisé indépendamment\r\n  imports: [CommonModule], // Importation des modules nécessaires\r\n  template: `\r\n    <div class=\"timer-container\"> <!-- Conteneur principal du timer -->\r\n      <!-- Badge -20% -->\r\n      <div class=\"discount-badge\">-20%</div> <!-- Badge indiquant le pourcentage de réduction -->\r\n      <!-- Timer -->\r\n      <div class=\"time-units\"> <!-- Conteneur pour afficher les unités de temps -->\r\n        <div class=\"time-unit\"> <!-- Bloc pour les jours -->\r\n          <span class=\"number\">{{days}}</span> <!-- Affichage du nombre de jours restants -->\r\n          <span class=\"label\">jours</span> <!-- Libellé \"jours\" -->\r\n        </div>\r\n        <div class=\"separator\">|</div> <!-- Séparateur visuel entre les unités de temps -->\r\n        <div class=\"time-unit\"> <!-- Bloc pour les heures -->\r\n          <span class=\"number\">{{hours}}</span> <!-- Affichage du nombre d'heures restantes -->\r\n          <span class=\"label\">heures</span> <!-- Libellé \"heures\" -->\r\n        </div>\r\n        <div class=\"separator\">|</div> <!-- Séparateur visuel entre les unités de temps -->\r\n        <div class=\"time-unit\"> <!-- Bloc pour les minutes -->\r\n          <span class=\"number\">{{minutes}}</span> <!-- Affichage du nombre de minutes restantes -->\r\n          <span class=\"label\">min</span> <!-- Libellé \"min\" -->\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .timer-container {\r\n      display: inline-flex; /* Disposition en ligne avec flexbox */\r\n      flex-direction: row; /* Orientation horizontale */\r\n      align-items: center; /* Alignement vertical des éléments */\r\n      background: #ef4444; /* Couleur de fond rouge */\r\n      color: white; /* Couleur du texte en blanc */\r\n      padding: 0.25rem 0.5rem; /* Espacement intérieur */\r\n      border-radius: 4px; /* Bords arrondis */\r\n      position: relative; /* Position relative pour le positionnement interne */\r\n      gap: 0.5rem; /* Espacement entre les éléments */\r\n      min-width: 250px; /* Largeur minimale */\r\n    }\r\n\r\n    .discount-badge {\r\n      background: #fbbf24; /* Couleur de fond jaune */\r\n      color: black; /* Couleur du texte en noir */\r\n      padding: 2px 6px; /* Espacement intérieur */\r\n      border-radius: 4px; /* Bords arrondis */\r\n      font-weight: bold; /* Texte en gras */\r\n      font-size: 0.875rem; /* Taille de la police */\r\n    }\r\n\r\n    .time-units {\r\n      display: flex; /* Utilisation de flexbox */\r\n      align-items: center; /* Alignement vertical */\r\n      gap: 0.5rem; /* Espacement entre les unités */\r\n      padding-left: 0.5rem; /* Marge à gauche */\r\n    }\r\n\r\n    .time-unit {\r\n      display: flex; /* Utilisation de flexbox */\r\n      flex-direction: row; /* Orientation horizontale */\r\n      align-items: baseline; /* Alignement du texte en fonction de la ligne de base */\r\n      gap: 0.25rem; /* Espacement entre les éléments */\r\n    }\r\n\r\n    .number {\r\n      font-size: 1rem; /* Taille de la police pour les nombres */\r\n      font-weight: bold; /* Texte en gras */\r\n    }\r\n\r\n    .label {\r\n      font-size: 0.75rem; /* Taille de la police pour les libellés */\r\n      color: rgba(255, 255, 255, 0.9); /* Couleur du texte avec opacité */\r\n    }\r\n\r\n    .separator {\r\n      color: rgba(255, 255, 255, 0.7); /* Couleur du séparateur avec opacité */\r\n      font-weight: 200; /* Texte plus fin */\r\n      margin: 0 -0.25rem; /* Marges négatives pour rapprocher les séparateurs */\r\n    }\r\n  `]\r\n})\r\nexport class PromotionTimerComponent {\r\n  @Input() endDate!: Date | string; // Propriété d'entrée pour la date de fin de la promotion\r\n  days: number = 362; // Valeur par défaut des jours restants\r\n  hours: number = 4; // Valeur par défaut des heures restantes\r\n  minutes: number = 6; // Valeur par défaut des minutes restantes\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
