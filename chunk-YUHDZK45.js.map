{
  "version": 3,
  "sources": ["src/app/services/promotion/promotion.service.ts"],
  "sourcesContent": ["// services/promotion/promotion.service.ts\r\n\r\n// L'annotation @Injectable permet d'injecter ce service dans l'application Angular\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http'; // HttpClient pour effectuer des requêtes HTTP\r\nimport { Observable, catchError, throwError } from 'rxjs'; // Observable pour les flux asynchrones et gestion d'erreurs\r\nimport { NotificationService } from '../notification/notification.service'; // Service pour afficher des notifications\r\nimport { Promotion, PromotionPayload } from '../../models/promotion/promotion.model'; // Modèles pour les promotions\r\n\r\n@Injectable({\r\n  providedIn: 'root' // Ce service est injecté globalement dans l'application\r\n})\r\nexport class PromotionService {\r\n  private readonly API_URL = 'http://localhost:2024/api/promotions'; // URL de l'API pour gérer les promotions\r\n\r\n  constructor(\r\n    private http: HttpClient, // Injection de HttpClient pour effectuer les requêtes HTTP\r\n    private notificationService: NotificationService // Injection du service de notification pour gérer les erreurs\r\n  ) {}\r\n\r\n  // Méthode pour récupérer toutes les promotions\r\n  getAllPromotions(): Observable<Promotion[]> {\r\n    return this.http.get<Promotion[]>(this.API_URL).pipe(\r\n      catchError(error => {\r\n        // En cas d'erreur, affiche une notification d'erreur et relance l'erreur\r\n        this.notificationService.error('Erreur lors du chargement des promotions');\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  // Méthode pour récupérer les promotions actives\r\n  getActivePromotions(): Observable<Promotion[]> {\r\n    return this.http.get<Promotion[]>(`${this.API_URL}/active`).pipe(\r\n      catchError(error => {\r\n        // En cas d'erreur, affiche une notification d'erreur et relance l'erreur\r\n        this.notificationService.error('Erreur lors du chargement des promotions actives');\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  // Méthode pour créer une nouvelle promotion\r\n  createPromotion(promotion: PromotionPayload): Observable<Promotion> {\r\n    return this.http.post<Promotion>(this.API_URL, promotion).pipe(\r\n      catchError(error => {\r\n        // En cas d'erreur, affiche une notification d'erreur et relance l'erreur\r\n        this.notificationService.error('Erreur lors de la création de la promotion');\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  // Méthode pour mettre à jour une promotion existante\r\n  updatePromotion(id: number, promotion: PromotionPayload): Observable<Promotion> {\r\n    return this.http.put<Promotion>(`${this.API_URL}/${id}`, promotion).pipe(\r\n      catchError(error => {\r\n        // En cas d'erreur, affiche une notification d'erreur et relance l'erreur\r\n        this.notificationService.error('Erreur lors de la mise à jour de la promotion');\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  // Méthode pour supprimer une promotion\r\n  deletePromotion(id: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.API_URL}/${id}`).pipe(\r\n      catchError(error => {\r\n        // En cas d'erreur, affiche une notification d'erreur et relance l'erreur\r\n        this.notificationService.error('Erreur lors de la suppression de la promotion');\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  // Méthode pour prolonger une promotion existante\r\n  extendPromotion(id: number, newEndDate: string): Observable<void> {\r\n    return this.http.patch<void>(`${this.API_URL}/${id}/extend`, { endDate: newEndDate }).pipe(\r\n      catchError(error => {\r\n        // En cas d'erreur, affiche une notification d'erreur et relance l'erreur\r\n        this.notificationService.error('Erreur lors de la prolongation de la promotion');\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  // Méthode pour désactiver une promotion\r\n  deactivatePromotion(id: number): Observable<void> {\r\n    return this.http.patch<void>(`${this.API_URL}/${id}/deactivate`, {}).pipe(\r\n      catchError(error => {\r\n        // En cas d'erreur, affiche une notification d'erreur et relance l'erreur\r\n        this.notificationService.error('Erreur lors de la désactivation de la promotion');\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;AAYM,IAAO,mBAAP,MAAO,kBAAgB;EAG3B,YACU,MACA;AADA,SAAA,OAAA;AACA,SAAA,sBAAA;AAJO,SAAA,UAAU;EAKxB;;EAGH,mBAAgB;AACd,WAAO,KAAK,KAAK,IAAiB,KAAK,OAAO,EAAE,KAC9C,WAAW,WAAQ;AAEjB,WAAK,oBAAoB,MAAM,0CAA0C;AACzE,aAAO,WAAW,MAAM,KAAK;IAC/B,CAAC,CAAC;EAEN;;EAGA,sBAAmB;AACjB,WAAO,KAAK,KAAK,IAAiB,GAAG,KAAK,OAAO,SAAS,EAAE,KAC1D,WAAW,WAAQ;AAEjB,WAAK,oBAAoB,MAAM,kDAAkD;AACjF,aAAO,WAAW,MAAM,KAAK;IAC/B,CAAC,CAAC;EAEN;;EAGA,gBAAgB,WAA2B;AACzC,WAAO,KAAK,KAAK,KAAgB,KAAK,SAAS,SAAS,EAAE,KACxD,WAAW,WAAQ;AAEjB,WAAK,oBAAoB,MAAM,+CAA4C;AAC3E,aAAO,WAAW,MAAM,KAAK;IAC/B,CAAC,CAAC;EAEN;;EAGA,gBAAgB,IAAY,WAA2B;AACrD,WAAO,KAAK,KAAK,IAAe,GAAG,KAAK,OAAO,IAAI,EAAE,IAAI,SAAS,EAAE,KAClE,WAAW,WAAQ;AAEjB,WAAK,oBAAoB,MAAM,kDAA+C;AAC9E,aAAO,WAAW,MAAM,KAAK;IAC/B,CAAC,CAAC;EAEN;;EAGA,gBAAgB,IAAU;AACxB,WAAO,KAAK,KAAK,OAAa,GAAG,KAAK,OAAO,IAAI,EAAE,EAAE,EAAE,KACrD,WAAW,WAAQ;AAEjB,WAAK,oBAAoB,MAAM,+CAA+C;AAC9E,aAAO,WAAW,MAAM,KAAK;IAC/B,CAAC,CAAC;EAEN;;EAGA,gBAAgB,IAAY,YAAkB;AAC5C,WAAO,KAAK,KAAK,MAAY,GAAG,KAAK,OAAO,IAAI,EAAE,WAAW,EAAE,SAAS,WAAU,CAAE,EAAE,KACpF,WAAW,WAAQ;AAEjB,WAAK,oBAAoB,MAAM,gDAAgD;AAC/E,aAAO,WAAW,MAAM,KAAK;IAC/B,CAAC,CAAC;EAEN;;EAGA,oBAAoB,IAAU;AAC5B,WAAO,KAAK,KAAK,MAAY,GAAG,KAAK,OAAO,IAAI,EAAE,eAAe,CAAA,CAAE,EAAE,KACnE,WAAW,WAAQ;AAEjB,WAAK,oBAAoB,MAAM,oDAAiD;AAChF,aAAO,WAAW,MAAM,KAAK;IAC/B,CAAC,CAAC;EAEN;;;uBAnFW,mBAAgB,mBAAA,UAAA,GAAA,mBAAA,mBAAA,CAAA;IAAA;EAAA;;;aAAhB;MAAgB,SAAhB,kBAAgB;MAAA,YAFf;;;;;",
  "names": []
}
